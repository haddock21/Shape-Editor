{"ast":null,"code":"var _jsxFileName = \"/home/nightsquid/Desktop/GUI II/studyspace/src/components/Canvas.js\",\n  _s = $RefreshSig$();\nimport React, { forwardRef, useImperativeHandle, useRef, useEffect, useState } from \"react\";\nimport { jsPDF } from \"jspdf\";\nimport \"../css/canvas.css\";\n\n// --- Helper Functions ---\n// Compute bounding box for any shape\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ndocumentation: omitted;\nfunction getBBox(shape) {\n  if (shape.points) {\n    const xs = shape.points.map(p => p.x);\n    const ys = shape.points.map(p => p.y);\n    return {\n      xMin: Math.min(...xs),\n      yMin: Math.min(...ys),\n      xMax: Math.max(...xs),\n      yMax: Math.max(...ys)\n    };\n  }\n  if (shape.tool === \"circle\") {\n    const cx = shape.x0,\n      cy = shape.y0;\n    if (shape.isCircle) {\n      const r = Math.hypot(shape.x1 - shape.x0, shape.y1 - shape.y0);\n      return {\n        xMin: cx - r,\n        yMin: cy - r,\n        xMax: cx + r,\n        yMax: cy + r\n      };\n    } else {\n      const rx = Math.abs(shape.x1 - shape.x0);\n      const ry = Math.abs(shape.y1 - shape.y0);\n      return {\n        xMin: cx - rx,\n        yMin: cy - ry,\n        xMax: cx + rx,\n        yMax: cy + ry\n      };\n    }\n  }\n  return {\n    xMin: Math.min(shape.x0, shape.x1),\n    yMin: Math.min(shape.y0, shape.y1),\n    xMax: Math.max(shape.x0, shape.x1),\n    yMax: Math.max(shape.y0, shape.y1)\n  };\n}\n\n// Hit-test a point against any shape\nfunction hitTest(ctx, shape, x, y, defaultStroke) {\n  var _shape$points;\n  const path = new Path2D();\n  ctx.lineWidth = (shape.strokeWidth || defaultStroke) + 8;\n  switch (shape.tool) {\n    case \"line\":\n      path.moveTo(shape.x0, shape.y0);\n      path.lineTo(shape.x1, shape.y1);\n      return ctx.isPointInStroke(path, x, y);\n    case \"poly-line\":\n    case \"curve\":\n      if (((_shape$points = shape.points) === null || _shape$points === void 0 ? void 0 : _shape$points.length) > 1) {\n        path.moveTo(shape.points[0].x, shape.points[0].y);\n        shape.points.slice(1).forEach(p => path.lineTo(p.x, p.y));\n        return ctx.isPointInStroke(path, x, y);\n      }\n      return false;\n    default:\n      const {\n        xMin,\n        yMin,\n        xMax,\n        yMax\n      } = getBBox(shape);\n      return x >= xMin && x <= xMax && y >= yMin && y <= yMax;\n  }\n}\n\n// Draw a shape onto the context\ndocumentation: omitted;\ndocumentation: omitted;\ndocumentation: omitted;\ndocumentation: omitted;\nfunction drawShape(ctx, shape, offsetX = 0, offsetY = 0) {\n  var _shape$points2, _shape$points3;\n  const x0 = shape.x0 + offsetX,\n    y0 = shape.y0 + offsetY;\n  const x1 = shape.x1 + offsetX,\n    y1 = shape.y1 + offsetY;\n  switch (shape.tool) {\n    case \"square\":\n      {\n        const dx = shape.x1 - shape.x0,\n          dy = shape.y1 - shape.y0;\n        let w, h;\n        if (shape.isSquare) {\n          const side = Math.min(Math.abs(dx), Math.abs(dy));\n          w = dx < 0 ? -side : side;\n          h = dy < 0 ? -side : side;\n        } else {\n          w = dx;\n          h = dy;\n        }\n        ctx.fillRect(shape.x0 + offsetX, shape.y0 + offsetY, w, h);\n        ctx.strokeRect(shape.x0 + offsetX, shape.y0 + offsetY, w, h);\n        break;\n      }\n    case \"line\":\n      ctx.beginPath();\n      ctx.moveTo(x0, y0);\n      ctx.lineTo(x1, y1);\n      ctx.stroke();\n      break;\n    case \"circle\":\n      ctx.beginPath();\n      if (shape.isCircle) {\n        const r = Math.hypot(shape.x1 - shape.x0, shape.y1 - shape.y0);\n        ctx.arc(x0, y0, r, 0, 2 * Math.PI);\n      } else {\n        ctx.ellipse(x0, y0, Math.abs(shape.x1 - shape.x0), Math.abs(shape.y1 - shape.y0), 0, 0, 2 * Math.PI);\n      }\n      ctx.fill();\n      ctx.stroke();\n      break;\n    case \"triangle\":\n      ctx.beginPath();\n      ctx.moveTo(x0, y0);\n      ctx.lineTo(x1, y0);\n      ctx.lineTo((x0 + x1) / 2, y1);\n      ctx.closePath();\n      ctx.fill();\n      ctx.stroke();\n      break;\n    case \"polygon\":\n      ctx.beginPath();\n      const sides = 5;\n      const radius = Math.hypot(shape.x1 - shape.x0, shape.y1 - shape.y0);\n      const cx = shape.x0 + offsetX,\n        cy = shape.y0 + offsetY;\n      for (let i = 0; i < sides; i++) {\n        const ang = i * (2 * Math.PI / sides) - Math.PI / 2;\n        const px = cx + radius * Math.cos(ang);\n        const py = cy + radius * Math.sin(ang);\n        i === 0 ? ctx.moveTo(px, py) : ctx.lineTo(px, py);\n      }\n      ctx.closePath();\n      ctx.fill();\n      ctx.stroke();\n      break;\n    case \"poly-line\":\n      if ((_shape$points2 = shape.points) !== null && _shape$points2 !== void 0 && _shape$points2.length) {\n        ctx.beginPath();\n        ctx.moveTo(shape.points[0].x + offsetX, shape.points[0].y + offsetY);\n        shape.points.slice(1).forEach(p => ctx.lineTo(p.x + offsetX, p.y + offsetY));\n        ctx.stroke();\n      }\n      break;\n    case \"curve\":\n      if ((_shape$points3 = shape.points) !== null && _shape$points3 !== void 0 && _shape$points3.length) {\n        ctx.beginPath();\n        const pts = shape.points;\n        ctx.moveTo(pts[0].x + offsetX, pts[0].y + offsetY);\n        for (let i = 1; i < pts.length; i++) {\n          const prev = pts[i - 1],\n            curr = pts[i];\n          const mx = (prev.x + curr.x) / 2 + offsetX;\n          const my = (prev.y + curr.y) / 2 + offsetY;\n          ctx.quadraticCurveTo(prev.x + offsetX, prev.y + offsetY, mx, my);\n        }\n        ctx.stroke();\n      }\n      break;\n    default:\n      break;\n  }\n}\n\n// Draw selection handles for any shape\nfunction drawSelection(ctx, shape, offsetX = 0, offsetY = 0) {\n  const R = 5;\n  if (shape.tool === \"line\") {\n    const p0 = {\n      x: shape.x0 + offsetX,\n      y: shape.y0 + offsetY\n    };\n    const p1 = {\n      x: shape.x1 + offsetX,\n      y: shape.y1 + offsetY\n    };\n    ctx.beginPath();\n    ctx.moveTo(p0.x, p0.y);\n    ctx.lineTo(p1.x, p1.y);\n    ctx.stroke();\n    [p0, p1].forEach(pt => {\n      ctx.beginPath();\n      ctx.arc(pt.x, pt.y, R, 0, 2 * Math.PI);\n      ctx.fill();\n      ctx.stroke();\n    });\n    return;\n  }\n  const {\n    xMin,\n    yMin,\n    xMax,\n    yMax\n  } = getBBox(shape);\n  ctx.strokeRect(xMin, yMin, xMax - xMin, yMax - yMin);\n  [{\n    x: xMin,\n    y: yMin\n  }, {\n    x: xMax,\n    y: yMin\n  }, {\n    x: xMax,\n    y: yMax\n  }, {\n    x: xMin,\n    y: yMax\n  }].forEach(pt => {\n    ctx.beginPath();\n    ctx.arc(pt.x, pt.y, R, 0, 2 * Math.PI);\n    ctx.fill();\n    ctx.stroke();\n  });\n}\nconst Canvas = /*#__PURE__*/_s(/*#__PURE__*/forwardRef(_c = _s(({\n  activeTool,\n  lineColor,\n  fillColor,\n  strokeWidth\n}, ref) => {\n  _s();\n  const containerRef = useRef(null);\n  const c1Ref = useRef(null);\n  const c2Ref = useRef(null);\n  const shapesRef = useRef([]);\n  const redoRef = useRef([]);\n  const polyRef = useRef([]);\n  const curveRef = useRef([]);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [startPos, setStartPos] = useState({\n    x: 0,\n    y: 0\n  });\n  const dragRef = useRef({\n    isDragging: false,\n    prevPos: {\n      x: 0,\n      y: 0\n    },\n    shapeIndex: null\n  });\n  useImperativeHandle(ref, () => ({\n    exportShapes: () => {/* unchanged */},\n    downloadJPEG: () => {/* unchanged */},\n    downloadPDF: () => {/* unchanged */},\n    loadShapes: arr => {\n      shapesRef.current = arr.map(s => ({\n        ...s,\n        selected: false\n      }));\n      redrawAll();\n    },\n    getShapeCount: () => shapesRef.current.length,\n    clearShapes: () => {\n      shapesRef.current = [];\n      redrawAll();\n    }\n  }));\n\n  // resize\n  useEffect(() => {\n    const resize = () => {\n      const {\n        width,\n        height\n      } = containerRef.current.getBoundingClientRect();\n      [c1Ref, c2Ref].forEach(r => {\n        r.current.width = width;\n        r.current.height = height;\n      });\n      redrawAll();\n    };\n    resize();\n    window.addEventListener(\"resize\", resize);\n    return () => window.removeEventListener(\"resize\", resize);\n  }, []);\n\n  // style sync\n  useEffect(() => {\n    let dirty = false;\n    shapesRef.current.forEach(s => {\n      if (s.selected && (s.strokeWidth !== strokeWidth || s.lineColor !== lineColor || s.fillColor !== fillColor)) {\n        s.strokeWidth = strokeWidth;\n        s.lineColor = lineColor;\n        s.fillColor = fillColor;\n        dirty = true;\n      }\n    });\n    if (dirty) redrawAll();\n  }, [strokeWidth, lineColor, fillColor]);\n\n  // draw all shapes + selections\n  function redrawAll(context = c1Ref, offsetX = 0, offsetY = 0) {\n    const c = context.current;\n    const ctx = c.getContext(\"2d\");\n    ctx.clearRect(0, 0, c.width, c.height);\n    ctx.fillStyle = \"#979797\";\n    ctx.fillRect(0, 0, c.width, c.height);\n    shapesRef.current.forEach(s => {\n      ctx.save();\n      ctx.strokeStyle = s.lineColor || lineColor;\n      ctx.fillStyle = s.fillColor || fillColor;\n      ctx.lineWidth = s.strokeWidth || strokeWidth;\n      drawShape(ctx, s, offsetX, offsetY);\n      if (s.selected) {\n        ctx.save();\n        ctx.strokeStyle = \"#ff7300\";\n        ctx.lineWidth = 2;\n        drawSelection(ctx, s, offsetX, offsetY);\n        ctx.restore();\n      }\n      ctx.restore();\n    });\n  }\n\n  // drawing & selection logic\n  useEffect(() => {\n    const c2 = c2Ref.current;\n    const ctx2 = c2.getContext(\"2d\");\n    const getPos = e => {\n      const r = c2.getBoundingClientRect();\n      return {\n        x: e.clientX - r.left,\n        y: e.clientY - r.top\n      };\n    };\n    const down = e => {\n      const pos = getPos(e);\n      if (activeTool === \"cursor\") {\n        const ctx1 = c1Ref.current.getContext(\"2d\");\n        shapesRef.current.forEach(s => s.selected = false);\n        for (let i = shapesRef.current.length - 1; i >= 0; i--) {\n          const s = shapesRef.current[i];\n          if (hitTest(ctx1, s, pos.x, pos.y, strokeWidth)) {\n            s.selected = true;\n            dragRef.current = {\n              isDragging: true,\n              prevPos: pos,\n              shapeIndex: i\n            };\n            redrawAll();\n            return;\n          }\n        }\n        redrawAll();\n        return;\n      }\n      if (activeTool === \"poly-line\") {\n        polyRef.current.push(getPos(e));\n        setIsDrawing(true);\n        return;\n      }\n      if (activeTool === \"curve\") {\n        curveRef.current.push(getPos(e));\n        setIsDrawing(true);\n        return;\n      }\n      if (![\"square\", \"line\", \"circle\", \"triangle\", \"polygon\"].includes(activeTool)) return;\n      setStartPos(getPos(e));\n      setIsDrawing(true);\n    };\n    const move = e => {\n      const pos = getPos(e);\n      // translation\n      if (activeTool === \"cursor\" && dragRef.current.isDragging) {\n        const dx = pos.x - dragRef.current.prevPos.x;\n        const dy = pos.y - dragRef.current.prevPos.y;\n        const s = shapesRef.current[dragRef.current.shapeIndex];\n        if (s.points) s.points.forEach(p => {\n          p.x += dx;\n          p.y += dy;\n        });else {\n          s.x0 += dx;\n          s.y0 += dy;\n          s.x1 += dx;\n          s.y1 += dy;\n        }\n        dragRef.current.prevPos = pos;\n        redrawAll();\n        return;\n      }\n      // poly-line rubber-band\n      if (activeTool === \"poly-line\" && polyRef.current.length) {\n        ctx2.clearRect(0, 0, c2.width, c2.height);\n        ctx2.strokeStyle = lineColor;\n        ctx2.lineWidth = strokeWidth;\n        ctx2.beginPath();\n        ctx2.moveTo(polyRef.current[0].x, polyRef.current[0].y);\n        polyRef.current.slice(1).forEach(pt => ctx2.lineTo(pt.x, pt.y));\n        ctx2.lineTo(pos.x, pos.y);\n        ctx2.stroke();\n        return;\n      }\n      // curve rubber-band\n      if (activeTool === \"curve\" && curveRef.current.length) {\n        ctx2.clearRect(0, 0, c2.width, c2.height);\n        ctx2.strokeStyle = lineColor;\n        ctx2.lineWidth = strokeWidth;\n        ctx2.beginPath();\n        const pts = curveRef.current;\n        ctx2.moveTo(pts[0].x, pts[0].y);\n        for (let i = 1; i < pts.length; i++) {\n          const prev = pts[i - 1],\n            curr = pts[i];\n          const mx = (prev.x + curr.x) / 2,\n            my = (prev.y + curr.y) / 2;\n          ctx2.quadraticCurveTo(prev.x, prev.y, mx, my);\n        }\n        ctx2.lineTo(pos.x, pos.y);\n        ctx2.stroke();\n        return;\n      }\n      if (!isDrawing) return;\n      const {\n        x,\n        y\n      } = pos;\n      const dx = x - startPos.x,\n        dy = y - startPos.y;\n      ctx2.clearRect(0, 0, c2.width, c2.height);\n      ctx2.strokeStyle = lineColor;\n      ctx2.lineWidth = strokeWidth;\n      ctx2.beginPath();\n      switch (activeTool) {\n        case \"square\":\n          const side = Math.min(Math.abs(dx), Math.abs(dy));\n          const w = dx < 0 ? -side : side;\n          const h = dy < 0 ? -side : side;\n          ctx2.strokeRect(startPos.x, startPos.y, w, h);\n          break;\n        case \"line\":\n          ctx2.moveTo(startPos.x, startPos.y);\n          ctx2.lineTo(x, y);\n          ctx2.stroke();\n          break;\n        case \"circle\":\n          if (e.shiftKey) ctx2.arc(startPos.x, startPos.y, Math.min(Math.abs(dx), Math.abs(dy)), 0, 2 * Math.PI);else ctx2.ellipse(startPos.x, startPos.y, Math.abs(dx), Math.abs(dy), 0, 0, 2 * Math.PI);\n          ctx2.stroke();\n          break;\n        case \"triangle\":\n          ctx2.moveTo(startPos.x, startPos.y);\n          ctx2.lineTo(startPos.x + dx, startPos.y);\n          ctx2.lineTo(startPos.x + dx / 2, startPos.y + dy);\n          ctx2.closePath();\n          ctx2.stroke();\n          break;\n        case \"polygon\":\n          const sides2 = 5,\n            r2 = Math.hypot(dx, dy),\n            st2 = 2 * Math.PI / sides2;\n          ctx2.beginPath();\n          for (let i = 0; i < sides2; i++) {\n            const a = i * st2 - Math.PI / 2;\n            const px = startPos.x + r2 * Math.cos(a);\n            const py = startPos.y + r2 * Math.sin(a);\n            i === 0 ? ctx2.moveTo(px, py) : ctx2.lineTo(px, py);\n          }\n          ctx2.closePath();\n          ctx2.stroke();\n          break;\n        default:\n          break;\n      }\n    };\n    const up = e => {\n      if (activeTool === \"cursor\" && dragRef.current.isDragging) {\n        dragRef.current.isDragging = false;\n        dragRef.current.shapeIndex = null;\n        return;\n      }\n      if ([\"poly-line\", \"curve\"].includes(activeTool)) return;\n      if (!isDrawing) return;\n      const pos = getPos(e);\n      if (pos.x === startPos.x && pos.y === startPos.y) {\n        ctx2.clearRect(0, 0, c2.width, c2.height);\n        setIsDrawing(false);\n        return;\n      }\n      const isCircle = activeTool === \"circle\" && e.shiftKey;\n      const isSquare = activeTool === \"square\" && e.shiftKey;\n      shapesRef.current.push({\n        tool: activeTool,\n        x0: startPos.x,\n        y0: startPos.y,\n        x1: pos.x,\n        y1: pos.y,\n        lineColor,\n        fillColor,\n        strokeWidth,\n        isCircle,\n        isSquare,\n        selected: false\n      });\n      shapesRef.current.forEach(s => s.selected = false);\n      shapesRef.current[shapesRef.current.length - 1].selected = true;\n      redrawAll();\n      ctx2.clearRect(0, 0, c2.width, c2.height);\n      setIsDrawing(false);\n    };\n    const finishPoly = e => {\n      if (activeTool != \"poly-line\" || polyRef.current.length < 2) return;\n      shapesRef.current.push({\n        tool: \"poly-line\",\n        points: polyRef.current.slice(),\n        lineColor,\n        fillColor,\n        strokeWidth,\n        selected: false\n      });\n      shapesRef.current.forEach(s => s.selected = false);\n      shapesRef.current[shapesRef.current.length - 1].selected = true;\n      redrawAll();\n      ctx2.clearRect(0, 0, c2.width, c2.height);\n      polyRef.current = [];\n    };\n    const finishCurve = e => {\n      if (activeTool != \"curve\" || curveRef.current.length < 2) return;\n      shapesRef.current.push({\n        tool: \"curve\",\n        points: curveRef.current.slice(),\n        lineColor,\n        fillColor,\n        strokeWidth,\n        selected: false\n      });\n      shapesRef.current.forEach(s => s.selected = false);\n      shapesRef.current[shapesRef.current.length - 1].selected = true;\n      redrawAll();\n      ctx2.clearRect(0, 0, c2.width, c2.height);\n      curveRef.current = [];\n      setIsDrawing(false);\n    };\n    const onKeyDown = e => {\n      if (e.ctrlKey && e.key === \"z\" && shapesRef.current.length) {\n        redoRef.current.push(shapesRef.current.pop());\n        redrawAll();\n      } else if (e.ctrlKey && e.shiftKey && e.key.toLowerCase() === \"z\" && redoRef.current.length) {\n        shapesRef.current.push(redoRef.current.pop());\n        redrawAll();\n      }\n    };\n    c2.addEventListener(\"mousedown\", down);\n    c2.addEventListener(\"mousemove\", move);\n    c2.addEventListener(\"mouseup\", up);\n    c2.addEventListener(\"dblclick\", finishPoly);\n    c2.addEventListener(\"dblclick\", finishCurve);\n    window.addEventListener(\"keydown\", onKeyDown);\n    return () => {\n      c2.removeEventListener(\"mousedown\", down);\n      c2.removeEventListener(\"mousemove\", move);\n      c2.removeEventListener(\"mouseup\", up);\n      c2.removeEventListener(\"dblclick\", finishPoly);\n      c2.removeEventListener(\"dblclick\", finishCurve);\n      window.removeEventListener(\"keydown\", onKeyDown);\n    };\n  }, [activeTool, isDrawing, startPos, lineColor, fillColor, strokeWidth]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    className: \"canvas-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: c1Ref\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: c2Ref,\n      style: {\n        backgroundColor: \"transparent\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 385,\n    columnNumber: 9\n  }, this);\n}, \"86sus16Kf9AwovcVSxM5ZVzUL9M=\")), \"86sus16Kf9AwovcVSxM5ZVzUL9M=\");\n_c2 = Canvas;\nexport default Canvas;\nvar _c, _c2;\n$RefreshReg$(_c, \"Canvas$forwardRef\");\n$RefreshReg$(_c2, \"Canvas\");","map":{"version":3,"names":["React","forwardRef","useImperativeHandle","useRef","useEffect","useState","jsPDF","jsxDEV","_jsxDEV","documentation","omitted","getBBox","shape","points","xs","map","p","x","ys","y","xMin","Math","min","yMin","xMax","max","yMax","tool","cx","x0","cy","y0","isCircle","r","hypot","x1","y1","rx","abs","ry","hitTest","ctx","defaultStroke","_shape$points","path","Path2D","lineWidth","strokeWidth","moveTo","lineTo","isPointInStroke","length","slice","forEach","drawShape","offsetX","offsetY","_shape$points2","_shape$points3","dx","dy","w","h","isSquare","side","fillRect","strokeRect","beginPath","stroke","arc","PI","ellipse","fill","closePath","sides","radius","i","ang","px","cos","py","sin","pts","prev","curr","mx","my","quadraticCurveTo","drawSelection","R","p0","p1","pt","Canvas","_s","_c","activeTool","lineColor","fillColor","ref","containerRef","c1Ref","c2Ref","shapesRef","redoRef","polyRef","curveRef","isDrawing","setIsDrawing","startPos","setStartPos","dragRef","isDragging","prevPos","shapeIndex","exportShapes","downloadJPEG","downloadPDF","loadShapes","arr","current","s","selected","redrawAll","getShapeCount","clearShapes","resize","width","height","getBoundingClientRect","window","addEventListener","removeEventListener","dirty","context","c","getContext","clearRect","fillStyle","save","strokeStyle","restore","c2","ctx2","getPos","e","clientX","left","clientY","top","down","pos","ctx1","push","includes","move","shiftKey","sides2","r2","st2","a","up","finishPoly","finishCurve","onKeyDown","ctrlKey","key","pop","toLowerCase","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","backgroundColor","_c2","$RefreshReg$"],"sources":["/home/nightsquid/Desktop/GUI II/studyspace/src/components/Canvas.js"],"sourcesContent":["import React, { forwardRef, useImperativeHandle, useRef, useEffect, useState } from \"react\";\nimport { jsPDF } from \"jspdf\";\nimport \"../css/canvas.css\";\n\n// --- Helper Functions ---\n// Compute bounding box for any shape\ndocumentation: omitted\nfunction getBBox(shape) {\n    if (shape.points) {\n        const xs = shape.points.map(p => p.x);\n        const ys = shape.points.map(p => p.y);\n        return { xMin: Math.min(...xs), yMin: Math.min(...ys), xMax: Math.max(...xs), yMax: Math.max(...ys) };\n    }\n    if (shape.tool === \"circle\") {\n        const cx = shape.x0, cy = shape.y0;\n        if (shape.isCircle) {\n            const r = Math.hypot(shape.x1 - shape.x0, shape.y1 - shape.y0);\n            return { xMin: cx - r, yMin: cy - r, xMax: cx + r, yMax: cy + r };\n        } else {\n            const rx = Math.abs(shape.x1 - shape.x0);\n            const ry = Math.abs(shape.y1 - shape.y0);\n            return { xMin: cx - rx, yMin: cy - ry, xMax: cx + rx, yMax: cy + ry };\n        }\n    }\n    return { xMin: Math.min(shape.x0, shape.x1), yMin: Math.min(shape.y0, shape.y1), xMax: Math.max(shape.x0, shape.x1), yMax: Math.max(shape.y0, shape.y1) };\n}\n\n// Hit-test a point against any shape\nfunction hitTest(ctx, shape, x, y, defaultStroke) {\n    const path = new Path2D();\n    ctx.lineWidth = (shape.strokeWidth || defaultStroke) + 8;\n    switch (shape.tool) {\n        case \"line\":\n            path.moveTo(shape.x0, shape.y0);\n            path.lineTo(shape.x1, shape.y1);\n            return ctx.isPointInStroke(path, x, y);\n        case \"poly-line\":\n        case \"curve\":\n            if (shape.points?.length > 1) {\n                path.moveTo(shape.points[0].x, shape.points[0].y);\n                shape.points.slice(1).forEach(p => path.lineTo(p.x, p.y));\n                return ctx.isPointInStroke(path, x, y);\n            }\n            return false;\n        default:\n            const { xMin, yMin, xMax, yMax } = getBBox(shape);\n            return x >= xMin && x <= xMax && y >= yMin && y <= yMax;\n    }\n}\n\n// Draw a shape onto the context\ndocumentation: omitted\ndocumentation: omitted\ndocumentation: omitted\ndocumentation: omitted\nfunction drawShape(ctx, shape, offsetX = 0, offsetY = 0) {\n    const x0 = shape.x0 + offsetX, y0 = shape.y0 + offsetY;\n    const x1 = shape.x1 + offsetX, y1 = shape.y1 + offsetY;\n    switch (shape.tool) {\n        case \"square\": {\n            const dx = shape.x1 - shape.x0, dy = shape.y1 - shape.y0;\n            let w, h;\n            if (shape.isSquare) {\n                const side = Math.min(Math.abs(dx), Math.abs(dy));\n                w = dx < 0 ? -side : side;\n                h = dy < 0 ? -side : side;\n            } else {\n                w = dx; h = dy;\n            }\n            ctx.fillRect(shape.x0 + offsetX, shape.y0 + offsetY, w, h);\n            ctx.strokeRect(shape.x0 + offsetX, shape.y0 + offsetY, w, h);\n            break;\n        }\n        case \"line\":\n            ctx.beginPath(); ctx.moveTo(x0, y0); ctx.lineTo(x1, y1); ctx.stroke();\n            break;\n        case \"circle\":\n            ctx.beginPath();\n            if (shape.isCircle) {\n                const r = Math.hypot(shape.x1 - shape.x0, shape.y1 - shape.y0);\n                ctx.arc(x0, y0, r, 0, 2 * Math.PI);\n            } else {\n                ctx.ellipse(x0, y0, Math.abs(shape.x1 - shape.x0), Math.abs(shape.y1 - shape.y0), 0, 0, 2 * Math.PI);\n            }\n            ctx.fill(); ctx.stroke();\n            break;\n        case \"triangle\":\n            ctx.beginPath();\n            ctx.moveTo(x0, y0);\n            ctx.lineTo(x1, y0);\n            ctx.lineTo((x0 + x1) / 2, y1);\n            ctx.closePath(); ctx.fill(); ctx.stroke();\n            break;\n        case \"polygon\":\n            ctx.beginPath();\n            const sides = 5;\n            const radius = Math.hypot(shape.x1 - shape.x0, shape.y1 - shape.y0);\n            const cx = shape.x0 + offsetX, cy = shape.y0 + offsetY;\n            for (let i = 0; i < sides; i++) {\n                const ang = i * (2 * Math.PI / sides) - Math.PI / 2;\n                const px = cx + radius * Math.cos(ang);\n                const py = cy + radius * Math.sin(ang);\n                i === 0 ? ctx.moveTo(px, py) : ctx.lineTo(px, py);\n            }\n            ctx.closePath(); ctx.fill(); ctx.stroke();\n            break;\n        case \"poly-line\":\n            if (shape.points?.length) {\n                ctx.beginPath();\n                ctx.moveTo(shape.points[0].x + offsetX, shape.points[0].y + offsetY);\n                shape.points.slice(1).forEach(p => ctx.lineTo(p.x + offsetX, p.y + offsetY));\n                ctx.stroke();\n            }\n            break;\n        case \"curve\":\n            if (shape.points?.length) {\n                ctx.beginPath();\n                const pts = shape.points;\n                ctx.moveTo(pts[0].x + offsetX, pts[0].y + offsetY);\n                for (let i = 1; i < pts.length; i++) {\n                    const prev = pts[i - 1], curr = pts[i];\n                    const mx = (prev.x + curr.x) / 2 + offsetX;\n                    const my = (prev.y + curr.y) / 2 + offsetY;\n                    ctx.quadraticCurveTo(prev.x + offsetX, prev.y + offsetY, mx, my);\n                }\n                ctx.stroke();\n            }\n            break;\n        default:\n            break;\n    }\n}\n\n// Draw selection handles for any shape\nfunction drawSelection(ctx, shape, offsetX = 0, offsetY = 0) {\n    const R = 5;\n    if (shape.tool === \"line\") {\n        const p0 = { x: shape.x0 + offsetX, y: shape.y0 + offsetY };\n        const p1 = { x: shape.x1 + offsetX, y: shape.y1 + offsetY };\n        ctx.beginPath(); ctx.moveTo(p0.x, p0.y); ctx.lineTo(p1.x, p1.y); ctx.stroke();\n        [p0, p1].forEach(pt => {\n            ctx.beginPath(); ctx.arc(pt.x, pt.y, R, 0, 2 * Math.PI); ctx.fill(); ctx.stroke();\n        });\n        return;\n    }\n    const { xMin, yMin, xMax, yMax } = getBBox(shape);\n    ctx.strokeRect(xMin, yMin, xMax - xMin, yMax - yMin);\n    [\n        { x: xMin, y: yMin },\n        { x: xMax, y: yMin },\n        { x: xMax, y: yMax },\n        { x: xMin, y: yMax }\n    ].forEach(pt => {\n        ctx.beginPath(); ctx.arc(pt.x, pt.y, R, 0, 2 * Math.PI); ctx.fill(); ctx.stroke();\n    });\n}\n\nconst Canvas = forwardRef(({ activeTool, lineColor, fillColor, strokeWidth }, ref) => {\n    const containerRef = useRef(null);\n    const c1Ref = useRef(null);\n    const c2Ref = useRef(null);\n    const shapesRef = useRef([]);\n    const redoRef = useRef([]);\n    const polyRef = useRef([]);\n    const curveRef = useRef([]);\n    const [isDrawing, setIsDrawing] = useState(false);\n    const [startPos, setStartPos] = useState({ x: 0, y: 0 });\n    const dragRef = useRef({ isDragging: false, prevPos: { x: 0, y: 0 }, shapeIndex: null });\n\n    useImperativeHandle(ref, () => ({\n        exportShapes: () => { /* unchanged */ },\n        downloadJPEG: () => { /* unchanged */ },\n        downloadPDF: () => { /* unchanged */ },\n        loadShapes: (arr) => { shapesRef.current = arr.map(s => ({ ...s, selected: false })); redrawAll(); },\n        getShapeCount: () => shapesRef.current.length,\n        clearShapes: () => { shapesRef.current = []; redrawAll(); }\n    }));\n\n    // resize\n    useEffect(() => {\n        const resize = () => {\n            const { width, height } = containerRef.current.getBoundingClientRect();\n            [c1Ref, c2Ref].forEach(r => { r.current.width = width; r.current.height = height; });\n            redrawAll();\n        };\n        resize(); window.addEventListener(\"resize\", resize);\n        return () => window.removeEventListener(\"resize\", resize);\n    }, []);\n\n    // style sync\n    useEffect(() => {\n        let dirty = false;\n        shapesRef.current.forEach(s => {\n            if (s.selected && (s.strokeWidth !== strokeWidth || s.lineColor !== lineColor || s.fillColor !== fillColor)) {\n                s.strokeWidth = strokeWidth; s.lineColor = lineColor; s.fillColor = fillColor; dirty = true;\n            }\n        });\n        if (dirty) redrawAll();\n    }, [strokeWidth, lineColor, fillColor]);\n\n    // draw all shapes + selections\n    function redrawAll(context = c1Ref, offsetX = 0, offsetY = 0) {\n        const c = context.current;\n        const ctx = c.getContext(\"2d\");\n        ctx.clearRect(0, 0, c.width, c.height);\n        ctx.fillStyle = \"#979797\";\n        ctx.fillRect(0, 0, c.width, c.height);\n        shapesRef.current.forEach(s => {\n            ctx.save();\n            ctx.strokeStyle = s.lineColor || lineColor;\n            ctx.fillStyle = s.fillColor || fillColor;\n            ctx.lineWidth = s.strokeWidth || strokeWidth;\n            drawShape(ctx, s, offsetX, offsetY);\n            if (s.selected) {\n                ctx.save(); ctx.strokeStyle = \"#ff7300\"; ctx.lineWidth = 2;\n                drawSelection(ctx, s, offsetX, offsetY);\n                ctx.restore();\n            }\n            ctx.restore();\n        });\n    }\n\n    // drawing & selection logic\n    useEffect(() => {\n        const c2 = c2Ref.current;\n        const ctx2 = c2.getContext(\"2d\");\n        const getPos = e => {\n            const r = c2.getBoundingClientRect();\n            return { x: e.clientX - r.left, y: e.clientY - r.top };\n        };\n\n        const down = e => {\n            const pos = getPos(e);\n            if (activeTool === \"cursor\") {\n                const ctx1 = c1Ref.current.getContext(\"2d\");\n                shapesRef.current.forEach(s => s.selected = false);\n                for (let i = shapesRef.current.length - 1; i >= 0; i--) {\n                    const s = shapesRef.current[i];\n                    if (hitTest(ctx1, s, pos.x, pos.y, strokeWidth)) {\n                        s.selected = true;\n                        dragRef.current = { isDragging: true, prevPos: pos, shapeIndex: i };\n                        redrawAll();\n                        return;\n                    }\n                }\n                redrawAll();\n                return;\n            }\n            if (activeTool === \"poly-line\") { polyRef.current.push(getPos(e)); setIsDrawing(true); return; }\n            if (activeTool === \"curve\") { curveRef.current.push(getPos(e)); setIsDrawing(true); return; }\n            if (![\"square\", \"line\", \"circle\", \"triangle\", \"polygon\"].includes(activeTool)) return;\n            setStartPos(getPos(e));\n            setIsDrawing(true);\n        };\n\n        const move = e => {\n            const pos = getPos(e);\n            // translation\n            if (activeTool === \"cursor\" && dragRef.current.isDragging) {\n                const dx = pos.x - dragRef.current.prevPos.x;\n                const dy = pos.y - dragRef.current.prevPos.y;\n                const s = shapesRef.current[dragRef.current.shapeIndex];\n                if (s.points) s.points.forEach(p => { p.x += dx; p.y += dy; });\n                else { s.x0 += dx; s.y0 += dy; s.x1 += dx; s.y1 += dy; }\n                dragRef.current.prevPos = pos;\n                redrawAll(); return;\n            }\n            // poly-line rubber-band\n            if (activeTool === \"poly-line\" && polyRef.current.length) {\n                ctx2.clearRect(0, 0, c2.width, c2.height);\n                ctx2.strokeStyle = lineColor; ctx2.lineWidth = strokeWidth;\n                ctx2.beginPath(); ctx2.moveTo(polyRef.current[0].x, polyRef.current[0].y);\n                polyRef.current.slice(1).forEach(pt => ctx2.lineTo(pt.x, pt.y));\n                ctx2.lineTo(pos.x, pos.y); ctx2.stroke(); return;\n            }\n            // curve rubber-band\n            if (activeTool === \"curve\" && curveRef.current.length) {\n                ctx2.clearRect(0, 0, c2.width, c2.height);\n                ctx2.strokeStyle = lineColor; ctx2.lineWidth = strokeWidth;\n                ctx2.beginPath();\n                const pts = curveRef.current;\n                ctx2.moveTo(pts[0].x, pts[0].y);\n                for (let i = 1; i < pts.length; i++) {\n                    const prev = pts[i - 1], curr = pts[i];\n                    const mx = (prev.x + curr.x) / 2, my = (prev.y + curr.y) / 2;\n                    ctx2.quadraticCurveTo(prev.x, prev.y, mx, my);\n                }\n                ctx2.lineTo(pos.x, pos.y); ctx2.stroke(); return;\n            }\n            if (!isDrawing) return;\n            const { x, y } = pos;\n            const dx = x - startPos.x, dy = y - startPos.y;\n            ctx2.clearRect(0, 0, c2.width, c2.height);\n            ctx2.strokeStyle = lineColor; ctx2.lineWidth = strokeWidth;\n            ctx2.beginPath();\n            switch (activeTool) {\n                case \"square\":\n                    const side = Math.min(Math.abs(dx), Math.abs(dy));\n                    const w = dx < 0 ? -side : side;\n                    const h = dy < 0 ? -side : side;\n                    ctx2.strokeRect(startPos.x, startPos.y, w, h);\n                    break;\n                case \"line\":\n                    ctx2.moveTo(startPos.x, startPos.y); ctx2.lineTo(x, y); ctx2.stroke(); break;\n                case \"circle\":\n                    if (e.shiftKey) ctx2.arc(startPos.x, startPos.y, Math.min(Math.abs(dx), Math.abs(dy)), 0, 2 * Math.PI);\n                    else ctx2.ellipse(startPos.x, startPos.y, Math.abs(dx), Math.abs(dy), 0, 0, 2 * Math.PI);\n                    ctx2.stroke(); break;\n                case \"triangle\":\n                    ctx2.moveTo(startPos.x, startPos.y);\n                    ctx2.lineTo(startPos.x + dx, startPos.y);\n                    ctx2.lineTo(startPos.x + dx / 2, startPos.y + dy);\n                    ctx2.closePath(); ctx2.stroke(); break;\n                case \"polygon\":\n                    const sides2 = 5, r2 = Math.hypot(dx, dy), st2 = 2 * Math.PI / sides2;\n                    ctx2.beginPath();\n                    for (let i = 0; i < sides2; i++) {\n                        const a = i * st2 - Math.PI / 2;\n                        const px = startPos.x + r2 * Math.cos(a);\n                        const py = startPos.y + r2 * Math.sin(a);\n                        i === 0 ? ctx2.moveTo(px, py) : ctx2.lineTo(px, py);\n                    }\n                    ctx2.closePath(); ctx2.stroke(); break;\n                default: break;\n            }\n        };\n\n        const up = e => {\n            if (activeTool === \"cursor\" && dragRef.current.isDragging) {\n                dragRef.current.isDragging = false; dragRef.current.shapeIndex = null; return;\n            }\n            if ([\"poly-line\", \"curve\"].includes(activeTool)) return;\n            if (!isDrawing) return;\n            const pos = getPos(e);\n            if (pos.x === startPos.x && pos.y === startPos.y) { ctx2.clearRect(0, 0, c2.width, c2.height); setIsDrawing(false); return; }\n            const isCircle = activeTool === \"circle\" && e.shiftKey;\n            const isSquare = activeTool === \"square\" && e.shiftKey;\n            shapesRef.current.push({\n                tool: activeTool, x0: startPos.x, y0: startPos.y, x1: pos.x, y1: pos.y,\n                lineColor, fillColor, strokeWidth, isCircle, isSquare, selected: false\n            });\n            shapesRef.current.forEach(s => s.selected = false);\n            shapesRef.current[shapesRef.current.length - 1].selected = true;\n            redrawAll(); ctx2.clearRect(0, 0, c2.width, c2.height); setIsDrawing(false);\n        };\n\n        const finishPoly = e => {\n            if (activeTool != \"poly-line\" || polyRef.current.length < 2) return;\n            shapesRef.current.push({ tool: \"poly-line\", points: polyRef.current.slice(), lineColor, fillColor, strokeWidth, selected: false });\n            shapesRef.current.forEach(s => s.selected = false);\n            shapesRef.current[shapesRef.current.length - 1].selected = true;\n            redrawAll(); ctx2.clearRect(0, 0, c2.width, c2.height); polyRef.current = [];\n        };\n\n        const finishCurve = e => {\n            if (activeTool != \"curve\" || curveRef.current.length < 2) return;\n            shapesRef.current.push({ tool: \"curve\", points: curveRef.current.slice(), lineColor, fillColor, strokeWidth, selected: false });\n            shapesRef.current.forEach(s => s.selected = false);\n            shapesRef.current[shapesRef.current.length - 1].selected = true;\n            redrawAll(); ctx2.clearRect(0, 0, c2.width, c2.height); curveRef.current = []; setIsDrawing(false);\n        };\n\n        const onKeyDown = e => {\n            if (e.ctrlKey && e.key === \"z\" && shapesRef.current.length) { redoRef.current.push(shapesRef.current.pop()); redrawAll(); }\n            else if (e.ctrlKey && e.shiftKey && e.key.toLowerCase() === \"z\" && redoRef.current.length) { shapesRef.current.push(redoRef.current.pop()); redrawAll(); }\n        };\n\n        c2.addEventListener(\"mousedown\", down);\n        c2.addEventListener(\"mousemove\", move);\n        c2.addEventListener(\"mouseup\", up);\n        c2.addEventListener(\"dblclick\", finishPoly);\n        c2.addEventListener(\"dblclick\", finishCurve);\n        window.addEventListener(\"keydown\", onKeyDown);\n        return () => {\n            c2.removeEventListener(\"mousedown\", down);\n            c2.removeEventListener(\"mousemove\", move);\n            c2.removeEventListener(\"mouseup\", up);\n            c2.removeEventListener(\"dblclick\", finishPoly);\n            c2.removeEventListener(\"dblclick\", finishCurve);\n            window.removeEventListener(\"keydown\", onKeyDown);\n        };\n    }, [activeTool, isDrawing, startPos, lineColor, fillColor, strokeWidth]);\n\n    return (\n        <div ref={containerRef} className=\"canvas-container\">\n            <canvas ref={c1Ref} />\n            <canvas ref={c2Ref} style={{ backgroundColor: \"transparent\" }} />\n        </div>\n    );\n});\n\nexport default Canvas;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}