{"ast":null,"code":"var _jsxFileName = \"/home/nightsquid/Desktop/GUI II/studyspace/src/components/Canvas.js\",\n  _s = $RefreshSig$();\n// src/components/Canvas.js\nimport React, { useRef, useEffect, useState } from \"react\";\nimport \"../css/canvas.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Canvas = ({\n  activeTool\n}) => {\n  _s();\n  const canvas1Ref = useRef(null);\n  const canvas2Ref = useRef(null);\n\n  // 1. Store all shapes here (won’t trigger re-render)\n  const shapesRef = useRef([]);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [startPos, setStartPos] = useState({\n    x: 0,\n    y: 0\n  });\n\n  // Utility: clear + redraw all shapes from shapesRef.current\n  const redrawAll = () => {\n    const c1 = canvas1Ref.current;\n    const ctx = c1.getContext(\"2d\");\n    ctx.clearRect(0, 0, c1.width, c1.height);\n    shapesRef.current.forEach(shape => {\n      const {\n        tool,\n        x0,\n        y0,\n        x1,\n        y1,\n        selected\n      } = shape;\n      ctx.save();\n      ctx.strokeStyle = selected ? \"red\" : \"#000\";\n      ctx.beginPath();\n      switch (tool) {\n        case \"square\":\n          ctx.strokeRect(x0, y0, x1 - x0, y1 - y0);\n          break;\n        case \"line\":\n          ctx.moveTo(x0, y0);\n          ctx.lineTo(x1, y1);\n          ctx.stroke();\n          break;\n        case \"circle\":\n          const r = Math.hypot(x1 - x0, y1 - y0);\n          ctx.arc(x0, y0, r, 0, 2 * Math.PI);\n          ctx.stroke();\n          break;\n        case \"triangle\":\n          ctx.moveTo(x0, y0);\n          ctx.lineTo(x1, y0);\n          ctx.lineTo((x0 + x1) / 2, y1);\n          ctx.closePath();\n          ctx.stroke();\n          break;\n        case \"polygon\":\n          const sides = 5;\n          const radiusPoly = Math.hypot(x1 - x0, y1 - y0);\n          const step = 2 * Math.PI / sides;\n          for (let i = 0; i < sides; i++) {\n            const ang = i * step - Math.PI / 2;\n            const px = x0 + radiusPoly * Math.cos(ang);\n            const py = y0 + radiusPoly * Math.sin(ang);\n            i === 0 ? ctx.moveTo(px, py) : ctx.lineTo(px, py);\n          }\n          ctx.closePath();\n          ctx.stroke();\n          break;\n      }\n      ctx.restore();\n    });\n  };\n  useEffect(() => {\n    const c1 = canvas1Ref.current;\n    const c2 = canvas2Ref.current;\n    const ctx2 = c2.getContext(\"2d\");\n\n    // Helpers\n    const getCoords = e => {\n      const rect = c2.getBoundingClientRect();\n      return {\n        x: e.clientX - rect.left,\n        y: e.clientY - rect.top\n      };\n    };\n\n    // --- DRAWING HANDLERS ---\n    const onMouseDown = e => {\n      // Selection mode\n      if (activeTool === \"cursor\") {\n        const pos = getCoords(e);\n        // deselect all\n        shapesRef.current.forEach(s => s.selected = false);\n        // find topmost shape under click\n        for (let i = shapesRef.current.length - 1; i >= 0; i--) {\n          const s = shapesRef.current[i];\n          const minX = Math.min(s.x0, s.x1),\n            maxX = Math.max(s.x0, s.x1),\n            minY = Math.min(s.y0, s.y1),\n            maxY = Math.max(s.y0, s.y1);\n          if (pos.x >= minX && pos.x <= maxX && pos.y >= minY && pos.y <= maxY) {\n            s.selected = true;\n            break;\n          }\n        }\n        redrawAll();\n        return;\n      }\n\n      // Only start a new shape if it’s one of our draw tools\n      if (![\"square\", \"line\", \"circle\", \"triangle\", \"polygon\"].includes(activeTool)) return;\n      const pos = getCoords(e);\n      setStartPos(pos);\n      setIsDrawing(true);\n    };\n    const onMouseMove = e => {\n      if (!isDrawing) return;\n      const {\n        x,\n        y\n      } = getCoords(e);\n      const dx = x - startPos.x,\n        dy = y - startPos.y;\n\n      // preview layer\n      ctx2.clearRect(0, 0, c2.width, c2.height);\n      ctx2.strokeStyle = \"#000\";\n      ctx2.beginPath();\n      switch (activeTool) {\n        case \"square\":\n          ctx2.strokeRect(startPos.x, startPos.y, dx, dy);\n          break;\n        case \"line\":\n          ctx2.moveTo(startPos.x, startPos.y);\n          ctx2.lineTo(x, y);\n          ctx2.stroke();\n          break;\n        case \"circle\":\n          ctx2.arc(startPos.x, startPos.y, Math.hypot(dx, dy), 0, 2 * Math.PI);\n          ctx2.stroke();\n          break;\n        case \"triangle\":\n          ctx2.moveTo(startPos.x, startPos.y);\n          ctx2.lineTo(startPos.x + dx, startPos.y);\n          ctx2.lineTo(startPos.x + dx / 2, startPos.y + dy);\n          ctx2.closePath();\n          ctx2.stroke();\n          break;\n        case \"polygon\":\n          const sides = 5;\n          const radiusPoly = Math.hypot(dx, dy);\n          const step = 2 * Math.PI / sides;\n          for (let i = 0; i < sides; i++) {\n            const ang = i * step - Math.PI / 2;\n            const px = startPos.x + radiusPoly * Math.cos(ang);\n            const py = startPos.y + radiusPoly * Math.sin(ang);\n            i === 0 ? ctx2.moveTo(px, py) : ctx2.lineTo(px, py);\n          }\n          ctx2.closePath();\n          ctx2.stroke();\n          break;\n      }\n    };\n    const onMouseUp = e => {\n      if (!isDrawing) return;\n      const {\n        x,\n        y\n      } = getCoords(e);\n\n      // save shape data\n      shapesRef.current.push({\n        tool: activeTool,\n        x0: startPos.x,\n        y0: startPos.y,\n        x1: x,\n        y1: y,\n        selected: false\n      });\n\n      // redraw permanent layer\n      redrawAll();\n\n      // clear preview\n      ctx2.clearRect(0, 0, c2.width, c2.height);\n      setIsDrawing(false);\n    };\n\n    // --- KEYBOARD HANDLERS ---\n    const onKeyDown = e => {\n      // Undo: Ctrl+Z\n      if (e.ctrlKey && e.key === \"z\") {\n        shapesRef.current.pop();\n        redrawAll();\n      }\n      // Export JSON: Ctrl+E\n      if (e.ctrlKey && e.key === \"x\") {\n        console.log(JSON.stringify(shapesRef.current, null, 2));\n      }\n    };\n\n    // attach\n    c2.addEventListener(\"mousedown\", onMouseDown);\n    c2.addEventListener(\"mousemove\", onMouseMove);\n    c2.addEventListener(\"mouseup\", onMouseUp);\n    window.addEventListener(\"keydown\", onKeyDown);\n\n    // cleanup\n    return () => {\n      c2.removeEventListener(\"mousedown\", onMouseDown);\n      c2.removeEventListener(\"mousemove\", onMouseMove);\n      c2.removeEventListener(\"mouseup\", onMouseUp);\n      window.removeEventListener(\"keydown\", onKeyDown);\n    };\n  }, [activeTool, isDrawing, startPos]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"canvas-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvas1Ref,\n      width: 600,\n      height: 700\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvas2Ref,\n      width: 600,\n      height: 700,\n      style: {\n        backgroundColor: \"transparent\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 205,\n    columnNumber: 9\n  }, this);\n};\n_s(Canvas, \"IqEVOeV3Q48VjmI5oja7iemNhrI=\");\n_c = Canvas;\nexport default Canvas;\nvar _c;\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"names":["React","useRef","useEffect","useState","jsxDEV","_jsxDEV","Canvas","activeTool","_s","canvas1Ref","canvas2Ref","shapesRef","isDrawing","setIsDrawing","startPos","setStartPos","x","y","redrawAll","c1","current","ctx","getContext","clearRect","width","height","forEach","shape","tool","x0","y0","x1","y1","selected","save","strokeStyle","beginPath","strokeRect","moveTo","lineTo","stroke","r","Math","hypot","arc","PI","closePath","sides","radiusPoly","step","i","ang","px","cos","py","sin","restore","c2","ctx2","getCoords","e","rect","getBoundingClientRect","clientX","left","clientY","top","onMouseDown","pos","s","length","minX","min","maxX","max","minY","maxY","includes","onMouseMove","dx","dy","onMouseUp","push","onKeyDown","ctrlKey","key","pop","console","log","JSON","stringify","addEventListener","window","removeEventListener","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","style","backgroundColor","_c","$RefreshReg$"],"sources":["/home/nightsquid/Desktop/GUI II/studyspace/src/components/Canvas.js"],"sourcesContent":["// src/components/Canvas.js\nimport React, { useRef, useEffect, useState } from \"react\";\nimport \"../css/canvas.css\";\n\nconst Canvas = ({ activeTool }) => {\n    const canvas1Ref = useRef(null);\n    const canvas2Ref = useRef(null);\n\n    // 1. Store all shapes here (won’t trigger re-render)\n    const shapesRef = useRef([]);\n\n    const [isDrawing, setIsDrawing] = useState(false);\n    const [startPos, setStartPos] = useState({ x: 0, y: 0 });\n\n    // Utility: clear + redraw all shapes from shapesRef.current\n    const redrawAll = () => {\n        const c1 = canvas1Ref.current;\n        const ctx = c1.getContext(\"2d\");\n        ctx.clearRect(0, 0, c1.width, c1.height);\n\n        shapesRef.current.forEach(shape => {\n            const { tool, x0, y0, x1, y1, selected } = shape;\n            ctx.save();\n            ctx.strokeStyle = selected ? \"red\" : \"#000\";\n            ctx.beginPath();\n\n            switch (tool) {\n                case \"square\":\n                    ctx.strokeRect(x0, y0, x1 - x0, y1 - y0);\n                    break;\n                case \"line\":\n                    ctx.moveTo(x0, y0);\n                    ctx.lineTo(x1, y1);\n                    ctx.stroke();\n                    break;\n                case \"circle\":\n                    const r = Math.hypot(x1 - x0, y1 - y0);\n                    ctx.arc(x0, y0, r, 0, 2 * Math.PI);\n                    ctx.stroke();\n                    break;\n                case \"triangle\":\n                    ctx.moveTo(x0, y0);\n                    ctx.lineTo(x1, y0);\n                    ctx.lineTo((x0 + x1) / 2, y1);\n                    ctx.closePath();\n                    ctx.stroke();\n                    break;\n                case \"polygon\":\n                    const sides = 5;\n                    const radiusPoly = Math.hypot(x1 - x0, y1 - y0);\n                    const step = (2 * Math.PI) / sides;\n                    for (let i = 0; i < sides; i++) {\n                        const ang = i * step - Math.PI / 2;\n                        const px = x0 + radiusPoly * Math.cos(ang);\n                        const py = y0 + radiusPoly * Math.sin(ang);\n                        i === 0 ? ctx.moveTo(px, py) : ctx.lineTo(px, py);\n                    }\n                    ctx.closePath();\n                    ctx.stroke();\n                    break;\n            }\n            ctx.restore();\n        });\n    };\n\n    useEffect(() => {\n        const c1 = canvas1Ref.current;\n        const c2 = canvas2Ref.current;\n        const ctx2 = c2.getContext(\"2d\");\n\n        // Helpers\n        const getCoords = e => {\n            const rect = c2.getBoundingClientRect();\n            return { x: e.clientX - rect.left, y: e.clientY - rect.top };\n        };\n\n        // --- DRAWING HANDLERS ---\n        const onMouseDown = e => {\n            // Selection mode\n            if (activeTool === \"cursor\") {\n                const pos = getCoords(e);\n                // deselect all\n                shapesRef.current.forEach(s => (s.selected = false));\n                // find topmost shape under click\n                for (let i = shapesRef.current.length - 1; i >= 0; i--) {\n                    const s = shapesRef.current[i];\n                    const minX = Math.min(s.x0, s.x1),\n                        maxX = Math.max(s.x0, s.x1),\n                        minY = Math.min(s.y0, s.y1),\n                        maxY = Math.max(s.y0, s.y1);\n                    if (pos.x >= minX && pos.x <= maxX && pos.y >= minY && pos.y <= maxY) {\n                        s.selected = true;\n                        break;\n                    }\n                }\n                redrawAll();\n                return;\n            }\n\n            // Only start a new shape if it’s one of our draw tools\n            if (![\"square\", \"line\", \"circle\", \"triangle\", \"polygon\"].includes(activeTool))\n                return;\n\n            const pos = getCoords(e);\n            setStartPos(pos);\n            setIsDrawing(true);\n        };\n\n        const onMouseMove = e => {\n            if (!isDrawing) return;\n            const { x, y } = getCoords(e);\n            const dx = x - startPos.x,\n                dy = y - startPos.y;\n\n            // preview layer\n            ctx2.clearRect(0, 0, c2.width, c2.height);\n            ctx2.strokeStyle = \"#000\";\n            ctx2.beginPath();\n\n            switch (activeTool) {\n                case \"square\":\n                    ctx2.strokeRect(startPos.x, startPos.y, dx, dy);\n                    break;\n                case \"line\":\n                    ctx2.moveTo(startPos.x, startPos.y);\n                    ctx2.lineTo(x, y);\n                    ctx2.stroke();\n                    break;\n                case \"circle\":\n                    ctx2.arc(startPos.x, startPos.y, Math.hypot(dx, dy), 0, 2 * Math.PI);\n                    ctx2.stroke();\n                    break;\n                case \"triangle\":\n                    ctx2.moveTo(startPos.x, startPos.y);\n                    ctx2.lineTo(startPos.x + dx, startPos.y);\n                    ctx2.lineTo(startPos.x + dx / 2, startPos.y + dy);\n                    ctx2.closePath();\n                    ctx2.stroke();\n                    break;\n                case \"polygon\":\n                    const sides = 5;\n                    const radiusPoly = Math.hypot(dx, dy);\n                    const step = (2 * Math.PI) / sides;\n                    for (let i = 0; i < sides; i++) {\n                        const ang = i * step - Math.PI / 2;\n                        const px = startPos.x + radiusPoly * Math.cos(ang);\n                        const py = startPos.y + radiusPoly * Math.sin(ang);\n                        i === 0 ? ctx2.moveTo(px, py) : ctx2.lineTo(px, py);\n                    }\n                    ctx2.closePath();\n                    ctx2.stroke();\n                    break;\n            }\n        };\n\n        const onMouseUp = e => {\n            if (!isDrawing) return;\n            const { x, y } = getCoords(e);\n\n            // save shape data\n            shapesRef.current.push({\n                tool: activeTool,\n                x0: startPos.x, y0: startPos.y,\n                x1: x, y1: y,\n                selected: false\n            });\n\n            // redraw permanent layer\n            redrawAll();\n\n            // clear preview\n            ctx2.clearRect(0, 0, c2.width, c2.height);\n            setIsDrawing(false);\n        };\n\n        // --- KEYBOARD HANDLERS ---\n        const onKeyDown = e => {\n            // Undo: Ctrl+Z\n            if (e.ctrlKey && e.key === \"z\") {\n                shapesRef.current.pop();\n                redrawAll();\n            }\n            // Export JSON: Ctrl+E\n            if (e.ctrlKey && e.key === \"x\") {\n                console.log(JSON.stringify(shapesRef.current, null, 2));\n            }\n        };\n\n        // attach\n        c2.addEventListener(\"mousedown\", onMouseDown);\n        c2.addEventListener(\"mousemove\", onMouseMove);\n        c2.addEventListener(\"mouseup\", onMouseUp);\n        window.addEventListener(\"keydown\", onKeyDown);\n\n        // cleanup\n        return () => {\n            c2.removeEventListener(\"mousedown\", onMouseDown);\n            c2.removeEventListener(\"mousemove\", onMouseMove);\n            c2.removeEventListener(\"mouseup\", onMouseUp);\n            window.removeEventListener(\"keydown\", onKeyDown);\n        };\n    }, [activeTool, isDrawing, startPos]);\n\n    return (\n        <div className=\"canvas-container\">\n            <canvas ref={canvas1Ref} width={600} height={700} />\n            <canvas ref={canvas2Ref} width={600} height={700} style={{backgroundColor: \"transparent\"}} />\n        </div>\n    );\n};\n\nexport default Canvas;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}