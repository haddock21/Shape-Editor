{"ast":null,"code":"var _jsxFileName = \"/home/nightsquid/Desktop/GUI II/studyspace/src/components/Canvas.js\",\n  _s = $RefreshSig$();\nimport React, { forwardRef, useImperativeHandle, useRef, useEffect, useState } from \"react\";\nimport { jsPDF } from \"jspdf\";\nimport \"../css/canvas.css\";\n\n// --- Helper Functions ---\n// Compute bounding box for any shape\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction getBBox(shape) {\n  // 1) compute the unrotated bbox\n  let xMin, yMin, xMax, yMax;\n  if (shape.points) {\n    const xs = shape.points.map(p => p.x);\n    const ys = shape.points.map(p => p.y);\n    xMin = Math.min(...xs);\n    yMin = Math.min(...ys);\n    xMax = Math.max(...xs);\n    yMax = Math.max(...ys);\n  } else if (shape.tool === \"circle\") {\n    const cx = shape.x0,\n      cy = shape.y0;\n    if (shape.isCircle) {\n      const r = Math.hypot(shape.x1 - shape.x0, shape.y1 - shape.y0);\n      xMin = cx - r;\n      yMin = cy - r;\n      xMax = cx + r;\n      yMax = cy + r;\n    } else {\n      const rx = Math.abs(shape.x1 - shape.x0);\n      const ry = Math.abs(shape.y1 - shape.y0);\n      xMin = cx - rx;\n      yMin = cy - ry;\n      xMax = cx + rx;\n      yMax = cy + ry;\n    }\n  } else if (shape.tool === \"polygon\") {\n    const cx = shape.x0,\n      cy = shape.y0;\n    const radius = Math.hypot(shape.x1 - shape.x0, shape.y1 - shape.y0);\n    const sides = 5;\n    const xs = [],\n      ys = [];\n    for (let i = 0; i < sides; i++) {\n      const ang = i * (2 * Math.PI / sides) - Math.PI / 2;\n      xs.push(cx + radius * Math.cos(ang));\n      ys.push(cy + radius * Math.sin(ang));\n    }\n    xMin = Math.min(...xs);\n    yMin = Math.min(...ys);\n    xMax = Math.max(...xs);\n    yMax = Math.max(...ys);\n  } else if (shape.tool === \"square\" && shape.isSquare) {\n    const dx = shape.x1 - shape.x0,\n      dy = shape.y1 - shape.y0;\n    const side = Math.min(Math.abs(dx), Math.abs(dy));\n    const w = dx < 0 ? -side : side,\n      h = dy < 0 ? -side : side;\n    const xA = shape.x0,\n      yA = shape.y0,\n      xB = shape.x0 + w,\n      yB = shape.y0 + h;\n    xMin = Math.min(xA, xB);\n    yMin = Math.min(yA, yB);\n    xMax = Math.max(xA, xB);\n    yMax = Math.max(yA, yB);\n  } else {\n    xMin = Math.min(shape.x0, shape.x1);\n    yMin = Math.min(shape.y0, shape.y1);\n    xMax = Math.max(shape.x0, shape.x1);\n    yMax = Math.max(shape.y0, shape.y1);\n  }\n\n  // 2) if the shape has been rotated, rotate its four corners and recompute the AABB\n  if (shape.rotation) {\n    const cx = (xMin + xMax) / 2;\n    const cy = (yMin + yMax) / 2;\n    const cos = Math.cos(shape.rotation);\n    const sin = Math.sin(shape.rotation);\n    const corners = [{\n      x: xMin,\n      y: yMin\n    }, {\n      x: xMax,\n      y: yMin\n    }, {\n      x: xMax,\n      y: yMax\n    }, {\n      x: xMin,\n      y: yMax\n    }];\n    const rotated = corners.map(({\n      x,\n      y\n    }) => {\n      const dx = x - cx,\n        dy = y - cy;\n      return {\n        x: cx + dx * cos - dy * sin,\n        y: cy + dx * sin + dy * cos\n      };\n    });\n    xMin = Math.min(...rotated.map(p => p.x));\n    yMin = Math.min(...rotated.map(p => p.y));\n    xMax = Math.max(...rotated.map(p => p.x));\n    yMax = Math.max(...rotated.map(p => p.y));\n  }\n  return {\n    xMin,\n    yMin,\n    xMax,\n    yMax\n  };\n}\n\n// Hit-test a point against any shape (strokes for lines, box for others)\nfunction hitTest(ctx, shape, x, y, defaultStroke) {\n  const path = new Path2D();\n  ctx.lineWidth = (shape.strokeWidth || defaultStroke) + 8;\n  switch (shape.tool) {\n    case \"line\":\n      path.moveTo(shape.x0, shape.y0);\n      path.lineTo(shape.x1, shape.y1);\n      return ctx.isPointInStroke(path, x, y);\n    case \"poly-line\":\n    case \"curve\":\n      if (shape.points && shape.points.length > 1) {\n        path.moveTo(shape.points[0].x, shape.points[0].y);\n        for (let p of shape.points.slice(1)) path.lineTo(p.x, p.y);\n        return ctx.isPointInStroke(path, x, y);\n      }\n      return false;\n    default:\n      const {\n        xMin,\n        yMin,\n        xMax,\n        yMax\n      } = getBBox(shape);\n      return x >= xMin && x <= xMax && y >= yMin && y <= yMax;\n  }\n}\n\n// Draw a shape onto the canvas context\nfunction drawShape(ctx, shape, offsetX = 0, offsetY = 0) {\n  const x0 = shape.x0 + offsetX;\n  const y0 = shape.y0 + offsetY;\n  const x1 = shape.x1 + offsetX;\n  const y1 = shape.y1 + offsetY;\n  const {\n    xMin,\n    yMin,\n    xMax,\n    yMax\n  } = getBBox(shape);\n  const cx = (xMin + xMax) / 2 + offsetX;\n  const cy = (yMin + yMax) / 2 + offsetY;\n  ctx.save();\n  ctx.translate(cx, cy);\n  ctx.rotate(shape.rotation || 0);\n  ctx.translate(-cx, -cy);\n  switch (shape.tool) {\n    case \"square\":\n      {\n        const dx = shape.x1 - shape.x0;\n        const dy = shape.y1 - shape.y0;\n        let w, h;\n        if (shape.isSquare) {\n          const side = Math.min(Math.abs(dx), Math.abs(dy));\n          w = dx < 0 ? -side : side;\n          h = dy < 0 ? -side : side;\n        } else {\n          w = dx;\n          h = dy;\n        }\n        ctx.fillRect(shape.x0 + offsetX, shape.y0 + offsetY, w, h);\n        ctx.strokeRect(shape.x0 + offsetX, shape.y0 + offsetY, w, h);\n        return;\n      }\n    case \"line\":\n      ctx.beginPath();\n      ctx.moveTo(x0, y0);\n      ctx.lineTo(x1, y1);\n      ctx.stroke();\n      return;\n    case \"circle\":\n      ctx.beginPath();\n      if (shape.isCircle) {\n        const r = Math.hypot(shape.x1 - shape.x0, shape.y1 - shape.y0);\n        ctx.arc(x0, y0, r, 0, 2 * Math.PI);\n      } else {\n        ctx.ellipse(x0, y0, Math.abs(shape.x1 - shape.x0), Math.abs(shape.y1 - shape.y0), 0, 0, 2 * Math.PI);\n      }\n      ctx.fill();\n      ctx.stroke();\n      return;\n    case \"triangle\":\n      ctx.beginPath();\n      ctx.moveTo(x0, y0);\n      ctx.lineTo(x1, y0);\n      ctx.lineTo((x0 + x1) / 2, y1);\n      ctx.closePath();\n      ctx.fill();\n      ctx.stroke();\n      return;\n    case \"polygon\":\n      ctx.beginPath();\n      const sides = 5;\n      const radius = Math.hypot(shape.x1 - shape.x0, shape.y1 - shape.y0);\n      for (let i = 0; i < sides; i++) {\n        const ang = i * (2 * Math.PI / sides) - Math.PI / 2;\n        const px = shape.x0 + offsetX + radius * Math.cos(ang);\n        const py = shape.y0 + offsetY + radius * Math.sin(ang);\n        if (i === 0) ctx.moveTo(px, py);else ctx.lineTo(px, py);\n      }\n      ctx.closePath();\n      ctx.fill();\n      ctx.stroke();\n      return;\n    case \"poly-line\":\n      if (shape.points && shape.points.length) {\n        ctx.beginPath();\n        ctx.moveTo(shape.points[0].x + offsetX, shape.points[0].y + offsetY);\n        for (let p of shape.points.slice(1)) ctx.lineTo(p.x + offsetX, p.y + offsetY);\n        ctx.stroke();\n      }\n      return;\n    case \"curve\":\n      if (shape.points && shape.points.length) {\n        ctx.beginPath();\n        const pts = shape.points;\n        ctx.moveTo(pts[0].x + offsetX, pts[0].y + offsetY);\n        for (let i = 1; i < pts.length; i++) {\n          const prev = pts[i - 1];\n          const curr = pts[i];\n          const mx = (prev.x + curr.x) / 2 + offsetX;\n          const my = (prev.y + curr.y) / 2 + offsetY;\n          ctx.quadraticCurveTo(prev.x + offsetX, prev.y + offsetY, mx, my);\n        }\n        const last = pts[pts.length - 1];\n        ctx.lineTo(last.x + offsetX, last.y + offsetY);\n        ctx.stroke();\n      }\n      return;\n    default:\n      return;\n  }\n}\n\n// Draw selection handles\nfunction drawSelection(ctx, shape, offsetX = 0, offsetY = 0) {\n  const R = 5;\n  if (shape.tool === \"line\") {\n    const p0 = {\n      x: shape.x0 + offsetX,\n      y: shape.y0 + offsetY\n    };\n    const p1 = {\n      x: shape.x1 + offsetX,\n      y: shape.y1 + offsetY\n    };\n    ctx.beginPath();\n    ctx.moveTo(p0.x, p0.y);\n    ctx.lineTo(p1.x, p1.y);\n    ctx.stroke();\n    [p0, p1].forEach(pt => {\n      ctx.beginPath();\n      ctx.arc(pt.x, pt.y, R, 0, 2 * Math.PI);\n      ctx.fill();\n      ctx.stroke();\n    });\n    return;\n  }\n  const {\n    xMin,\n    yMin,\n    xMax,\n    yMax\n  } = getBBox(shape);\n  const midX = (xMin + xMax) / 2;\n  const rotY = yMin - 20;\n  ctx.beginPath();\n  ctx.moveTo(midX, yMin);\n  ctx.lineTo(midX, rotY);\n  ctx.stroke();\n\n  // circle grip\n  ctx.beginPath();\n  ctx.arc(midX, rotY, R, 0, 2 * Math.PI);\n  ctx.fill();\n  ctx.stroke();\n  ctx.strokeRect(xMin, yMin, xMax - xMin, yMax - yMin);\n  ctx.fillStyle = \"white\";\n  [{\n    x: xMin,\n    y: yMin\n  }, {\n    x: xMax,\n    y: yMin\n  }, {\n    x: xMax,\n    y: yMax\n  }, {\n    x: xMin,\n    y: yMax\n  }].forEach(pt => {\n    ctx.beginPath();\n    ctx.arc(pt.x, pt.y, R, 0, 2 * Math.PI);\n    ctx.fill();\n    ctx.stroke();\n  });\n}\nconst Canvas = /*#__PURE__*/_s(/*#__PURE__*/forwardRef(_c = _s(({\n  activeTool,\n  lineColor,\n  fillColor,\n  strokeWidth\n}, ref) => {\n  _s();\n  const containerRef = useRef(null);\n  const c1Ref = useRef(null);\n  const c2Ref = useRef(null);\n  const shapesRef = useRef([]);\n  const undoStack = useRef([]);\n  const redoStack = useRef([]);\n  const polyRef = useRef([]);\n  const curveRef = useRef([]);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [startPos, setStartPos] = useState({\n    x: 0,\n    y: 0\n  });\n  const dragRef = useRef({\n    isDragging: false,\n    isResizing: false,\n    prevPos: {\n      x: 0,\n      y: 0\n    },\n    shapeIndex: null,\n    handleIndex: null,\n    origShape: null,\n    origRotation: 0,\n    center: null,\n    startAngle: 0\n  });\n  useImperativeHandle(ref, () => ({\n    exportShapes: () => {\n      shapesRef.current.forEach(s => s.selected = false);\n      const data = JSON.stringify(shapesRef.current, null, 2);\n      const blob = new Blob([data], {\n        type: \"application/json\"\n      });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement(\"a\");\n      a.href = url;\n      a.download = \"shapes.json\";\n      a.click();\n      URL.revokeObjectURL(url);\n    },\n    downloadJPEG: () => {\n      shapesRef.current.forEach(s => s.selected = false);\n      const shapes = shapesRef.current;\n      const pad = 20;\n      let minX = Infinity,\n        minY = Infinity;\n      let maxX = -Infinity,\n        maxY = -Infinity;\n      shapes.forEach(s => {\n        if (s.tool === \"circle\" || s.tool === \"polygon\") {\n          const r = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n          minX = Math.min(minX, s.x0 - r);\n          maxX = Math.max(maxX, s.x0 + r);\n          minY = Math.min(minY, s.y0 - r);\n          maxY = Math.max(maxY, s.y0 + r);\n        } else {\n          minX = Math.min(minX, s.x0, s.x1);\n          maxX = Math.max(maxX, s.x0, s.x1);\n          minY = Math.min(minY, s.y0, s.y1);\n          maxY = Math.max(maxY, s.y0, s.y1);\n        }\n      });\n      if (minX === Infinity) {\n        minX = 0;\n        minY = 0;\n        maxX = c1Ref.current.width;\n        maxY = c1Ref.current.height;\n      }\n      minX -= pad;\n      minY -= pad;\n      maxX += pad;\n      maxY += pad;\n      const sw = maxX - minX;\n      const sh = maxY - minY;\n      const tmp = document.createElement(\"canvas\");\n      tmp.width = sw;\n      tmp.height = sh;\n      redrawAll({\n        current: tmp\n      }, -minX, -minY, \"#ffffff\");\n      const dataURL = tmp.toDataURL(\"image/jpeg\", 1.0);\n      const link = document.createElement(\"a\");\n      link.href = dataURL;\n      link.download = \"shapes.jpg\";\n      link.click();\n    },\n    downloadPDF: () => {\n      shapesRef.current.forEach(s => s.selected = false);\n      const shapes = shapesRef.current;\n      const pad = 20;\n      let minX = Infinity,\n        minY = Infinity;\n      let maxX = -Infinity,\n        maxY = -Infinity;\n      shapes.forEach(s => {\n        if (s.tool === \"circle\" || s.tool === \"polygon\") {\n          const r = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n          minX = Math.min(minX, s.x0 - r);\n          maxX = Math.max(maxX, s.x0 + r);\n          minY = Math.min(minY, s.y0 - r);\n          maxY = Math.max(maxY, s.y0 + r);\n        } else {\n          minX = Math.min(minX, s.x0, s.x1);\n          maxX = Math.max(maxX, s.x0, s.x1);\n          minY = Math.min(minY, s.y0, s.y1);\n          maxY = Math.max(maxY, s.y0, s.y1);\n        }\n      });\n      if (minX === Infinity) {\n        minX = 0;\n        minY = 0;\n        maxX = c1Ref.current.width;\n        maxY = c1Ref.current.height;\n      }\n      minX -= pad;\n      minY -= pad;\n      maxX += pad;\n      maxY += pad;\n      const sw = maxX - minX;\n      const sh = maxY - minY;\n      const tmp = document.createElement(\"canvas\");\n      tmp.width = sw;\n      tmp.height = sh;\n      redrawAll({\n        current: tmp\n      }, -minX, -minY, \"#ffffff\");\n      const orientation = sw > sh ? \"landscape\" : \"portrait\";\n      const pdf = new jsPDF({\n        orientation,\n        unit: \"px\",\n        format: \"a4\"\n      });\n      const pageW = pdf.internal.pageSize.getWidth();\n      const pageH = pdf.internal.pageSize.getHeight();\n      const scale = Math.min(pageW / sw, pageH / sh);\n      let yOffset = 0;\n      while (yOffset < sh) {\n        const sliceH = Math.min(sh - yOffset, pageH / scale);\n        const slice = document.createElement(\"canvas\");\n        slice.width = sw;\n        slice.height = sliceH;\n        slice.getContext(\"2d\").drawImage(tmp, 0, yOffset, sw, sliceH, 0, 0, sw, sliceH);\n        const imgData = slice.toDataURL(\"image/jpeg\", 1.0);\n        const imgW = sw * scale,\n          imgH = sliceH * scale;\n        const xPos = (pageW - imgW) / 2;\n        pdf.addImage(imgData, \"JPEG\", xPos, 0, imgW, imgH);\n        yOffset += sliceH;\n        if (yOffset < sh) pdf.addPage();\n      }\n      pdf.save(\"shapes.pdf\");\n    },\n    loadShapes: arr => {\n      shapesRef.current = arr.map(s => ({\n        ...s,\n        selected: false\n      }));\n      redrawAll();\n    },\n    getShapeCount: () => shapesRef.current.length,\n    clearShapes: () => {\n      shapesRef.current = [];\n      redrawAll();\n    }\n  }));\n  useEffect(() => {\n    const resize = () => {\n      const {\n        width,\n        height\n      } = containerRef.current.getBoundingClientRect();\n      [c1Ref, c2Ref].forEach(r => {\n        r.current.width = width;\n        r.current.height = height;\n      });\n      redrawAll();\n    };\n    resize();\n    window.addEventListener(\"resize\", resize);\n    return () => window.removeEventListener(\"resize\", resize);\n  }, []);\n  useEffect(() => {\n    let dirty = false;\n    shapesRef.current.forEach(s => {\n      if (s.selected && (s.strokeWidth !== strokeWidth || s.lineColor !== lineColor || s.fillColor !== fillColor)) {\n        s.strokeWidth = strokeWidth;\n        s.lineColor = lineColor;\n        s.fillColor = fillColor;\n        dirty = true;\n      }\n    });\n    if (dirty) redrawAll();\n  }, [strokeWidth, lineColor, fillColor]);\n  function redrawAll(context = c1Ref, offsetX = 0, offsetY = 0, backgroundColor = \"#979797\") {\n    const c = context.current;\n    const ctx = c.getContext(\"2d\");\n    ctx.clearRect(0, 0, c.width, c.height);\n    ctx.fillStyle = backgroundColor;\n    ctx.fillRect(0, 0, c.width, c.height);\n    shapesRef.current.forEach(s => {\n      ctx.save();\n      ctx.strokeStyle = s.lineColor || lineColor;\n      ctx.fillStyle = s.fillColor || fillColor;\n      ctx.lineWidth = s.strokeWidth || strokeWidth;\n      drawShape(ctx, s, offsetX, offsetY);\n      if (s.selected) {\n        ctx.save();\n        ctx.strokeStyle = \"#ff7300\";\n        ctx.lineWidth = 2;\n        drawSelection(ctx, s, offsetX, offsetY);\n        ctx.restore();\n      }\n      ctx.restore();\n    });\n  }\n  useEffect(() => {\n    const c2 = c2Ref.current;\n    const ctx2 = c2.getContext(\"2d\");\n    const getPos = e => {\n      const r = c2.getBoundingClientRect();\n      return {\n        x: e.clientX - r.left,\n        y: e.clientY - r.top\n      };\n    };\n    const down = e => {\n      const pos = getPos(e);\n      if (activeTool === \"cursor\") {\n        const ctx1 = c1Ref.current.getContext(\"2d\");\n        // clear previous selection\n        shapesRef.current.forEach(sh => sh.selected = false);\n\n        // walk shapes in reverse z-order\n        for (let i = shapesRef.current.length - 1; i >= 0; i--) {\n          const s = shapesRef.current[i];\n          const {\n            xMin,\n            yMin,\n            xMax,\n            yMax\n          } = getBBox(s);\n          const midX = (xMin + xMax) / 2;\n          const rotY = yMin - 20;\n          if (Math.hypot(pos.x - midX, pos.y - rotY) < 6) {\n            console.log(\"🔄 starting rotate for shape\", i);\n            s.selected = true;\n\n            // remember rotation state\n            dragRef.current = {\n              isRotating: true,\n              shapeIndex: i,\n              origRotation: s.rotation || 0,\n              // use the bounding‐box center, not (x0+x1)/2\n              center: {\n                x: midX,\n                y: (yMin + yMax) / 2\n              },\n              startAngle: Math.atan2(pos.y - (yMin + yMax) / 2, pos.x - midX)\n            };\n            redrawAll();\n            return; // bail out so you don’t also start a move or resize\n          }\n          if (!hitTest(ctx1, s, pos.x, pos.y, strokeWidth)) continue;\n\n          // 1) check for a corner-drag first\n          const corners = [{\n            x: xMin,\n            y: yMin\n          }, {\n            x: xMax,\n            y: yMin\n          }, {\n            x: xMax,\n            y: yMax\n          }, {\n            x: xMin,\n            y: yMax\n          }];\n          for (let h = 0; h < corners.length; h++) {\n            const dx = pos.x - corners[h].x;\n            const dy = pos.y - corners[h].y;\n            if (Math.hypot(dx, dy) < 6) {\n              // inside handle radius\n              s.selected = true;\n              dragRef.current = {\n                isResizing: true,\n                shapeIndex: i,\n                handleIndex: h,\n                origShape: JSON.parse(JSON.stringify(s))\n              };\n              redrawAll();\n              return; // don’t start a move-drag\n            }\n          }\n\n          // 2) if no corner, it’s a normal drag\n          s.selected = true;\n          dragRef.current = {\n            isDragging: true,\n            prevPos: pos,\n            shapeIndex: i\n          };\n          redrawAll();\n          return;\n        }\n\n        // clicked on empty space\n        redrawAll();\n        return;\n      }\n      if (activeTool === \"poly-line\") {\n        polyRef.current.push(pos);\n        setIsDrawing(true);\n        return;\n      }\n      if (activeTool === \"curve\") {\n        curveRef.current.push(pos);\n        setIsDrawing(true);\n        return;\n      }\n      if (![\"square\", \"line\", \"circle\", \"triangle\", \"polygon\"].includes(activeTool)) return;\n      setStartPos(pos);\n      setIsDrawing(true);\n    };\n    const move = e => {\n      const pos = getPos(e);\n      if (dragRef.current.isRotating) {\n        console.log(\"🖱️ rotating… angle delta =\", Math.atan2(pos.y - dragRef.current.center.y, pos.x - dragRef.current.center.x) - dragRef.current.startAngle);\n        const {\n          shapeIndex,\n          origRotation,\n          center,\n          startAngle\n        } = dragRef.current;\n        const target = shapesRef.current[shapeIndex];\n        const currPos = getPos(e);\n\n        // how far we’ve turned\n        const currentAngle = Math.atan2(currPos.y - center.y, currPos.x - center.x);\n        target.rotation = origRotation + (currentAngle - startAngle);\n        redrawAll();\n        return;\n      }\n      if (dragRef.current.isResizing) {\n        const {\n          shapeIndex,\n          handleIndex,\n          origShape\n        } = dragRef.current;\n        const target = shapesRef.current[shapeIndex];\n        const pos = getPos(e); // current mouse\n        const {\n          xMin,\n          yMin,\n          xMax,\n          yMax\n        } = getBBox(origShape);\n        const corners = [{\n          x: xMin,\n          y: yMin\n        }, {\n          x: xMax,\n          y: yMin\n        }, {\n          x: xMax,\n          y: yMax\n        }, {\n          x: xMin,\n          y: yMax\n        }];\n        const origHandle = corners[handleIndex];\n        const opposite = corners[(handleIndex + 2) % 4];\n        if (origShape.tool === \"line\") {\n          // for lines, just drag one endpoint\n          if (handleIndex === 0) {\n            target.x0 = pos.x;\n            target.y0 = pos.y;\n          } else {\n            target.x1 = pos.x;\n            target.y1 = pos.y;\n          }\n        } else if (origShape.tool === \"circle\" || origShape.tool === \"polygon\") {\n          // if you want perfect circle lock, compute r = hypot(...)\n          // but even for ellipses, you can just set the handle\n          target.x1 = pos.x;\n          target.y1 = pos.y;\n          redrawAll();\n          return;\n        } else {\n          // for everything else, scale about the opposite corner\n          const sx = (pos.x - opposite.x) / (origHandle.x - opposite.x);\n          const sy = (pos.y - opposite.y) / (origHandle.y - opposite.y);\n          if (origShape.points) {\n            // poly‐line & curve: scale each point\n            target.points = origShape.points.map(p => ({\n              x: opposite.x + (p.x - opposite.x) * sx,\n              y: opposite.y + (p.y - opposite.y) * sy\n            }));\n          } else {\n            // x0/y0 and x1/y1 shapes (rect, circle, square, triangle, polygon)\n            [\"x0\", \"y0\", \"x1\", \"y1\"].forEach(k => {\n              const coord = k.startsWith(\"x\") ? \"x\" : \"y\";\n              const o = origShape[k];\n              const off = opposite[coord];\n              target[k] = off + (o - off) * (coord === \"x\" ? sx : sy);\n            });\n          }\n        }\n        redrawAll();\n        return;\n      }\n      if (activeTool === \"cursor\" && dragRef.current.isDragging) {\n        const dx = pos.x - dragRef.current.prevPos.x;\n        const dy = pos.y - dragRef.current.prevPos.y;\n        const s = shapesRef.current[dragRef.current.shapeIndex];\n        if (s.points) s.points.forEach(p => {\n          p.x += dx;\n          p.y += dy;\n        });else {\n          s.x0 += dx;\n          s.y0 += dy;\n          s.x1 += dx;\n          s.y1 += dy;\n        }\n        dragRef.current.prevPos = pos;\n        redrawAll();\n        return;\n      }\n      if (activeTool === \"poly-line\" && polyRef.current.length) {\n        ctx2.clearRect(0, 0, c2.width, c2.height);\n        ctx2.strokeStyle = lineColor;\n        ctx2.lineWidth = strokeWidth;\n        ctx2.beginPath();\n        ctx2.moveTo(polyRef.current[0].x, polyRef.current[0].y);\n        for (let p of polyRef.current.slice(1)) ctx2.lineTo(p.x, p.y);\n        ctx2.lineTo(pos.x, pos.y);\n        ctx2.stroke();\n        return;\n      }\n      if (activeTool === \"curve\" && curveRef.current.length) {\n        ctx2.clearRect(0, 0, c2.width, c2.height);\n        const pts = [...curveRef.current, pos];\n        const shape = {\n          tool: \"curve\",\n          points: pts,\n          strokeWidth,\n          lineColor\n        };\n        ctx2.lineWidth = shape.strokeWidth;\n        ctx2.strokeStyle = shape.lineColor;\n        drawShape(ctx2, shape, 0, 0);\n        return;\n      }\n      if (!isDrawing) return;\n      ctx2.clearRect(0, 0, c2.width, c2.height);\n      const {\n        x,\n        y\n      } = pos;\n      const shape = {\n        tool: activeTool,\n        x0: startPos.x,\n        y0: startPos.y,\n        x1: x,\n        y1: y,\n        isSquare: e.shiftKey && activeTool === \"square\",\n        isCircle: e.shiftKey && activeTool === \"circle\",\n        strokeWidth: 1,\n        lineColor: \"black\",\n        fillColor: \"transparent\"\n      };\n      ctx2.fillStyle = shape.fillColor;\n      ctx2.strokeStyle = shape.lineColor;\n      ctx2.lineWidth = shape.strokeWidth;\n      drawShape(ctx2, shape, 0, 0);\n    };\n    const up = e => {\n      if (dragRef.current.isRotating) {\n        dragRef.current.isRotating = false;\n        return;\n      }\n      if (dragRef.current.isResizing) {\n        dragRef.current.isResizing = false;\n        dragRef.current.handleIndex = null;\n        dragRef.current.origShape = null;\n        return;\n      }\n      if (activeTool === \"cursor\" && dragRef.current.isDragging) {\n        dragRef.current.isDragging = false;\n        dragRef.current.shapeIndex = null;\n        return;\n      }\n      if ([\"poly-line\", \"curve\"].includes(activeTool)) return;\n      if (!isDrawing) return;\n      const pos = getPos(e);\n      if (pos.x === startPos.x && pos.y === startPos.y) {\n        ctx2.clearRect(0, 0, c2.width, c2.height);\n        setIsDrawing(false);\n        return;\n      }\n      const isCircle = activeTool === \"circle\" && e.shiftKey;\n      const isSquare = activeTool === \"square\" && e.shiftKey;\n      const newShape = {\n        tool: activeTool,\n        x0: startPos.x,\n        y0: startPos.y,\n        x1: pos.x,\n        y1: pos.y,\n        lineColor,\n        fillColor,\n        strokeWidth,\n        isCircle,\n        isSquare,\n        rotation: 0,\n        selected: false\n      };\n      shapesRef.current.push(newShape);\n      undoStack.current.push({\n        type: 'add',\n        shapes: [newShape]\n      });\n      // clear redoStack because it's a brand-new action\n      redoStack.current = [];\n      shapesRef.current.forEach(s => s.selected = false);\n      shapesRef.current[shapesRef.current.length - 1].selected = true;\n      redrawAll();\n      ctx2.clearRect(0, 0, c2.width, c2.height);\n      setIsDrawing(false);\n    };\n    const finishPoly = e => {\n      if (activeTool !== \"poly-line\" || polyRef.current.length < 2) return;\n      const newShape = {\n        tool: \"poly-line\",\n        points: polyRef.current.slice(),\n        lineColor,\n        fillColor,\n        strokeWidth,\n        selected: false\n      };\n      shapesRef.current.push(newShape);\n      undoStack.current.push({\n        type: 'add',\n        shapes: [newShape]\n      });\n      // clear redoStack because it's a brand-new action\n      redoStack.current = [];\n      shapesRef.current.forEach(s => s.selected = false);\n      shapesRef.current[shapesRef.current.length - 1].selected = true;\n      redrawAll();\n      ctx2.clearRect(0, 0, c2.width, c2.height);\n      polyRef.current = [];\n    };\n    const finishCurve = e => {\n      if (activeTool !== \"curve\" || curveRef.current.length < 2) return;\n\n      // 1. capture the final click\n      const pos = getPos(e);\n      curveRef.current.push(pos);\n\n      // 2. push the full point list\n      const newShape = {\n        tool: \"curve\",\n        points: curveRef.current.slice(),\n        lineColor,\n        fillColor,\n        strokeWidth,\n        selected: false\n      };\n      shapesRef.current.push(newShape);\n      undoStack.current.push({\n        type: 'add',\n        shapes: [newShape]\n      });\n      // clear redoStack because it's a brand-new action\n      redoStack.current = [];\n\n      // 3. rest stays the same\n      shapesRef.current.forEach(s => s.selected = false);\n      shapesRef.current[shapesRef.current.length - 1].selected = true;\n      redrawAll();\n      ctx2.clearRect(0, 0, c2.width, c2.height);\n\n      // 4. reset\n      curveRef.current = [];\n      setIsDrawing(false);\n    };\n    const onKeyDown = e => {\n      if (e.ctrlKey && !e.shiftKey && e.key.toLowerCase() === 'z') {\n        const action = undoStack.current.pop();\n        if (!action) return;\n        if (action.type === 'add') {\n          // remove the shape(s) that were added\n          shapesRef.current = shapesRef.current.filter(s => !action.shapes.includes(s));\n        } else if (action.type === 'delete') {\n          // re‐insert deleted shapes at their original positions\n          action.shapes.forEach((shape, i) => {\n            const idx = action.indices[i];\n            shapesRef.current.splice(idx, 0, shape);\n          });\n        }\n        redoStack.current.push(action);\n        redrawAll();\n      }\n\n      // REDO\n      else if (e.ctrlKey && e.shiftKey && e.key.toLowerCase() === 'z') {\n        const action = redoStack.current.pop();\n        if (!action) return;\n        if (action.type === 'add') {\n          // re‐add those shapes\n          shapesRef.current.push(...action.shapes);\n        } else if (action.type === 'delete') {\n          // re‐delete them\n          shapesRef.current = shapesRef.current.filter(s => !action.shapes.includes(s));\n        }\n        undoStack.current.push(action);\n        redrawAll();\n      } else if (e.key === \"Delete\") {\n        const deleted = shapesRef.current.filter(s => s.selected);\n        if (deleted.length) {\n          // remember their original indices if you care about insert order:\n          const indices = deleted.map(s => shapesRef.current.indexOf(s));\n          shapesRef.current = shapesRef.current.filter(s => !s.selected);\n          undoStack.current.push({\n            type: 'delete',\n            shapes: deleted,\n            indices\n          });\n          redoStack.current = [];\n          redrawAll();\n        }\n      }\n    };\n    c2.addEventListener(\"mousedown\", down);\n    c2.addEventListener(\"mousemove\", move);\n    c2.addEventListener(\"mouseup\", up);\n    c2.addEventListener(\"dblclick\", finishPoly);\n    c2.addEventListener(\"dblclick\", finishCurve);\n    window.addEventListener(\"keydown\", onKeyDown);\n    return () => {\n      c2.removeEventListener(\"mousedown\", down);\n      c2.removeEventListener(\"mousemove\", move);\n      c2.removeEventListener(\"mouseup\", up);\n      c2.removeEventListener(\"dblclick\", finishPoly);\n      c2.removeEventListener(\"dblclick\", finishCurve);\n      window.removeEventListener(\"keydown\", onKeyDown);\n    };\n  }, [activeTool, isDrawing, startPos, lineColor, fillColor, strokeWidth]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    className: \"canvas-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: c1Ref\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 824,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: c2Ref,\n      style: {\n        backgroundColor: \"transparent\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 825,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 823,\n    columnNumber: 9\n  }, this);\n}, \"W77xF4pKDd63cdK3WunP+ttp6AU=\")), \"W77xF4pKDd63cdK3WunP+ttp6AU=\");\n_c2 = Canvas;\nexport default Canvas;\nvar _c, _c2;\n$RefreshReg$(_c, \"Canvas$forwardRef\");\n$RefreshReg$(_c2, \"Canvas\");","map":{"version":3,"names":["React","forwardRef","useImperativeHandle","useRef","useEffect","useState","jsPDF","jsxDEV","_jsxDEV","getBBox","shape","xMin","yMin","xMax","yMax","points","xs","map","p","x","ys","y","Math","min","max","tool","cx","x0","cy","y0","isCircle","r","hypot","x1","y1","rx","abs","ry","radius","sides","i","ang","PI","push","cos","sin","isSquare","dx","dy","side","w","h","xA","yA","xB","yB","rotation","corners","rotated","hitTest","ctx","defaultStroke","path","Path2D","lineWidth","strokeWidth","moveTo","lineTo","isPointInStroke","length","slice","drawShape","offsetX","offsetY","save","translate","rotate","fillRect","strokeRect","beginPath","stroke","arc","ellipse","fill","closePath","px","py","pts","prev","curr","mx","my","quadraticCurveTo","last","drawSelection","R","p0","p1","forEach","pt","midX","rotY","fillStyle","Canvas","_s","_c","activeTool","lineColor","fillColor","ref","containerRef","c1Ref","c2Ref","shapesRef","undoStack","redoStack","polyRef","curveRef","isDrawing","setIsDrawing","startPos","setStartPos","dragRef","isDragging","isResizing","prevPos","shapeIndex","handleIndex","origShape","origRotation","center","startAngle","exportShapes","current","s","selected","data","JSON","stringify","blob","Blob","type","url","URL","createObjectURL","a","document","createElement","href","download","click","revokeObjectURL","downloadJPEG","shapes","pad","minX","Infinity","minY","maxX","maxY","width","height","sw","sh","tmp","redrawAll","dataURL","toDataURL","link","downloadPDF","orientation","pdf","unit","format","pageW","internal","pageSize","getWidth","pageH","getHeight","scale","yOffset","sliceH","getContext","drawImage","imgData","imgW","imgH","xPos","addImage","addPage","loadShapes","arr","getShapeCount","clearShapes","resize","getBoundingClientRect","window","addEventListener","removeEventListener","dirty","context","backgroundColor","c","clearRect","strokeStyle","restore","c2","ctx2","getPos","e","clientX","left","clientY","top","down","pos","ctx1","console","log","isRotating","atan2","parse","includes","move","target","currPos","currentAngle","origHandle","opposite","sx","sy","k","coord","startsWith","o","off","shiftKey","up","newShape","finishPoly","finishCurve","onKeyDown","ctrlKey","key","toLowerCase","action","pop","filter","idx","indices","splice","deleted","indexOf","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","_c2","$RefreshReg$"],"sources":["/home/nightsquid/Desktop/GUI II/studyspace/src/components/Canvas.js"],"sourcesContent":["import React, { forwardRef, useImperativeHandle, useRef, useEffect, useState } from \"react\";\nimport { jsPDF } from \"jspdf\";\nimport \"../css/canvas.css\";\n\n// --- Helper Functions ---\n// Compute bounding box for any shape\nfunction getBBox(shape) {\n    // 1) compute the unrotated bbox\n    let xMin, yMin, xMax, yMax;\n\n    if (shape.points) {\n        const xs = shape.points.map(p => p.x);\n        const ys = shape.points.map(p => p.y);\n        xMin = Math.min(...xs);\n        yMin = Math.min(...ys);\n        xMax = Math.max(...xs);\n        yMax = Math.max(...ys);\n\n    } else if (shape.tool === \"circle\") {\n        const cx = shape.x0, cy = shape.y0;\n        if (shape.isCircle) {\n            const r = Math.hypot(shape.x1 - shape.x0, shape.y1 - shape.y0);\n            xMin = cx - r; yMin = cy - r;\n            xMax = cx + r; yMax = cy + r;\n        } else {\n            const rx = Math.abs(shape.x1 - shape.x0);\n            const ry = Math.abs(shape.y1 - shape.y0);\n            xMin = cx - rx; yMin = cy - ry;\n            xMax = cx + rx; yMax = cy + ry;\n        }\n\n    } else if (shape.tool === \"polygon\") {\n        const cx = shape.x0, cy = shape.y0;\n        const radius = Math.hypot(shape.x1 - shape.x0, shape.y1 - shape.y0);\n        const sides = 5;\n        const xs = [], ys = [];\n        for (let i = 0; i < sides; i++) {\n            const ang = i * (2 * Math.PI / sides) - Math.PI / 2;\n            xs.push(cx + radius * Math.cos(ang));\n            ys.push(cy + radius * Math.sin(ang));\n        }\n        xMin = Math.min(...xs);\n        yMin = Math.min(...ys);\n        xMax = Math.max(...xs);\n        yMax = Math.max(...ys);\n\n    } else if (shape.tool === \"square\" && shape.isSquare) {\n        const dx = shape.x1 - shape.x0, dy = shape.y1 - shape.y0;\n        const side = Math.min(Math.abs(dx), Math.abs(dy));\n        const w = dx < 0 ? -side : side, h = dy < 0 ? -side : side;\n        const xA = shape.x0, yA = shape.y0, xB = shape.x0 + w, yB = shape.y0 + h;\n        xMin = Math.min(xA, xB);\n        yMin = Math.min(yA, yB);\n        xMax = Math.max(xA, xB);\n        yMax = Math.max(yA, yB);\n\n    } else {\n        xMin = Math.min(shape.x0, shape.x1);\n        yMin = Math.min(shape.y0, shape.y1);\n        xMax = Math.max(shape.x0, shape.x1);\n        yMax = Math.max(shape.y0, shape.y1);\n    }\n\n    // 2) if the shape has been rotated, rotate its four corners and recompute the AABB\n    if (shape.rotation) {\n        const cx = (xMin + xMax) / 2;\n        const cy = (yMin + yMax) / 2;\n        const cos = Math.cos(shape.rotation);\n        const sin = Math.sin(shape.rotation);\n\n        const corners = [\n            { x: xMin, y: yMin },\n            { x: xMax, y: yMin },\n            { x: xMax, y: yMax },\n            { x: xMin, y: yMax }\n        ];\n\n        const rotated = corners.map(({ x, y }) => {\n            const dx = x - cx, dy = y - cy;\n            return {\n                x: cx + dx * cos - dy * sin,\n                y: cy + dx * sin + dy * cos\n            };\n        });\n\n        xMin = Math.min(...rotated.map(p => p.x));\n        yMin = Math.min(...rotated.map(p => p.y));\n        xMax = Math.max(...rotated.map(p => p.x));\n        yMax = Math.max(...rotated.map(p => p.y));\n    }\n\n    return { xMin, yMin, xMax, yMax };\n}\n\n\n\n// Hit-test a point against any shape (strokes for lines, box for others)\nfunction hitTest(ctx, shape, x, y, defaultStroke) {\n    const path = new Path2D();\n    ctx.lineWidth = (shape.strokeWidth || defaultStroke) + 8;\n    switch (shape.tool) {\n        case \"line\":\n            path.moveTo(shape.x0, shape.y0);\n            path.lineTo(shape.x1, shape.y1);\n            return ctx.isPointInStroke(path, x, y);\n        case \"poly-line\":\n        case \"curve\":\n            if (shape.points && shape.points.length > 1) {\n                path.moveTo(shape.points[0].x, shape.points[0].y);\n                for (let p of shape.points.slice(1)) path.lineTo(p.x, p.y);\n                return ctx.isPointInStroke(path, x, y);\n            }\n            return false;\n        default:\n            const { xMin, yMin, xMax, yMax } = getBBox(shape);\n            return x >= xMin && x <= xMax && y >= yMin && y <= yMax;\n    }\n}\n\n// Draw a shape onto the canvas context\nfunction drawShape(ctx, shape, offsetX = 0, offsetY = 0) {\n    const x0 = shape.x0 + offsetX;\n    const y0 = shape.y0 + offsetY;\n    const x1 = shape.x1 + offsetX;\n    const y1 = shape.y1 + offsetY;\n\n    const { xMin, yMin, xMax, yMax } = getBBox(shape);\n    const cx = (xMin + xMax) / 2 + offsetX;\n    const cy = (yMin + yMax) / 2 + offsetY;\n\n    ctx.save();\n    ctx.translate(cx, cy);\n    ctx.rotate(shape.rotation || 0);\n    ctx.translate(-cx, -cy);\n\n    switch (shape.tool) {\n        case \"square\": {\n            const dx = shape.x1 - shape.x0;\n            const dy = shape.y1 - shape.y0;\n            let w, h;\n            if (shape.isSquare) {\n                const side = Math.min(Math.abs(dx), Math.abs(dy));\n                w = dx < 0 ? -side : side;\n                h = dy < 0 ? -side : side;\n            } else {\n                w = dx;\n                h = dy;\n            }\n            ctx.fillRect(shape.x0 + offsetX, shape.y0 + offsetY, w, h);\n            ctx.strokeRect(shape.x0 + offsetX, shape.y0 + offsetY, w, h);\n            return;\n        }\n        case \"line\":\n            ctx.beginPath();\n            ctx.moveTo(x0, y0);\n            ctx.lineTo(x1, y1);\n            ctx.stroke();\n            return;\n        case \"circle\":\n            ctx.beginPath();\n            if (shape.isCircle) {\n                const r = Math.hypot(shape.x1 - shape.x0, shape.y1 - shape.y0);\n                ctx.arc(x0, y0, r, 0, 2 * Math.PI);\n            } else {\n                ctx.ellipse(x0, y0, Math.abs(shape.x1 - shape.x0), Math.abs(shape.y1 - shape.y0), 0, 0, 2 * Math.PI);\n            }\n            ctx.fill();\n            ctx.stroke();\n            return;\n        case \"triangle\":\n            ctx.beginPath();\n            ctx.moveTo(x0, y0);\n            ctx.lineTo(x1, y0);\n            ctx.lineTo((x0 + x1) / 2, y1);\n            ctx.closePath();\n            ctx.fill();\n            ctx.stroke();\n            return;\n        case \"polygon\":\n            ctx.beginPath();\n            const sides = 5;\n            const radius = Math.hypot(shape.x1 - shape.x0, shape.y1 - shape.y0);\n            for (let i = 0; i < sides; i++) {\n                const ang = i * (2 * Math.PI / sides) - Math.PI / 2;\n                const px = shape.x0 + offsetX + radius * Math.cos(ang);\n                const py = shape.y0 + offsetY + radius * Math.sin(ang);\n                if (i === 0) ctx.moveTo(px, py);\n                else ctx.lineTo(px, py);\n            }\n            ctx.closePath();\n            ctx.fill();\n            ctx.stroke();\n            return;\n        case \"poly-line\":\n            if (shape.points && shape.points.length) {\n                ctx.beginPath();\n                ctx.moveTo(shape.points[0].x + offsetX, shape.points[0].y + offsetY);\n                for (let p of shape.points.slice(1)) ctx.lineTo(p.x + offsetX, p.y + offsetY);\n                ctx.stroke();\n            }\n            return;\n        case \"curve\":\n            if (shape.points && shape.points.length) {\n                ctx.beginPath();\n                const pts = shape.points;\n                ctx.moveTo(pts[0].x + offsetX, pts[0].y + offsetY);\n                for (let i = 1; i < pts.length; i++) {\n                    const prev = pts[i - 1];\n                    const curr = pts[i];\n                    const mx = (prev.x + curr.x) / 2 + offsetX;\n                    const my = (prev.y + curr.y) / 2 + offsetY;\n                    ctx.quadraticCurveTo(prev.x + offsetX, prev.y + offsetY, mx, my);\n                }\n\n                const last = pts[pts.length - 1];\n                ctx.lineTo(last.x + offsetX, last.y + offsetY);\n\n                ctx.stroke();\n            }\n            return;\n        default:\n            return;\n    }\n}\n\n// Draw selection handles\nfunction drawSelection(ctx, shape, offsetX = 0, offsetY = 0) {\n    const R = 5;\n    if (shape.tool === \"line\") {\n        const p0 = { x: shape.x0 + offsetX, y: shape.y0 + offsetY };\n        const p1 = { x: shape.x1 + offsetX, y: shape.y1 + offsetY };\n        ctx.beginPath(); ctx.moveTo(p0.x, p0.y); ctx.lineTo(p1.x, p1.y); ctx.stroke();\n        [p0, p1].forEach(pt => {\n            ctx.beginPath(); ctx.arc(pt.x, pt.y, R, 0, 2 * Math.PI); ctx.fill(); ctx.stroke();\n        });\n        return;\n    }\n    const { xMin, yMin, xMax, yMax } = getBBox(shape);\n    const midX = (xMin + xMax) / 2;\n    const rotY = yMin - 20;    \n    ctx.beginPath();\n    ctx.moveTo(midX, yMin);\n    ctx.lineTo(midX, rotY);\n    ctx.stroke();\n\n    // circle grip\n    ctx.beginPath();\n    ctx.arc(midX, rotY, R, 0, 2 * Math.PI);\n    ctx.fill();\n    ctx.stroke();\n    ctx.strokeRect(xMin, yMin, xMax - xMin, yMax - yMin);\n    ctx.fillStyle = \"white\";\n    [\n        { x: xMin, y: yMin },\n        { x: xMax, y: yMin },\n        { x: xMax, y: yMax },\n        { x: xMin, y: yMax }\n    ].forEach(pt => {\n        ctx.beginPath(); ctx.arc(pt.x, pt.y, R, 0, 2 * Math.PI); ctx.fill(); ctx.stroke();\n    });\n}\n\nconst Canvas = forwardRef(({ activeTool, lineColor, fillColor, strokeWidth }, ref) => {\n    const containerRef = useRef(null);\n    const c1Ref = useRef(null);\n    const c2Ref = useRef(null);\n    const shapesRef = useRef([]);\n    const undoStack = useRef([]);\n    const redoStack = useRef([]);\n    const polyRef = useRef([]);\n    const curveRef = useRef([]);\n    const [isDrawing, setIsDrawing] = useState(false);\n    const [startPos, setStartPos] = useState({ x: 0, y: 0 });\n    const dragRef = useRef({ \n        isDragging: false,\n        isResizing: false,\n        prevPos: { x: 0, y: 0 },\n        shapeIndex: null,\n        handleIndex: null,\n        origShape: null,\n        origRotation: 0,\n        center: null,\n        startAngle: 0\n     });\n\n    useImperativeHandle(ref, () => ({\n        exportShapes: () => {\n            shapesRef.current.forEach(s => (s.selected = false));\n            const data = JSON.stringify(shapesRef.current, null, 2);\n            const blob = new Blob([data], { type: \"application/json\" });\n            const url = URL.createObjectURL(blob);\n            const a = document.createElement(\"a\");\n            a.href = url; a.download = \"shapes.json\"; a.click();\n            URL.revokeObjectURL(url);\n        },\n        downloadJPEG: () => {\n            shapesRef.current.forEach(s => (s.selected = false));\n            const shapes = shapesRef.current;\n            const pad = 20;\n            let minX = Infinity, minY = Infinity;\n            let maxX = -Infinity, maxY = -Infinity;\n            shapes.forEach(s => {\n                if (s.tool === \"circle\" || s.tool === \"polygon\") {\n                    const r = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n                    minX = Math.min(minX, s.x0 - r);\n                    maxX = Math.max(maxX, s.x0 + r);\n                    minY = Math.min(minY, s.y0 - r);\n                    maxY = Math.max(maxY, s.y0 + r);\n                } else {\n                    minX = Math.min(minX, s.x0, s.x1);\n                    maxX = Math.max(maxX, s.x0, s.x1);\n                    minY = Math.min(minY, s.y0, s.y1);\n                    maxY = Math.max(maxY, s.y0, s.y1);\n                }\n            });\n            if (minX === Infinity) {\n                minX = 0; minY = 0;\n                maxX = c1Ref.current.width;\n                maxY = c1Ref.current.height;\n            }\n            minX -= pad; minY -= pad; maxX += pad; maxY += pad;\n            const sw = maxX - minX;\n            const sh = maxY - minY;\n            const tmp = document.createElement(\"canvas\");\n            tmp.width = sw; tmp.height = sh;\n            redrawAll({ current: tmp }, -minX, -minY, \"#ffffff\");\n            const dataURL = tmp.toDataURL(\"image/jpeg\", 1.0);\n            const link = document.createElement(\"a\");\n            link.href = dataURL;\n            link.download = \"shapes.jpg\";\n            link.click();\n        },\n        downloadPDF: () => {\n            shapesRef.current.forEach(s => (s.selected = false));\n            const shapes = shapesRef.current;\n            const pad = 20;\n            let minX = Infinity, minY = Infinity;\n            let maxX = -Infinity, maxY = -Infinity;\n            shapes.forEach(s => {\n                if (s.tool === \"circle\" || s.tool === \"polygon\") {\n                    const r = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n                    minX = Math.min(minX, s.x0 - r);\n                    maxX = Math.max(maxX, s.x0 + r);\n                    minY = Math.min(minY, s.y0 - r);\n                    maxY = Math.max(maxY, s.y0 + r);\n                } else {\n                    minX = Math.min(minX, s.x0, s.x1);\n                    maxX = Math.max(maxX, s.x0, s.x1);\n                    minY = Math.min(minY, s.y0, s.y1);\n                    maxY = Math.max(maxY, s.y0, s.y1);\n                }\n            });\n            if (minX === Infinity) {\n                minX = 0; minY = 0;\n                maxX = c1Ref.current.width;\n                maxY = c1Ref.current.height;\n            }\n            minX -= pad; minY -= pad; maxX += pad; maxY += pad;\n            const sw = maxX - minX;\n            const sh = maxY - minY;\n            const tmp = document.createElement(\"canvas\");\n            tmp.width = sw; tmp.height = sh;\n            redrawAll({ current: tmp }, -minX, -minY, \"#ffffff\");\n            const orientation = sw > sh ? \"landscape\" : \"portrait\";\n            const pdf = new jsPDF({ orientation, unit: \"px\", format: \"a4\" });\n            const pageW = pdf.internal.pageSize.getWidth();\n            const pageH = pdf.internal.pageSize.getHeight();\n            const scale = Math.min(pageW / sw, pageH / sh);\n            let yOffset = 0;\n            while (yOffset < sh) {\n                const sliceH = Math.min(sh - yOffset, pageH / scale);\n                const slice = document.createElement(\"canvas\");\n                slice.width = sw; slice.height = sliceH;\n                slice.getContext(\"2d\").drawImage(\n                    tmp,\n                    0, yOffset, sw, sliceH,\n                    0, 0, sw, sliceH\n                );\n                const imgData = slice.toDataURL(\"image/jpeg\", 1.0);\n                const imgW = sw * scale, imgH = sliceH * scale;\n                const xPos = (pageW - imgW) / 2;\n                pdf.addImage(imgData, \"JPEG\", xPos, 0, imgW, imgH);\n                yOffset += sliceH;\n                if (yOffset < sh) pdf.addPage();\n            }\n            pdf.save(\"shapes.pdf\");\n        },\n        loadShapes: (arr) => { shapesRef.current = arr.map(s => ({ ...s, selected: false })); redrawAll(); },\n        getShapeCount: () => shapesRef.current.length,\n        clearShapes: () => { shapesRef.current = []; redrawAll(); }\n    }));\n\n    useEffect(() => {\n        const resize = () => {\n            const { width, height } = containerRef.current.getBoundingClientRect();\n            [c1Ref, c2Ref].forEach(r => { r.current.width = width; r.current.height = height; });\n            redrawAll();\n        };\n        resize(); window.addEventListener(\"resize\", resize);\n        return () => window.removeEventListener(\"resize\", resize);\n    }, []);\n\n    useEffect(() => {\n        let dirty = false;\n        shapesRef.current.forEach(s => {\n            if (s.selected && (s.strokeWidth !== strokeWidth || s.lineColor !== lineColor || s.fillColor !== fillColor)) {\n                s.strokeWidth = strokeWidth;\n                s.lineColor = lineColor;\n                s.fillColor = fillColor;\n                dirty = true;\n            }\n        });\n        if (dirty) redrawAll();\n    }, [strokeWidth, lineColor, fillColor]);\n\n    function redrawAll(context = c1Ref, offsetX = 0, offsetY = 0, backgroundColor = \"#979797\") {\n        const c = context.current;\n        const ctx = c.getContext(\"2d\");\n        ctx.clearRect(0, 0, c.width, c.height);\n        ctx.fillStyle = backgroundColor;\n        ctx.fillRect(0, 0, c.width, c.height);\n        shapesRef.current.forEach(s => {\n            ctx.save();\n            ctx.strokeStyle = s.lineColor || lineColor;\n            ctx.fillStyle = s.fillColor || fillColor;\n            ctx.lineWidth = s.strokeWidth || strokeWidth;\n            drawShape(ctx, s, offsetX, offsetY);\n            if (s.selected) {\n                ctx.save(); ctx.strokeStyle = \"#ff7300\"; ctx.lineWidth = 2;\n                drawSelection(ctx, s, offsetX, offsetY);\n                ctx.restore();\n            }\n            ctx.restore();\n        });\n    }\n\n    useEffect(() => {\n        const c2 = c2Ref.current;\n        const ctx2 = c2.getContext(\"2d\");\n        const getPos = e => {\n            const r = c2.getBoundingClientRect();\n            return { x: e.clientX - r.left, y: e.clientY - r.top };\n        };\n\n        const down = e => {\n            const pos = getPos(e);\n            if (activeTool === \"cursor\") {\n                const ctx1 = c1Ref.current.getContext(\"2d\");\n                // clear previous selection\n                shapesRef.current.forEach(sh => sh.selected = false);\n\n                // walk shapes in reverse z-order\n                for (let i = shapesRef.current.length - 1; i >= 0; i--) {\n                    const s = shapesRef.current[i];\n\n                    const { xMin, yMin, xMax, yMax } = getBBox(s);\n                    const midX = (xMin + xMax) / 2;\n                    const rotY = yMin - 20;\n\n                    if (Math.hypot(pos.x - midX, pos.y - rotY) < 6) {\n                        console.log(\"🔄 starting rotate for shape\", i);\n                        s.selected = true;\n\n                        // remember rotation state\n                        dragRef.current = {\n                            isRotating: true,\n                            shapeIndex: i,\n                            origRotation: s.rotation || 0,\n                            // use the bounding‐box center, not (x0+x1)/2\n                            center: { x: midX, y: (yMin + yMax) / 2 },\n                            startAngle: Math.atan2(\n                                pos.y - ((yMin + yMax) / 2),\n                                pos.x - midX\n                            )\n                        };\n\n                        redrawAll();\n                        return;    // bail out so you don’t also start a move or resize\n                    }\n\n                    if (!hitTest(ctx1, s, pos.x, pos.y, strokeWidth)) continue;\n\n                    // 1) check for a corner-drag first\n                    const corners = [\n                        { x: xMin, y: yMin },\n                        { x: xMax, y: yMin },\n                        { x: xMax, y: yMax },\n                        { x: xMin, y: yMax }\n                    ];\n                    for (let h = 0; h < corners.length; h++) {\n                        const dx = pos.x - corners[h].x;\n                        const dy = pos.y - corners[h].y;\n                        if (Math.hypot(dx, dy) < 6) {        // inside handle radius\n                            s.selected = true;\n                            dragRef.current = {\n                                isResizing: true,\n                                shapeIndex: i,\n                                handleIndex: h,\n                                origShape: JSON.parse(JSON.stringify(s))\n                            };\n                            redrawAll();\n                            return;  // don’t start a move-drag\n                        }\n                    }\n\n                    // 2) if no corner, it’s a normal drag\n                    s.selected = true;\n                    dragRef.current = {\n                        isDragging: true,\n                        prevPos: pos,\n                        shapeIndex: i\n                    };\n                    redrawAll();\n                    return;\n                }\n\n                // clicked on empty space\n                redrawAll();\n                return;\n            }\n            if (activeTool === \"poly-line\") { polyRef.current.push(pos); setIsDrawing(true); return; }\n            if (activeTool === \"curve\") { curveRef.current.push(pos); setIsDrawing(true); return; }\n            if (![\"square\", \"line\", \"circle\", \"triangle\", \"polygon\"].includes(activeTool)) return;\n            setStartPos(pos);\n            setIsDrawing(true);\n        };\n\n        const move = e => {\n            const pos = getPos(e);\n            if (dragRef.current.isRotating) {\n                console.log(\"🖱️ rotating… angle delta =\", (Math.atan2(pos.y - dragRef.current.center.y,\n                    pos.x - dragRef.current.center.x)\n                    - dragRef.current.startAngle));\n                const { shapeIndex, origRotation, center, startAngle } = dragRef.current;\n                const target = shapesRef.current[shapeIndex];\n                const currPos = getPos(e);\n\n                // how far we’ve turned\n                const currentAngle = Math.atan2(currPos.y - center.y, currPos.x - center.x);\n                target.rotation = origRotation + (currentAngle - startAngle);\n\n                redrawAll();\n                return;\n            }\n            if (dragRef.current.isResizing) {\n                const { shapeIndex, handleIndex, origShape } = dragRef.current;\n                const target = shapesRef.current[shapeIndex];\n                const pos = getPos(e);             // current mouse\n                const { xMin, yMin, xMax, yMax } = getBBox(origShape);\n                const corners = [\n                    { x: xMin, y: yMin },\n                    { x: xMax, y: yMin },\n                    { x: xMax, y: yMax },\n                    { x: xMin, y: yMax }\n                ];\n                const origHandle = corners[handleIndex];\n                const opposite = corners[(handleIndex + 2) % 4];\n\n                if (origShape.tool === \"line\") {\n                    // for lines, just drag one endpoint\n                    if (handleIndex === 0) {\n                        target.x0 = pos.x; target.y0 = pos.y;\n                    } else {\n                        target.x1 = pos.x; target.y1 = pos.y;\n                    }\n                } else if (origShape.tool === \"circle\" || origShape.tool === \"polygon\") {\n                    // if you want perfect circle lock, compute r = hypot(...)\n                    // but even for ellipses, you can just set the handle\n                    target.x1 = pos.x;\n                    target.y1 = pos.y;\n                    redrawAll();\n                    return;\n                } else {\n                    // for everything else, scale about the opposite corner\n                    const sx = (pos.x - opposite.x) / (origHandle.x - opposite.x);\n                    const sy = (pos.y - opposite.y) / (origHandle.y - opposite.y);\n\n                    if (origShape.points) {\n                        // poly‐line & curve: scale each point\n                        target.points = origShape.points.map(p => ({\n                            x: opposite.x + (p.x - opposite.x) * sx,\n                            y: opposite.y + (p.y - opposite.y) * sy\n                        }));\n                    } else {\n                        // x0/y0 and x1/y1 shapes (rect, circle, square, triangle, polygon)\n                        [\"x0\", \"y0\", \"x1\", \"y1\"].forEach(k => {\n                            const coord = k.startsWith(\"x\") ? \"x\" : \"y\";\n                            const o = origShape[k];\n                            const off = opposite[coord];\n                            target[k] = off + (o - off) * (coord === \"x\" ? sx : sy);\n                        });\n                    }\n                }\n\n                redrawAll();\n                return;\n            }\n            if (activeTool === \"cursor\" && dragRef.current.isDragging) {\n                const dx = pos.x - dragRef.current.prevPos.x;\n                const dy = pos.y - dragRef.current.prevPos.y;\n                const s = shapesRef.current[dragRef.current.shapeIndex];\n                if (s.points) s.points.forEach(p => { p.x += dx; p.y += dy; });\n                else { s.x0 += dx; s.y0 += dy; s.x1 += dx; s.y1 += dy; }\n                dragRef.current.prevPos = pos;\n                redrawAll(); return;\n            }\n            if (activeTool === \"poly-line\" && polyRef.current.length) {\n                ctx2.clearRect(0, 0, c2.width, c2.height);\n                ctx2.strokeStyle = lineColor; ctx2.lineWidth = strokeWidth;\n                ctx2.beginPath(); ctx2.moveTo(polyRef.current[0].x, polyRef.current[0].y);\n                for (let p of polyRef.current.slice(1)) ctx2.lineTo(p.x, p.y);\n                ctx2.lineTo(pos.x, pos.y); ctx2.stroke(); return;\n            }\n            if (activeTool === \"curve\" && curveRef.current.length) {\n                ctx2.clearRect(0, 0, c2.width, c2.height);\n                const pts = [...curveRef.current, pos];\n                const shape = {\n                    tool: \"curve\",\n                    points: pts,\n                    strokeWidth,\n                    lineColor,\n                };\n                ctx2.lineWidth = shape.strokeWidth;\n                ctx2.strokeStyle = shape.lineColor;\n                drawShape(ctx2, shape, 0, 0);\n                return;\n            }\n            if (!isDrawing) return;\n            ctx2.clearRect(0, 0, c2.width, c2.height);\n            const { x, y } = pos;\n\n            const shape = {\n                tool: activeTool,\n                x0: startPos.x,\n                y0: startPos.y,\n                x1: x,\n                y1: y,\n                isSquare: e.shiftKey && activeTool === \"square\",\n                isCircle: e.shiftKey && activeTool === \"circle\",\n                strokeWidth: 1,\n                lineColor: \"black\",\n                fillColor: \"transparent\"\n            }\n            ctx2.fillStyle = shape.fillColor;\n            ctx2.strokeStyle = shape.lineColor;\n            ctx2.lineWidth = shape.strokeWidth;\n\n            drawShape(ctx2, shape, 0, 0);\n        };\n\n        const up = e => {\n            if (dragRef.current.isRotating) {\n                dragRef.current.isRotating = false;\n                return;\n            }\n            if (dragRef.current.isResizing) {\n                dragRef.current.isResizing = false;\n                dragRef.current.handleIndex = null;\n                dragRef.current.origShape = null;\n                return;\n            }\n            if (activeTool === \"cursor\" && dragRef.current.isDragging) {\n                dragRef.current.isDragging = false;\n                dragRef.current.shapeIndex = null;\n                return;\n            }\n            if ([\"poly-line\", \"curve\"].includes(activeTool)) return;\n            if (!isDrawing) return;\n            const pos = getPos(e);\n            if (pos.x === startPos.x && pos.y === startPos.y) {\n                ctx2.clearRect(0, 0, c2.width, c2.height);\n                setIsDrawing(false);\n                return;\n            }\n            const isCircle = activeTool === \"circle\" && e.shiftKey;\n            const isSquare = activeTool === \"square\" && e.shiftKey;\n\n            const newShape = {\n                tool: activeTool,\n                x0: startPos.x, y0: startPos.y,\n                x1: pos.x, y1: pos.y,\n                lineColor, fillColor, strokeWidth,\n                isCircle, isSquare,\n                rotation: 0,\n                selected: false\n            };\n\n            shapesRef.current.push(newShape);\n\n            undoStack.current.push({ type: 'add', shapes: [newShape] });\n            // clear redoStack because it's a brand-new action\n            redoStack.current = [];\n\n            shapesRef.current.forEach(s => (s.selected = false));\n            shapesRef.current[shapesRef.current.length - 1].selected = true;\n            redrawAll();\n            ctx2.clearRect(0, 0, c2.width, c2.height);\n            setIsDrawing(false);\n        };\n\n        const finishPoly = e => {\n            if (activeTool !== \"poly-line\" || polyRef.current.length < 2) return;\n            const newShape = { \n                tool: \"poly-line\", \n                points: polyRef.current.slice(), \n                lineColor, fillColor, strokeWidth, \n                selected: false \n            };\n            shapesRef.current.push(newShape);\n\n            undoStack.current.push({ type: 'add', shapes: [newShape] });\n            // clear redoStack because it's a brand-new action\n            redoStack.current = [];\n\n            shapesRef.current.forEach(s => (s.selected = false));\n            shapesRef.current[shapesRef.current.length - 1].selected = true;\n            redrawAll();\n            ctx2.clearRect(0, 0, c2.width, c2.height);\n            polyRef.current = [];\n        };\n\n        const finishCurve = e => {\n            if (activeTool !== \"curve\" || curveRef.current.length < 2) return;\n\n            // 1. capture the final click\n            const pos = getPos(e);\n            curveRef.current.push(pos);\n\n            // 2. push the full point list\n            const newShape = {\n                tool: \"curve\",\n                points: curveRef.current.slice(),\n                lineColor, fillColor, strokeWidth,\n                selected: false\n            };\n            shapesRef.current.push(newShape);\n\n            undoStack.current.push({ type: 'add', shapes: [newShape] });\n            // clear redoStack because it's a brand-new action\n            redoStack.current = [];\n\n            // 3. rest stays the same\n            shapesRef.current.forEach(s => (s.selected = false));\n            shapesRef.current[shapesRef.current.length - 1].selected = true;\n            redrawAll();\n            ctx2.clearRect(0, 0, c2.width, c2.height);\n\n            // 4. reset\n            curveRef.current = [];\n            setIsDrawing(false);\n        };\n\n        const onKeyDown = e => {\n            if (e.ctrlKey && !e.shiftKey && e.key.toLowerCase() === 'z') {\n                const action = undoStack.current.pop();\n                if (!action) return;\n\n                if (action.type === 'add') {\n                    // remove the shape(s) that were added\n                    shapesRef.current = shapesRef.current.filter(\n                        s => !action.shapes.includes(s)\n                    );\n                } else if (action.type === 'delete') {\n                    // re‐insert deleted shapes at their original positions\n                    action.shapes.forEach((shape, i) => {\n                        const idx = action.indices[i];\n                        shapesRef.current.splice(idx, 0, shape);\n                    });\n                }\n\n                redoStack.current.push(action);\n                redrawAll();\n            }\n\n            // REDO\n            else if (e.ctrlKey && e.shiftKey && e.key.toLowerCase() === 'z') {\n                const action = redoStack.current.pop();\n                if (!action) return;\n\n                if (action.type === 'add') {\n                    // re‐add those shapes\n                    shapesRef.current.push(...action.shapes);\n                } else if (action.type === 'delete') {\n                    // re‐delete them\n                    shapesRef.current = shapesRef.current.filter(\n                        s => !action.shapes.includes(s)\n                    );\n                }\n\n                undoStack.current.push(action);\n                redrawAll();\n            }\n            else if (e.key === \"Delete\"){\n                const deleted = shapesRef.current.filter(s => s.selected);\n                if (deleted.length) {\n                    // remember their original indices if you care about insert order:\n                    const indices = deleted.map(s => shapesRef.current.indexOf(s));\n                    shapesRef.current = shapesRef.current.filter(s => !s.selected);\n                    undoStack.current.push({ type: 'delete', shapes: deleted, indices });\n                    redoStack.current = [];\n                    redrawAll();\n                }\n            }\n        };\n\n        c2.addEventListener(\"mousedown\", down);\n        c2.addEventListener(\"mousemove\", move);\n        c2.addEventListener(\"mouseup\", up);\n        c2.addEventListener(\"dblclick\", finishPoly);\n        c2.addEventListener(\"dblclick\", finishCurve);\n        window.addEventListener(\"keydown\", onKeyDown);\n        return () => {\n            c2.removeEventListener(\"mousedown\", down);\n            c2.removeEventListener(\"mousemove\", move);\n            c2.removeEventListener(\"mouseup\", up);\n            c2.removeEventListener(\"dblclick\", finishPoly);\n            c2.removeEventListener(\"dblclick\", finishCurve);\n            window.removeEventListener(\"keydown\", onKeyDown);\n        };\n    }, [activeTool, isDrawing, startPos, lineColor, fillColor, strokeWidth]);\n\n    return (\n        <div ref={containerRef} className=\"canvas-container\">\n            <canvas ref={c1Ref} />\n            <canvas ref={c2Ref} style={{ backgroundColor: \"transparent\" }} />\n        </div>\n    );\n});\n\nexport default Canvas;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}