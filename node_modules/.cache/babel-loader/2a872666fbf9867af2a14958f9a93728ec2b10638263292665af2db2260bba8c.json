{"ast":null,"code":"var _jsxFileName = \"/home/nightsquid/Desktop/GUI II/Shape Editor/src/components/TopBar.js\",\n  _s = $RefreshSig$();\n// src/components/ToolBar.js\nimport React, { useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TopBar = () => {\n  _s();\n  // File‐load handler (unchanged)\n  const handleFileChange = e => {\n    const file = e.target.files[0];\n    if (!file) return;\n    const reader = new FileReader();\n    reader.onload = ev => {\n      try {\n        const shapes = JSON.parse(ev.target.result);\n        onLoad(shapes);\n      } catch {\n        console.error(\"Invalid JSON file\");\n      }\n    };\n    reader.readAsText(file);\n    e.target.value = null;\n  };\n\n  // On mount: create hidden color inputs\n  useEffect(() => {\n    // — Line picker —\n    const lineInput = document.createElement('input');\n    lineInput.type = 'color';\n    lineInput.value = lineColor;\n    lineInput.style.display = 'none';\n    lineInput.addEventListener('input', e => setLineColor(e.target.value));\n    document.body.appendChild(lineInput);\n\n    // — Fill picker —\n    const fillInput = document.createElement('input');\n    fillInput.type = 'color';\n    fillInput.value = fillColor;\n    fillInput.style.display = 'none';\n    fillInput.addEventListener('input', e => setFillColor(e.target.value));\n    document.body.appendChild(fillInput);\n    fillPickerRef.current = fillInput;\n    return () => {\n      lineInput.remove();\n      fillInput.remove();\n    };\n  }, [fillColor, lineColor, setFillColor, setLineColor]);\n\n  // Update the preview bars whenever colors change\n  useEffect(() => {\n    const previews = document.querySelectorAll('.draw-buttons .line-color-preview');\n    if (previews[0]) previews[0].style.backgroundColor = lineColor;\n  }, [lineColor]);\n  useEffect(() => {\n    const previews = document.querySelectorAll('.draw-buttons .line-color-preview');\n    if (previews[1]) previews[1].style.backgroundColor = fillColor;\n  }, [fillColor]);\n\n  // Handlers to open the native picker\n  const openFillPicker = () => fillPickerRef.current && fillPickerRef.current.click();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"topbar\",\n    children: /*#__PURE__*/_jsxDEV(\"a\", {\n      children: \"Help\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 8\n  }, this);\n};\n_s(TopBar, \"ewq31d5h+FnD/qJW52w5UqeNMN4=\");\n_c = TopBar;\nexport default TopBar;\nvar _c;\n$RefreshReg$(_c, \"TopBar\");","map":{"version":3,"names":["React","useRef","useEffect","jsxDEV","_jsxDEV","TopBar","_s","handleFileChange","e","file","target","files","reader","FileReader","onload","ev","shapes","JSON","parse","result","onLoad","console","error","readAsText","value","lineInput","document","createElement","type","lineColor","style","display","addEventListener","setLineColor","body","appendChild","fillInput","fillColor","setFillColor","fillPickerRef","current","remove","previews","querySelectorAll","backgroundColor","openFillPicker","click","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/nightsquid/Desktop/GUI II/Shape Editor/src/components/TopBar.js"],"sourcesContent":["// src/components/ToolBar.js\nimport React, { useRef, useEffect } from 'react';\n\nconst TopBar = () => {\n    \n    // File‐load handler (unchanged)\n    const handleFileChange = (e) => {\n        const file = e.target.files[0];\n        if (!file) return;\n        const reader = new FileReader();\n        reader.onload = (ev) => {\n            try {\n                const shapes = JSON.parse(ev.target.result);\n                onLoad(shapes);\n            } catch {\n                console.error(\"Invalid JSON file\");\n            }\n        };\n        reader.readAsText(file);\n        e.target.value = null;\n    };\n\n    // On mount: create hidden color inputs\n    useEffect(() => {\n        // — Line picker —\n        const lineInput = document.createElement('input');\n        lineInput.type = 'color';\n        lineInput.value = lineColor;\n        lineInput.style.display = 'none';\n        lineInput.addEventListener('input', (e) => setLineColor(e.target.value));\n        document.body.appendChild(lineInput);\n\n        // — Fill picker —\n        const fillInput = document.createElement('input');\n        fillInput.type = 'color';\n        fillInput.value = fillColor;\n        fillInput.style.display = 'none';\n        fillInput.addEventListener('input', (e) => setFillColor(e.target.value));\n        document.body.appendChild(fillInput);\n        fillPickerRef.current = fillInput;\n\n        return () => {\n            lineInput.remove();\n            fillInput.remove();\n        };\n    }, [fillColor, lineColor, setFillColor, setLineColor]);\n\n    // Update the preview bars whenever colors change\n    useEffect(() => {\n        const previews = document.querySelectorAll('.draw-buttons .line-color-preview');\n        if (previews[0]) previews[0].style.backgroundColor = lineColor;\n    }, [lineColor]);\n\n    useEffect(() => {\n        const previews = document.querySelectorAll('.draw-buttons .line-color-preview');\n        if (previews[1]) previews[1].style.backgroundColor = fillColor;\n    }, [fillColor]);\n\n    // Handlers to open the native picker\n    const openFillPicker = () => fillPickerRef.current && fillPickerRef.current.click();\n\n    return (\n       <div className='topbar'>\n        <a>Help</a>\n       </div>\n    );\n};\n\nexport default TopBar;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}