{"ast":null,"code":"import React,{forwardRef,useImperativeHandle,useRef,useEffect,useState}from\"react\";import{jsPDF}from\"jspdf\";import\"../css/canvas.css\";// --- Helper Functions ---\n// Compute bounding box for any shape\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function getBBox(shape){if(shape.points){const xs=shape.points.map(p=>p.x);const ys=shape.points.map(p=>p.y);return{xMin:Math.min(...xs),yMin:Math.min(...ys),xMax:Math.max(...xs),yMax:Math.max(...ys)};}if(shape.tool===\"circle\"){const cx=shape.x0,cy=shape.y0;if(shape.isCircle){const r=Math.hypot(shape.x1-shape.x0,shape.y1-shape.y0);return{xMin:cx-r,yMin:cy-r,xMax:cx+r,yMax:cy+r};}else{const rx=Math.abs(shape.x1-shape.x0);const ry=Math.abs(shape.y1-shape.y0);return{xMin:cx-rx,yMin:cy-ry,xMax:cx+rx,yMax:cy+ry};}}if(shape.tool===\"polygon\"){const cx=shape.x0;const cy=shape.y0;const radius=Math.hypot(shape.x1-shape.x0,shape.y1-shape.y0);const sides=5;// match your drawShape logic\nconst xs=[];const ys=[];for(let i=0;i<sides;i++){const ang=i*(2*Math.PI/sides)-Math.PI/2;xs.push(cx+radius*Math.cos(ang));ys.push(cy+radius*Math.sin(ang));}return{xMin:Math.min(...xs),yMin:Math.min(...ys),xMax:Math.max(...xs),yMax:Math.max(...ys)};}if(shape.tool===\"square\"&&shape.isSquare){const dx=shape.x1-shape.x0;const dy=shape.y1-shape.y0;const side=Math.min(Math.abs(dx),Math.abs(dy));const w=dx<0?-side:side;const h=dy<0?-side:side;const xA=shape.x0;const yA=shape.y0;const xB=shape.x0+w;const yB=shape.y0+h;return{xMin:Math.min(xA,xB),yMin:Math.min(yA,yB),xMax:Math.max(xA,xB),yMax:Math.max(yA,yB)};}return{xMin:Math.min(shape.x0,shape.x1),yMin:Math.min(shape.y0,shape.y1),xMax:Math.max(shape.x0,shape.x1),yMax:Math.max(shape.y0,shape.y1)};}// Hit-test a point against any shape (strokes for lines, box for others)\nfunction hitTest(ctx,shape,x,y,defaultStroke){const path=new Path2D();ctx.lineWidth=(shape.strokeWidth||defaultStroke)+8;switch(shape.tool){case\"line\":path.moveTo(shape.x0,shape.y0);path.lineTo(shape.x1,shape.y1);return ctx.isPointInStroke(path,x,y);case\"poly-line\":case\"curve\":if(shape.points&&shape.points.length>1){path.moveTo(shape.points[0].x,shape.points[0].y);for(let p of shape.points.slice(1))path.lineTo(p.x,p.y);return ctx.isPointInStroke(path,x,y);}return false;default:const{xMin,yMin,xMax,yMax}=getBBox(shape);return x>=xMin&&x<=xMax&&y>=yMin&&y<=yMax;}}// Draw a shape onto the canvas context\nfunction drawShape(ctx,shape){let offsetX=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;let offsetY=arguments.length>3&&arguments[3]!==undefined?arguments[3]:0;const x0=shape.x0+offsetX;const y0=shape.y0+offsetY;const x1=shape.x1+offsetX;const y1=shape.y1+offsetY;const{xMin,yMin,xMax,yMax}=getBBox(shape);const cx=(xMin+xMax)/2+offsetX;const cy=(yMin+yMax)/2+offsetY;ctx.save();ctx.translate(cx,cy);ctx.rotate(shape.rotation||0);ctx.translate(-cx,-cy);switch(shape.tool){case\"square\":{const dx=shape.x1-shape.x0;const dy=shape.y1-shape.y0;let w,h;if(shape.isSquare){const side=Math.min(Math.abs(dx),Math.abs(dy));w=dx<0?-side:side;h=dy<0?-side:side;}else{w=dx;h=dy;}ctx.fillRect(shape.x0+offsetX,shape.y0+offsetY,w,h);ctx.strokeRect(shape.x0+offsetX,shape.y0+offsetY,w,h);return;}case\"line\":ctx.beginPath();ctx.moveTo(x0,y0);ctx.lineTo(x1,y1);ctx.stroke();return;case\"circle\":ctx.beginPath();if(shape.isCircle){const r=Math.hypot(shape.x1-shape.x0,shape.y1-shape.y0);ctx.arc(x0,y0,r,0,2*Math.PI);}else{ctx.ellipse(x0,y0,Math.abs(shape.x1-shape.x0),Math.abs(shape.y1-shape.y0),0,0,2*Math.PI);}ctx.fill();ctx.stroke();return;case\"triangle\":ctx.beginPath();ctx.moveTo(x0,y0);ctx.lineTo(x1,y0);ctx.lineTo((x0+x1)/2,y1);ctx.closePath();ctx.fill();ctx.stroke();return;case\"polygon\":ctx.beginPath();const sides=5;const radius=Math.hypot(shape.x1-shape.x0,shape.y1-shape.y0);for(let i=0;i<sides;i++){const ang=i*(2*Math.PI/sides)-Math.PI/2;const px=shape.x0+offsetX+radius*Math.cos(ang);const py=shape.y0+offsetY+radius*Math.sin(ang);if(i===0)ctx.moveTo(px,py);else ctx.lineTo(px,py);}ctx.closePath();ctx.fill();ctx.stroke();return;case\"poly-line\":if(shape.points&&shape.points.length){ctx.beginPath();ctx.moveTo(shape.points[0].x+offsetX,shape.points[0].y+offsetY);for(let p of shape.points.slice(1))ctx.lineTo(p.x+offsetX,p.y+offsetY);ctx.stroke();}return;case\"curve\":if(shape.points&&shape.points.length){ctx.beginPath();const pts=shape.points;ctx.moveTo(pts[0].x+offsetX,pts[0].y+offsetY);for(let i=1;i<pts.length;i++){const prev=pts[i-1];const curr=pts[i];const mx=(prev.x+curr.x)/2+offsetX;const my=(prev.y+curr.y)/2+offsetY;ctx.quadraticCurveTo(prev.x+offsetX,prev.y+offsetY,mx,my);}const last=pts[pts.length-1];ctx.lineTo(last.x+offsetX,last.y+offsetY);ctx.stroke();}return;default:ctx.save();ctx.translate(cx,cy);ctx.rotate(shape.rotation||0);ctx.translate(-cx,-cy);}}// Draw selection handles\nfunction drawSelection(ctx,shape){let offsetX=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;let offsetY=arguments.length>3&&arguments[3]!==undefined?arguments[3]:0;const R=5;if(shape.tool===\"line\"){const p0={x:shape.x0+offsetX,y:shape.y0+offsetY};const p1={x:shape.x1+offsetX,y:shape.y1+offsetY};ctx.fillStyle=\"white\";ctx.fill();ctx.beginPath();ctx.moveTo(p0.x,p0.y);ctx.lineTo(p1.x,p1.y);ctx.stroke();[p0,p1].forEach(pt=>{ctx.beginPath();ctx.arc(pt.x,pt.y,R,0,2*Math.PI);ctx.fill();ctx.stroke();});return;}const{xMin,yMin,xMax,yMax}=getBBox(shape);const midX=(xMin+xMax)/2;const rotY=yMin-20;ctx.beginPath();ctx.moveTo(midX,yMin);ctx.lineTo(midX,rotY);ctx.stroke();// circle grip\nctx.beginPath();ctx.arc(midX,rotY,R,0,2*Math.PI);ctx.stroke();ctx.strokeRect(xMin,yMin,xMax-xMin,yMax-yMin);ctx.fillStyle=\"white\";ctx.fill();[{x:xMin,y:yMin},{x:xMax,y:yMin},{x:xMax,y:yMax},{x:xMin,y:yMax}].forEach(pt=>{ctx.beginPath();ctx.arc(pt.x,pt.y,R,0,2*Math.PI);ctx.fill();ctx.stroke();});}function rotatePoint(p,center,angle){const dx=p.x-center.x;const dy=p.y-center.y;return{x:center.x+dx*Math.cos(angle)-dy*Math.sin(angle),y:center.y+dx*Math.sin(angle)+dy*Math.cos(angle)};}const Canvas=/*#__PURE__*/forwardRef((_ref,ref)=>{let{activeTool,lineColor,fillColor,strokeWidth}=_ref;const containerRef=useRef(null);const c1Ref=useRef(null);const c2Ref=useRef(null);const shapesRef=useRef([]);const undoStack=useRef([]);const redoStack=useRef([]);const polyRef=useRef([]);const curveRef=useRef([]);const[isDrawing,setIsDrawing]=useState(false);const[startPos,setStartPos]=useState({x:0,y:0});const dragRef=useRef({isDragging:false,isResizing:false,prevPos:{x:0,y:0},shapeIndex:null,handleIndex:null,origShape:null,origRotation:0,center:null,startAngle:0});useImperativeHandle(ref,()=>({exportShapes:()=>{shapesRef.current.forEach(s=>s.selected=false);const data=JSON.stringify(shapesRef.current,null,2);const blob=new Blob([data],{type:\"application/json\"});const url=URL.createObjectURL(blob);const a=document.createElement(\"a\");a.href=url;a.download=\"shapes.json\";a.click();URL.revokeObjectURL(url);},downloadJPEG:()=>{shapesRef.current.forEach(s=>s.selected=false);const shapes=shapesRef.current;const pad=20;let minX=Infinity,minY=Infinity;let maxX=-Infinity,maxY=-Infinity;shapes.forEach(s=>{if(s.tool===\"circle\"||s.tool===\"polygon\"){const r=Math.hypot(s.x1-s.x0,s.y1-s.y0);minX=Math.min(minX,s.x0-r);maxX=Math.max(maxX,s.x0+r);minY=Math.min(minY,s.y0-r);maxY=Math.max(maxY,s.y0+r);}else{minX=Math.min(minX,s.x0,s.x1);maxX=Math.max(maxX,s.x0,s.x1);minY=Math.min(minY,s.y0,s.y1);maxY=Math.max(maxY,s.y0,s.y1);}});if(minX===Infinity){minX=0;minY=0;maxX=c1Ref.current.width;maxY=c1Ref.current.height;}minX-=pad;minY-=pad;maxX+=pad;maxY+=pad;const sw=maxX-minX;const sh=maxY-minY;const tmp=document.createElement(\"canvas\");tmp.width=sw;tmp.height=sh;redrawAll({current:tmp},-minX,-minY,\"#ffffff\");const dataURL=tmp.toDataURL(\"image/jpeg\",1.0);const link=document.createElement(\"a\");link.href=dataURL;link.download=\"shapes.jpg\";link.click();},downloadPDF:()=>{shapesRef.current.forEach(s=>s.selected=false);const shapes=shapesRef.current;const pad=20;let minX=Infinity,minY=Infinity;let maxX=-Infinity,maxY=-Infinity;shapes.forEach(s=>{if(s.tool===\"circle\"||s.tool===\"polygon\"){const r=Math.hypot(s.x1-s.x0,s.y1-s.y0);minX=Math.min(minX,s.x0-r);maxX=Math.max(maxX,s.x0+r);minY=Math.min(minY,s.y0-r);maxY=Math.max(maxY,s.y0+r);}else{minX=Math.min(minX,s.x0,s.x1);maxX=Math.max(maxX,s.x0,s.x1);minY=Math.min(minY,s.y0,s.y1);maxY=Math.max(maxY,s.y0,s.y1);}});if(minX===Infinity){minX=0;minY=0;maxX=c1Ref.current.width;maxY=c1Ref.current.height;}minX-=pad;minY-=pad;maxX+=pad;maxY+=pad;const sw=maxX-minX;const sh=maxY-minY;const tmp=document.createElement(\"canvas\");tmp.width=sw;tmp.height=sh;redrawAll({current:tmp},-minX,-minY,\"#ffffff\");const orientation=sw>sh?\"landscape\":\"portrait\";const pdf=new jsPDF({orientation,unit:\"px\",format:\"a4\"});const pageW=pdf.internal.pageSize.getWidth();const pageH=pdf.internal.pageSize.getHeight();const scale=Math.min(pageW/sw,pageH/sh);let yOffset=0;while(yOffset<sh){const sliceH=Math.min(sh-yOffset,pageH/scale);const slice=document.createElement(\"canvas\");slice.width=sw;slice.height=sliceH;slice.getContext(\"2d\").drawImage(tmp,0,yOffset,sw,sliceH,0,0,sw,sliceH);const imgData=slice.toDataURL(\"image/jpeg\",1.0);const imgW=sw*scale,imgH=sliceH*scale;const xPos=(pageW-imgW)/2;pdf.addImage(imgData,\"JPEG\",xPos,0,imgW,imgH);yOffset+=sliceH;if(yOffset<sh)pdf.addPage();}pdf.save(\"shapes.pdf\");},loadShapes:arr=>{shapesRef.current=arr.map(s=>({...s,selected:false}));redrawAll();},getShapeCount:()=>shapesRef.current.length,clearShapes:()=>{shapesRef.current=[];redrawAll();}}));useEffect(()=>{const resize=()=>{const{width,height}=containerRef.current.getBoundingClientRect();[c1Ref,c2Ref].forEach(r=>{r.current.width=width;r.current.height=height;});redrawAll();};resize();window.addEventListener(\"resize\",resize);return()=>window.removeEventListener(\"resize\",resize);},[]);useEffect(()=>{let dirty=false;shapesRef.current.forEach(s=>{if(s.selected&&(s.strokeWidth!==strokeWidth||s.lineColor!==lineColor||s.fillColor!==fillColor)){s.strokeWidth=strokeWidth;s.lineColor=lineColor;s.fillColor=fillColor;dirty=true;}});if(dirty)redrawAll();},[strokeWidth,lineColor,fillColor]);function redrawAll(){let context=arguments.length>0&&arguments[0]!==undefined?arguments[0]:c1Ref;let offsetX=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;let offsetY=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;let backgroundColor=arguments.length>3&&arguments[3]!==undefined?arguments[3]:\"#979797\";const c=context.current;const ctx=c.getContext(\"2d\");ctx.clearRect(0,0,c.width,c.height);ctx.fillStyle=backgroundColor;ctx.fillRect(0,0,c.width,c.height);shapesRef.current.forEach(s=>{ctx.save();ctx.strokeStyle=s.lineColor||lineColor;ctx.fillStyle=s.fillColor||fillColor;ctx.lineWidth=s.strokeWidth||strokeWidth;drawShape(ctx,s,offsetX,offsetY);if(s.selected){ctx.save();ctx.strokeStyle=\"#ff7300\";ctx.lineWidth=2;drawSelection(ctx,s,offsetX,offsetY);ctx.restore();}ctx.restore();});}useEffect(()=>{const c2=c2Ref.current;const ctx2=c2.getContext(\"2d\");const getPos=e=>{const r=c2.getBoundingClientRect();return{x:e.clientX-r.left,y:e.clientY-r.top};};const down=e=>{const pos=getPos(e);if(activeTool===\"cursor\"){const ctx1=c1Ref.current.getContext(\"2d\");// clear previous selection\nshapesRef.current.forEach(sh=>sh.selected=false);// walk shapes in reverse z-order\nfor(let i=shapesRef.current.length-1;i>=0;i--){const s=shapesRef.current[i];const{xMin,yMin,xMax,yMax}=getBBox(s);const midX=(xMin+xMax)/2;const rotY=yMin-20;if(Math.hypot(pos.x-midX,pos.y-rotY)<6){console.log(\"🔄 starting rotate for shape\",i);s.selected=true;// remember rotation state\ndragRef.current={isRotating:true,shapeIndex:i,origRotation:s.rotation||0,// use the bounding‐box center, not (x0+x1)/2\ncenter:{x:midX,y:(yMin+yMax)/2},startAngle:Math.atan2(pos.y-(yMin+yMax)/2,pos.x-midX)};redrawAll();return;// bail out so you don’t also start a move or resize\n}if(!hitTest(ctx1,s,pos.x,pos.y,strokeWidth))continue;// 1) check for a corner-drag first\nconst corners=[{x:xMin,y:yMin},{x:xMax,y:yMin},{x:xMax,y:yMax},{x:xMin,y:yMax}];for(let h=0;h<corners.length;h++){const dx=pos.x-corners[h].x;const dy=pos.y-corners[h].y;if(Math.hypot(dx,dy)<6){// inside handle radius\ns.selected=true;dragRef.current={isResizing:true,shapeIndex:i,handleIndex:h,origShape:JSON.parse(JSON.stringify(s))};redrawAll();return;// don’t start a move-drag\n}}// 2) if no corner, it’s a normal drag\ns.selected=true;dragRef.current={isDragging:true,prevPos:pos,shapeIndex:i};redrawAll();return;}// clicked on empty space\nredrawAll();return;}if(activeTool===\"poly-line\"){polyRef.current.push(pos);setIsDrawing(true);return;}if(activeTool===\"curve\"){curveRef.current.push(pos);setIsDrawing(true);return;}if(![\"square\",\"line\",\"circle\",\"triangle\",\"polygon\"].includes(activeTool))return;setStartPos(pos);setIsDrawing(true);};const move=e=>{const pos=getPos(e);if(dragRef.current.isRotating){console.log(\"🖱️ rotating… angle delta =\",Math.atan2(pos.y-dragRef.current.center.y,pos.x-dragRef.current.center.x)-dragRef.current.startAngle);const{shapeIndex,origRotation,center,startAngle}=dragRef.current;const target=shapesRef.current[shapeIndex];const currPos=getPos(e);// how far we’ve turned\nconst currentAngle=Math.atan2(currPos.y-center.y,currPos.x-center.x);target.rotation=origRotation+(currentAngle-startAngle);redrawAll();return;}if(dragRef.current.isResizing){const{shapeIndex,handleIndex,origShape}=dragRef.current;const target=shapesRef.current[shapeIndex];const pos=getPos(e);// current mouse\nconst{xMin,yMin,xMax,yMax}=getBBox(origShape);const corners=[{x:xMin,y:yMin},{x:xMax,y:yMin},{x:xMax,y:yMax},{x:xMin,y:yMax}];const origHandle=corners[handleIndex];const opposite=corners[(handleIndex+2)%4];if(origShape.tool===\"line\"){// for lines, just drag one endpoint\nif(handleIndex===0){target.x0=pos.x;target.y0=pos.y;}else{target.x1=pos.x;target.y1=pos.y;}}else if(origShape.tool===\"circle\"||origShape.tool===\"polygon\"){// if you want perfect circle lock, compute r = hypot(...)\n// but even for ellipses, you can just set the handle\ntarget.x1=pos.x;target.y1=pos.y;redrawAll();return;}else{// for everything else, scale about the opposite corner\nconst sx=(pos.x-opposite.x)/(origHandle.x-opposite.x);const sy=(pos.y-opposite.y)/(origHandle.y-opposite.y);if(origShape.points){// poly‐line & curve: scale each point\ntarget.points=origShape.points.map(p=>({x:opposite.x+(p.x-opposite.x)*sx,y:opposite.y+(p.y-opposite.y)*sy}));}else{// x0/y0 and x1/y1 shapes (rect, circle, square, triangle, polygon)\n[\"x0\",\"y0\",\"x1\",\"y1\"].forEach(k=>{const coord=k.startsWith(\"x\")?\"x\":\"y\";const o=origShape[k];const off=opposite[coord];target[k]=off+(o-off)*(coord===\"x\"?sx:sy);});}}redrawAll();return;}if(activeTool===\"cursor\"&&dragRef.current.isDragging){const dx=pos.x-dragRef.current.prevPos.x;const dy=pos.y-dragRef.current.prevPos.y;const s=shapesRef.current[dragRef.current.shapeIndex];if(s.points)s.points.forEach(p=>{p.x+=dx;p.y+=dy;});else{s.x0+=dx;s.y0+=dy;s.x1+=dx;s.y1+=dy;}dragRef.current.prevPos=pos;redrawAll();return;}if(activeTool===\"poly-line\"&&polyRef.current.length){ctx2.clearRect(0,0,c2.width,c2.height);ctx2.strokeStyle=lineColor;ctx2.lineWidth=strokeWidth;ctx2.beginPath();ctx2.moveTo(polyRef.current[0].x,polyRef.current[0].y);for(let p of polyRef.current.slice(1))ctx2.lineTo(p.x,p.y);ctx2.lineTo(pos.x,pos.y);ctx2.stroke();return;}if(activeTool===\"curve\"&&curveRef.current.length){ctx2.clearRect(0,0,c2.width,c2.height);const pts=[...curveRef.current,pos];const shape={tool:\"curve\",points:pts,strokeWidth,lineColor};ctx2.lineWidth=shape.strokeWidth;ctx2.strokeStyle=shape.lineColor;drawShape(ctx2,shape,0,0);return;}if(!isDrawing)return;ctx2.clearRect(0,0,c2.width,c2.height);const{x,y}=pos;const shape={tool:activeTool,x0:startPos.x,y0:startPos.y,x1:x,y1:y,isSquare:e.shiftKey&&activeTool===\"square\",isCircle:e.shiftKey&&activeTool===\"circle\",strokeWidth:1,lineColor:\"black\",fillColor:\"transparent\"};ctx2.fillStyle=shape.fillColor;ctx2.strokeStyle=shape.lineColor;ctx2.lineWidth=shape.strokeWidth;drawShape(ctx2,shape,0,0);};const up=e=>{if(dragRef.current.isRotating){// 1) grab rotation info\nconst{shapeIndex,center}=dragRef.current;const shape=shapesRef.current[shapeIndex];dragRef.current.isRotating=false;redrawAll();return;}if(dragRef.current.isResizing){dragRef.current.isResizing=false;dragRef.current.handleIndex=null;dragRef.current.origShape=null;return;}if(activeTool===\"cursor\"&&dragRef.current.isDragging){dragRef.current.isDragging=false;dragRef.current.shapeIndex=null;return;}if([\"poly-line\",\"curve\"].includes(activeTool))return;if(!isDrawing)return;const pos=getPos(e);if(pos.x===startPos.x&&pos.y===startPos.y){ctx2.clearRect(0,0,c2.width,c2.height);setIsDrawing(false);return;}const isCircle=activeTool===\"circle\"&&e.shiftKey;const isSquare=activeTool===\"square\"&&e.shiftKey;const newShape={tool:activeTool,x0:startPos.x,y0:startPos.y,x1:pos.x,y1:pos.y,lineColor,fillColor,strokeWidth,isCircle,isSquare,rotation:0,selected:false};shapesRef.current.push(newShape);undoStack.current.push({type:'add',shapes:[newShape]});// clear redoStack because it's a brand-new action\nredoStack.current=[];shapesRef.current.forEach(s=>s.selected=false);shapesRef.current[shapesRef.current.length-1].selected=true;redrawAll();ctx2.clearRect(0,0,c2.width,c2.height);setIsDrawing(false);};const finishPoly=e=>{if(activeTool!==\"poly-line\"||polyRef.current.length<2)return;const newShape={tool:\"poly-line\",points:polyRef.current.slice(),lineColor,fillColor,strokeWidth,selected:false};shapesRef.current.push(newShape);undoStack.current.push({type:'add',shapes:[newShape]});// clear redoStack because it's a brand-new action\nredoStack.current=[];shapesRef.current.forEach(s=>s.selected=false);shapesRef.current[shapesRef.current.length-1].selected=true;redrawAll();ctx2.clearRect(0,0,c2.width,c2.height);polyRef.current=[];};const finishCurve=e=>{if(activeTool!==\"curve\"||curveRef.current.length<2)return;// 1. capture the final click\nconst pos=getPos(e);curveRef.current.push(pos);// 2. push the full point list\nconst newShape={tool:\"curve\",points:curveRef.current.slice(),lineColor,fillColor,strokeWidth,selected:false};shapesRef.current.push(newShape);undoStack.current.push({type:'add',shapes:[newShape]});// clear redoStack because it's a brand-new action\nredoStack.current=[];// 3. rest stays the same\nshapesRef.current.forEach(s=>s.selected=false);shapesRef.current[shapesRef.current.length-1].selected=true;redrawAll();ctx2.clearRect(0,0,c2.width,c2.height);// 4. reset\ncurveRef.current=[];setIsDrawing(false);};const onKeyDown=e=>{if(e.ctrlKey&&!e.shiftKey&&e.key.toLowerCase()==='z'){const action=undoStack.current.pop();if(!action)return;if(action.type==='add'){// remove the shape(s) that were added\nshapesRef.current=shapesRef.current.filter(s=>!action.shapes.includes(s));}else if(action.type==='delete'){// re‐insert deleted shapes at their original positions\naction.shapes.forEach((shape,i)=>{const idx=action.indices[i];shapesRef.current.splice(idx,0,shape);});}redoStack.current.push(action);redrawAll();}// REDO\nelse if(e.ctrlKey&&e.shiftKey&&e.key.toLowerCase()==='z'){const action=redoStack.current.pop();if(!action)return;if(action.type==='add'){// re‐add those shapes\nshapesRef.current.push(...action.shapes);}else if(action.type==='delete'){// re‐delete them\nshapesRef.current=shapesRef.current.filter(s=>!action.shapes.includes(s));}undoStack.current.push(action);redrawAll();}else if(e.key===\"Delete\"){const deleted=shapesRef.current.filter(s=>s.selected);if(deleted.length){// remember their original indices if you care about insert order:\nconst indices=deleted.map(s=>shapesRef.current.indexOf(s));shapesRef.current=shapesRef.current.filter(s=>!s.selected);undoStack.current.push({type:'delete',shapes:deleted,indices});redoStack.current=[];redrawAll();}}};c2.addEventListener(\"mousedown\",down);c2.addEventListener(\"mousemove\",move);c2.addEventListener(\"mouseup\",up);c2.addEventListener(\"dblclick\",finishPoly);c2.addEventListener(\"dblclick\",finishCurve);window.addEventListener(\"keydown\",onKeyDown);return()=>{c2.removeEventListener(\"mousedown\",down);c2.removeEventListener(\"mousemove\",move);c2.removeEventListener(\"mouseup\",up);c2.removeEventListener(\"dblclick\",finishPoly);c2.removeEventListener(\"dblclick\",finishCurve);window.removeEventListener(\"keydown\",onKeyDown);};},[activeTool,isDrawing,startPos,lineColor,fillColor,strokeWidth]);return/*#__PURE__*/_jsxs(\"div\",{ref:containerRef,className:\"canvas-container\",children:[/*#__PURE__*/_jsx(\"canvas\",{ref:c1Ref}),/*#__PURE__*/_jsx(\"canvas\",{ref:c2Ref,style:{backgroundColor:\"transparent\"}})]});});export default Canvas;","map":{"version":3,"names":["React","forwardRef","useImperativeHandle","useRef","useEffect","useState","jsPDF","jsx","_jsx","jsxs","_jsxs","getBBox","shape","points","xs","map","p","x","ys","y","xMin","Math","min","yMin","xMax","max","yMax","tool","cx","x0","cy","y0","isCircle","r","hypot","x1","y1","rx","abs","ry","radius","sides","i","ang","PI","push","cos","sin","isSquare","dx","dy","side","w","h","xA","yA","xB","yB","hitTest","ctx","defaultStroke","path","Path2D","lineWidth","strokeWidth","moveTo","lineTo","isPointInStroke","length","slice","drawShape","offsetX","arguments","undefined","offsetY","save","translate","rotate","rotation","fillRect","strokeRect","beginPath","stroke","arc","ellipse","fill","closePath","px","py","pts","prev","curr","mx","my","quadraticCurveTo","last","drawSelection","R","p0","p1","fillStyle","forEach","pt","midX","rotY","rotatePoint","center","angle","Canvas","_ref","ref","activeTool","lineColor","fillColor","containerRef","c1Ref","c2Ref","shapesRef","undoStack","redoStack","polyRef","curveRef","isDrawing","setIsDrawing","startPos","setStartPos","dragRef","isDragging","isResizing","prevPos","shapeIndex","handleIndex","origShape","origRotation","startAngle","exportShapes","current","s","selected","data","JSON","stringify","blob","Blob","type","url","URL","createObjectURL","a","document","createElement","href","download","click","revokeObjectURL","downloadJPEG","shapes","pad","minX","Infinity","minY","maxX","maxY","width","height","sw","sh","tmp","redrawAll","dataURL","toDataURL","link","downloadPDF","orientation","pdf","unit","format","pageW","internal","pageSize","getWidth","pageH","getHeight","scale","yOffset","sliceH","getContext","drawImage","imgData","imgW","imgH","xPos","addImage","addPage","loadShapes","arr","getShapeCount","clearShapes","resize","getBoundingClientRect","window","addEventListener","removeEventListener","dirty","context","backgroundColor","c","clearRect","strokeStyle","restore","c2","ctx2","getPos","e","clientX","left","clientY","top","down","pos","ctx1","console","log","isRotating","atan2","corners","parse","includes","move","target","currPos","currentAngle","origHandle","opposite","sx","sy","k","coord","startsWith","o","off","shiftKey","up","newShape","finishPoly","finishCurve","onKeyDown","ctrlKey","key","toLowerCase","action","pop","filter","idx","indices","splice","deleted","indexOf","className","children","style"],"sources":["/home/nightsquid/Desktop/GUI II/Shape Editor/src/components/Canvas.js"],"sourcesContent":["import React, { forwardRef, useImperativeHandle, useRef, useEffect, useState } from \"react\";\nimport { jsPDF } from \"jspdf\";\nimport \"../css/canvas.css\";\n\n// --- Helper Functions ---\n// Compute bounding box for any shape\nfunction getBBox(shape) {\n    if (shape.points) {\n        const xs = shape.points.map(p => p.x);\n        const ys = shape.points.map(p => p.y);\n        return {\n            xMin: Math.min(...xs),\n            yMin: Math.min(...ys),\n            xMax: Math.max(...xs),\n            yMax: Math.max(...ys)\n        };\n    }\n    if (shape.tool === \"circle\") {\n        const cx = shape.x0, cy = shape.y0;\n        if (shape.isCircle) {\n            const r = Math.hypot(shape.x1 - shape.x0, shape.y1 - shape.y0);\n            return { xMin: cx - r, yMin: cy - r, xMax: cx + r, yMax: cy + r };\n        } else {\n            const rx = Math.abs(shape.x1 - shape.x0);\n            const ry = Math.abs(shape.y1 - shape.y0);\n            return { xMin: cx - rx, yMin: cy - ry, xMax: cx + rx, yMax: cy + ry };\n        }\n    }\n    if (shape.tool === \"polygon\") {\n        const cx = shape.x0;\n        const cy = shape.y0;\n        const radius = Math.hypot(shape.x1 - shape.x0, shape.y1 - shape.y0);\n        const sides = 5;  // match your drawShape logic\n        const xs = [];\n        const ys = [];\n        for (let i = 0; i < sides; i++) {\n            const ang = i * (2 * Math.PI / sides) - Math.PI / 2;\n            xs.push(cx + radius * Math.cos(ang));\n            ys.push(cy + radius * Math.sin(ang));\n        }\n        return {\n            xMin: Math.min(...xs),\n            yMin: Math.min(...ys),\n            xMax: Math.max(...xs),\n            yMax: Math.max(...ys)\n        };\n    }\n    if (shape.tool === \"square\" && shape.isSquare) {\n        const dx = shape.x1 - shape.x0;\n        const dy = shape.y1 - shape.y0;\n        const side = Math.min(Math.abs(dx), Math.abs(dy));\n        const w = dx < 0 ? -side : side;\n        const h = dy < 0 ? -side : side;\n\n        const xA = shape.x0;\n        const yA = shape.y0;\n        const xB = shape.x0 + w;\n        const yB = shape.y0 + h;\n\n        return {\n            xMin: Math.min(xA, xB),\n            yMin: Math.min(yA, yB),\n            xMax: Math.max(xA, xB),\n            yMax: Math.max(yA, yB)\n        };\n    }\n    return {\n        xMin: Math.min(shape.x0, shape.x1),\n        yMin: Math.min(shape.y0, shape.y1),\n        xMax: Math.max(shape.x0, shape.x1),\n        yMax: Math.max(shape.y0, shape.y1)\n    };\n}\n\n// Hit-test a point against any shape (strokes for lines, box for others)\nfunction hitTest(ctx, shape, x, y, defaultStroke) {\n    const path = new Path2D();\n    ctx.lineWidth = (shape.strokeWidth || defaultStroke) + 8;\n    switch (shape.tool) {\n        case \"line\":\n            path.moveTo(shape.x0, shape.y0);\n            path.lineTo(shape.x1, shape.y1);\n            return ctx.isPointInStroke(path, x, y);\n        case \"poly-line\":\n        case \"curve\":\n            if (shape.points && shape.points.length > 1) {\n                path.moveTo(shape.points[0].x, shape.points[0].y);\n                for (let p of shape.points.slice(1)) path.lineTo(p.x, p.y);\n                return ctx.isPointInStroke(path, x, y);\n            }\n            return false;\n        default:\n            const { xMin, yMin, xMax, yMax } = getBBox(shape);\n            return x >= xMin && x <= xMax && y >= yMin && y <= yMax;\n    }\n}\n\n// Draw a shape onto the canvas context\nfunction drawShape(ctx, shape, offsetX = 0, offsetY = 0) {\n    const x0 = shape.x0 + offsetX;\n    const y0 = shape.y0 + offsetY;\n    const x1 = shape.x1 + offsetX;\n    const y1 = shape.y1 + offsetY;\n\n    const { xMin, yMin, xMax, yMax } = getBBox(shape);\n    const cx = (xMin + xMax) / 2 + offsetX;\n    const cy = (yMin + yMax) / 2 + offsetY;\n\n    ctx.save();\n    ctx.translate(cx, cy);\n    ctx.rotate(shape.rotation || 0);\n    ctx.translate(-cx, -cy);\n\n    switch (shape.tool) {\n        case \"square\": {\n            const dx = shape.x1 - shape.x0;\n            const dy = shape.y1 - shape.y0;\n            let w, h;\n            if (shape.isSquare) {\n                const side = Math.min(Math.abs(dx), Math.abs(dy));\n                w = dx < 0 ? -side : side;\n                h = dy < 0 ? -side : side;\n            } else {\n                w = dx;\n                h = dy;\n            }\n            ctx.fillRect(shape.x0 + offsetX, shape.y0 + offsetY, w, h);\n            ctx.strokeRect(shape.x0 + offsetX, shape.y0 + offsetY, w, h);\n            return;\n        }\n        case \"line\":\n            ctx.beginPath();\n            ctx.moveTo(x0, y0);\n            ctx.lineTo(x1, y1);\n            ctx.stroke();\n            return;\n        case \"circle\":\n            ctx.beginPath();\n            if (shape.isCircle) {\n                const r = Math.hypot(shape.x1 - shape.x0, shape.y1 - shape.y0);\n                ctx.arc(x0, y0, r, 0, 2 * Math.PI);\n            } else {\n                ctx.ellipse(x0, y0, Math.abs(shape.x1 - shape.x0), Math.abs(shape.y1 - shape.y0), 0, 0, 2 * Math.PI);\n            }\n            ctx.fill();\n            ctx.stroke();\n            return;\n        case \"triangle\":\n            ctx.beginPath();\n            ctx.moveTo(x0, y0);\n            ctx.lineTo(x1, y0);\n            ctx.lineTo((x0 + x1) / 2, y1);\n            ctx.closePath();\n            ctx.fill();\n            ctx.stroke();\n            return;\n        case \"polygon\":\n            ctx.beginPath();\n            const sides = 5;\n            const radius = Math.hypot(shape.x1 - shape.x0, shape.y1 - shape.y0);\n            for (let i = 0; i < sides; i++) {\n                const ang = i * (2 * Math.PI / sides) - Math.PI / 2;\n                const px = shape.x0 + offsetX + radius * Math.cos(ang);\n                const py = shape.y0 + offsetY + radius * Math.sin(ang);\n                if (i === 0) ctx.moveTo(px, py);\n                else ctx.lineTo(px, py);\n            }\n            ctx.closePath();\n            ctx.fill();\n            ctx.stroke();\n            return;\n        case \"poly-line\":\n            if (shape.points && shape.points.length) {\n                ctx.beginPath();\n                ctx.moveTo(shape.points[0].x + offsetX, shape.points[0].y + offsetY);\n                for (let p of shape.points.slice(1)) ctx.lineTo(p.x + offsetX, p.y + offsetY);\n                ctx.stroke();\n            }\n            return;\n        case \"curve\":\n            if (shape.points && shape.points.length) {\n                ctx.beginPath();\n                const pts = shape.points;\n                ctx.moveTo(pts[0].x + offsetX, pts[0].y + offsetY);\n                for (let i = 1; i < pts.length; i++) {\n                    const prev = pts[i - 1];\n                    const curr = pts[i];\n                    const mx = (prev.x + curr.x) / 2 + offsetX;\n                    const my = (prev.y + curr.y) / 2 + offsetY;\n                    ctx.quadraticCurveTo(prev.x + offsetX, prev.y + offsetY, mx, my);\n                }\n\n                const last = pts[pts.length - 1];\n                ctx.lineTo(last.x + offsetX, last.y + offsetY);\n\n                ctx.stroke();\n            }\n            return;\n        default:\n            ctx.save();\n            ctx.translate(cx, cy);\n            ctx.rotate(shape.rotation || 0);\n            ctx.translate(-cx, -cy);\n\n    }\n}\n\n// Draw selection handles\nfunction drawSelection(ctx, shape, offsetX = 0, offsetY = 0) {\n    const R = 5;\n    if (shape.tool === \"line\") {\n        const p0 = { x: shape.x0 + offsetX, y: shape.y0 + offsetY };\n        const p1 = { x: shape.x1 + offsetX, y: shape.y1 + offsetY };\n        ctx.fillStyle = \"white\";\n        ctx.fill();\n        ctx.beginPath(); ctx.moveTo(p0.x, p0.y); ctx.lineTo(p1.x, p1.y); ctx.stroke();\n        [p0, p1].forEach(pt => {\n            ctx.beginPath(); ctx.arc(pt.x, pt.y, R, 0, 2 * Math.PI); ctx.fill(); ctx.stroke();\n        });\n        return;\n    }\n    const { xMin, yMin, xMax, yMax } = getBBox(shape);\n    const midX = (xMin + xMax) / 2;\n    const rotY = yMin - 20;\n    ctx.beginPath();\n    ctx.moveTo(midX, yMin);\n    ctx.lineTo(midX, rotY);\n    ctx.stroke();\n\n    // circle grip\n    ctx.beginPath();\n    ctx.arc(midX, rotY, R, 0, 2 * Math.PI);\n\n    ctx.stroke();\n    ctx.strokeRect(xMin, yMin, xMax - xMin, yMax - yMin);\n    ctx.fillStyle = \"white\";\n    ctx.fill();\n    [\n        { x: xMin, y: yMin },\n        { x: xMax, y: yMin },\n        { x: xMax, y: yMax },\n        { x: xMin, y: yMax }\n    ].forEach(pt => {\n        ctx.beginPath(); ctx.arc(pt.x, pt.y, R, 0, 2 * Math.PI); ctx.fill(); ctx.stroke();\n    });\n}\n\nfunction rotatePoint(p, center, angle) {\n    const dx = p.x - center.x;\n    const dy = p.y - center.y;\n    return {\n        x: center.x + dx * Math.cos(angle) - dy * Math.sin(angle),\n        y: center.y + dx * Math.sin(angle) + dy * Math.cos(angle)\n    };\n}\n\nconst Canvas = forwardRef(({ activeTool, lineColor, fillColor, strokeWidth }, ref) => {\n    const containerRef = useRef(null);\n    const c1Ref = useRef(null);\n    const c2Ref = useRef(null);\n    const shapesRef = useRef([]);\n    const undoStack = useRef([]);\n    const redoStack = useRef([]);\n    const polyRef = useRef([]);\n    const curveRef = useRef([]);\n    const [isDrawing, setIsDrawing] = useState(false);\n    const [startPos, setStartPos] = useState({ x: 0, y: 0 });\n    const dragRef = useRef({\n        isDragging: false,\n        isResizing: false,\n        prevPos: { x: 0, y: 0 },\n        shapeIndex: null,\n        handleIndex: null,\n        origShape: null,\n        origRotation: 0,\n        center: null,\n        startAngle: 0\n    });\n\n    useImperativeHandle(ref, () => ({\n        exportShapes: () => {\n            shapesRef.current.forEach(s => (s.selected = false));\n            const data = JSON.stringify(shapesRef.current, null, 2);\n            const blob = new Blob([data], { type: \"application/json\" });\n            const url = URL.createObjectURL(blob);\n            const a = document.createElement(\"a\");\n            a.href = url; a.download = \"shapes.json\"; a.click();\n            URL.revokeObjectURL(url);\n        },\n        downloadJPEG: () => {\n            shapesRef.current.forEach(s => (s.selected = false));\n            const shapes = shapesRef.current;\n            const pad = 20;\n            let minX = Infinity, minY = Infinity;\n            let maxX = -Infinity, maxY = -Infinity;\n            shapes.forEach(s => {\n                if (s.tool === \"circle\" || s.tool === \"polygon\") {\n                    const r = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n                    minX = Math.min(minX, s.x0 - r);\n                    maxX = Math.max(maxX, s.x0 + r);\n                    minY = Math.min(minY, s.y0 - r);\n                    maxY = Math.max(maxY, s.y0 + r);\n                } else {\n                    minX = Math.min(minX, s.x0, s.x1);\n                    maxX = Math.max(maxX, s.x0, s.x1);\n                    minY = Math.min(minY, s.y0, s.y1);\n                    maxY = Math.max(maxY, s.y0, s.y1);\n                }\n            });\n            if (minX === Infinity) {\n                minX = 0; minY = 0;\n                maxX = c1Ref.current.width;\n                maxY = c1Ref.current.height;\n            }\n            minX -= pad; minY -= pad; maxX += pad; maxY += pad;\n            const sw = maxX - minX;\n            const sh = maxY - minY;\n            const tmp = document.createElement(\"canvas\");\n            tmp.width = sw; tmp.height = sh;\n            redrawAll({ current: tmp }, -minX, -minY, \"#ffffff\");\n            const dataURL = tmp.toDataURL(\"image/jpeg\", 1.0);\n            const link = document.createElement(\"a\");\n            link.href = dataURL;\n            link.download = \"shapes.jpg\";\n            link.click();\n        },\n        downloadPDF: () => {\n            shapesRef.current.forEach(s => (s.selected = false));\n            const shapes = shapesRef.current;\n            const pad = 20;\n            let minX = Infinity, minY = Infinity;\n            let maxX = -Infinity, maxY = -Infinity;\n            shapes.forEach(s => {\n                if (s.tool === \"circle\" || s.tool === \"polygon\") {\n                    const r = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n                    minX = Math.min(minX, s.x0 - r);\n                    maxX = Math.max(maxX, s.x0 + r);\n                    minY = Math.min(minY, s.y0 - r);\n                    maxY = Math.max(maxY, s.y0 + r);\n                } else {\n                    minX = Math.min(minX, s.x0, s.x1);\n                    maxX = Math.max(maxX, s.x0, s.x1);\n                    minY = Math.min(minY, s.y0, s.y1);\n                    maxY = Math.max(maxY, s.y0, s.y1);\n                }\n            });\n            if (minX === Infinity) {\n                minX = 0; minY = 0;\n                maxX = c1Ref.current.width;\n                maxY = c1Ref.current.height;\n            }\n            minX -= pad; minY -= pad; maxX += pad; maxY += pad;\n            const sw = maxX - minX;\n            const sh = maxY - minY;\n            const tmp = document.createElement(\"canvas\");\n            tmp.width = sw; tmp.height = sh;\n            redrawAll({ current: tmp }, -minX, -minY, \"#ffffff\");\n            const orientation = sw > sh ? \"landscape\" : \"portrait\";\n            const pdf = new jsPDF({ orientation, unit: \"px\", format: \"a4\" });\n            const pageW = pdf.internal.pageSize.getWidth();\n            const pageH = pdf.internal.pageSize.getHeight();\n            const scale = Math.min(pageW / sw, pageH / sh);\n            let yOffset = 0;\n            while (yOffset < sh) {\n                const sliceH = Math.min(sh - yOffset, pageH / scale);\n                const slice = document.createElement(\"canvas\");\n                slice.width = sw; slice.height = sliceH;\n                slice.getContext(\"2d\").drawImage(\n                    tmp,\n                    0, yOffset, sw, sliceH,\n                    0, 0, sw, sliceH\n                );\n                const imgData = slice.toDataURL(\"image/jpeg\", 1.0);\n                const imgW = sw * scale, imgH = sliceH * scale;\n                const xPos = (pageW - imgW) / 2;\n                pdf.addImage(imgData, \"JPEG\", xPos, 0, imgW, imgH);\n                yOffset += sliceH;\n                if (yOffset < sh) pdf.addPage();\n            }\n            pdf.save(\"shapes.pdf\");\n        },\n        loadShapes: (arr) => { shapesRef.current = arr.map(s => ({ ...s, selected: false })); redrawAll(); },\n        getShapeCount: () => shapesRef.current.length,\n        clearShapes: () => { shapesRef.current = []; redrawAll(); }\n    }));\n\n    useEffect(() => {\n        const resize = () => {\n            const { width, height } = containerRef.current.getBoundingClientRect();\n            [c1Ref, c2Ref].forEach(r => { r.current.width = width; r.current.height = height; });\n            redrawAll();\n        };\n        resize(); window.addEventListener(\"resize\", resize);\n        return () => window.removeEventListener(\"resize\", resize);\n    }, []);\n\n    useEffect(() => {\n        let dirty = false;\n        shapesRef.current.forEach(s => {\n            if (s.selected && (s.strokeWidth !== strokeWidth || s.lineColor !== lineColor || s.fillColor !== fillColor)) {\n                s.strokeWidth = strokeWidth;\n                s.lineColor = lineColor;\n                s.fillColor = fillColor;\n                dirty = true;\n            }\n        });\n        if (dirty) redrawAll();\n    }, [strokeWidth, lineColor, fillColor]);\n\n    function redrawAll(context = c1Ref, offsetX = 0, offsetY = 0, backgroundColor = \"#979797\") {\n        const c = context.current;\n        const ctx = c.getContext(\"2d\");\n        ctx.clearRect(0, 0, c.width, c.height);\n        ctx.fillStyle = backgroundColor;\n        ctx.fillRect(0, 0, c.width, c.height);\n        shapesRef.current.forEach(s => {\n            ctx.save();\n            ctx.strokeStyle = s.lineColor || lineColor;\n            ctx.fillStyle = s.fillColor || fillColor;\n            ctx.lineWidth = s.strokeWidth || strokeWidth;\n            drawShape(ctx, s, offsetX, offsetY);\n            if (s.selected) {\n                ctx.save(); ctx.strokeStyle = \"#ff7300\"; ctx.lineWidth = 2;\n                drawSelection(ctx, s, offsetX, offsetY);\n                ctx.restore();\n            }\n            ctx.restore();\n        });\n    }\n\n    useEffect(() => {\n        const c2 = c2Ref.current;\n        const ctx2 = c2.getContext(\"2d\");\n        const getPos = e => {\n            const r = c2.getBoundingClientRect();\n            return { x: e.clientX - r.left, y: e.clientY - r.top };\n        };\n\n        const down = e => {\n            const pos = getPos(e);\n            if (activeTool === \"cursor\") {\n                const ctx1 = c1Ref.current.getContext(\"2d\");\n                // clear previous selection\n                shapesRef.current.forEach(sh => sh.selected = false);\n\n                // walk shapes in reverse z-order\n                for (let i = shapesRef.current.length - 1; i >= 0; i--) {\n                    const s = shapesRef.current[i];\n\n                    const { xMin, yMin, xMax, yMax } = getBBox(s);\n                    const midX = (xMin + xMax) / 2;\n                    const rotY = yMin - 20;\n\n                    if (Math.hypot(pos.x - midX, pos.y - rotY) < 6) {\n                        console.log(\"🔄 starting rotate for shape\", i);\n                        s.selected = true;\n\n                        // remember rotation state\n                        dragRef.current = {\n                            isRotating: true,\n                            shapeIndex: i,\n                            origRotation: s.rotation || 0,\n                            // use the bounding‐box center, not (x0+x1)/2\n                            center: { x: midX, y: (yMin + yMax) / 2 },\n                            startAngle: Math.atan2(\n                                pos.y - ((yMin + yMax) / 2),\n                                pos.x - midX\n                            )\n                        };\n\n                        redrawAll();\n                        return;    // bail out so you don’t also start a move or resize\n                    }\n\n                    if (!hitTest(ctx1, s, pos.x, pos.y, strokeWidth)) continue;\n\n                    // 1) check for a corner-drag first\n                    const corners = [\n                        { x: xMin, y: yMin },\n                        { x: xMax, y: yMin },\n                        { x: xMax, y: yMax },\n                        { x: xMin, y: yMax }\n                    ];\n                    for (let h = 0; h < corners.length; h++) {\n                        const dx = pos.x - corners[h].x;\n                        const dy = pos.y - corners[h].y;\n                        if (Math.hypot(dx, dy) < 6) {        // inside handle radius\n                            s.selected = true;\n                            dragRef.current = {\n                                isResizing: true,\n                                shapeIndex: i,\n                                handleIndex: h,\n                                origShape: JSON.parse(JSON.stringify(s))\n                            };\n                            redrawAll();\n                            return;  // don’t start a move-drag\n                        }\n                    }\n\n                    // 2) if no corner, it’s a normal drag\n                    s.selected = true;\n                    dragRef.current = {\n                        isDragging: true,\n                        prevPos: pos,\n                        shapeIndex: i\n                    };\n                    redrawAll();\n                    return;\n                }\n\n                // clicked on empty space\n                redrawAll();\n                return;\n            }\n            if (activeTool === \"poly-line\") { polyRef.current.push(pos); setIsDrawing(true); return; }\n            if (activeTool === \"curve\") { curveRef.current.push(pos); setIsDrawing(true); return; }\n            if (![\"square\", \"line\", \"circle\", \"triangle\", \"polygon\"].includes(activeTool)) return;\n            setStartPos(pos);\n            setIsDrawing(true);\n        };\n\n        const move = e => {\n            const pos = getPos(e);\n            if (dragRef.current.isRotating) {\n                console.log(\"🖱️ rotating… angle delta =\", (Math.atan2(pos.y - dragRef.current.center.y,\n                    pos.x - dragRef.current.center.x)\n                    - dragRef.current.startAngle));\n                const { shapeIndex, origRotation, center, startAngle } = dragRef.current;\n                const target = shapesRef.current[shapeIndex];\n                const currPos = getPos(e);\n\n                // how far we’ve turned\n                const currentAngle = Math.atan2(currPos.y - center.y, currPos.x - center.x);\n                target.rotation = origRotation + (currentAngle - startAngle);\n\n                redrawAll();\n                return;\n            }\n            if (dragRef.current.isResizing) {\n                const { shapeIndex, handleIndex, origShape } = dragRef.current;\n                const target = shapesRef.current[shapeIndex];\n                const pos = getPos(e);             // current mouse\n                const { xMin, yMin, xMax, yMax } = getBBox(origShape);\n                const corners = [\n                    { x: xMin, y: yMin },\n                    { x: xMax, y: yMin },\n                    { x: xMax, y: yMax },\n                    { x: xMin, y: yMax }\n                ];\n                const origHandle = corners[handleIndex];\n                const opposite = corners[(handleIndex + 2) % 4];\n\n                if (origShape.tool === \"line\") {\n                    // for lines, just drag one endpoint\n                    if (handleIndex === 0) {\n                        target.x0 = pos.x; target.y0 = pos.y;\n                    } else {\n                        target.x1 = pos.x; target.y1 = pos.y;\n                    }\n                } else if (origShape.tool === \"circle\" || origShape.tool === \"polygon\") {\n                    // if you want perfect circle lock, compute r = hypot(...)\n                    // but even for ellipses, you can just set the handle\n                    target.x1 = pos.x;\n                    target.y1 = pos.y;\n                    redrawAll();\n                    return;\n                } else {\n                    // for everything else, scale about the opposite corner\n                    const sx = (pos.x - opposite.x) / (origHandle.x - opposite.x);\n                    const sy = (pos.y - opposite.y) / (origHandle.y - opposite.y);\n\n                    if (origShape.points) {\n                        // poly‐line & curve: scale each point\n                        target.points = origShape.points.map(p => ({\n                            x: opposite.x + (p.x - opposite.x) * sx,\n                            y: opposite.y + (p.y - opposite.y) * sy\n                        }));\n                    } else {\n                        // x0/y0 and x1/y1 shapes (rect, circle, square, triangle, polygon)\n                        [\"x0\", \"y0\", \"x1\", \"y1\"].forEach(k => {\n                            const coord = k.startsWith(\"x\") ? \"x\" : \"y\";\n                            const o = origShape[k];\n                            const off = opposite[coord];\n                            target[k] = off + (o - off) * (coord === \"x\" ? sx : sy);\n                        });\n                    }\n                }\n\n                redrawAll();\n                return;\n            }\n            if (activeTool === \"cursor\" && dragRef.current.isDragging) {\n                const dx = pos.x - dragRef.current.prevPos.x;\n                const dy = pos.y - dragRef.current.prevPos.y;\n                const s = shapesRef.current[dragRef.current.shapeIndex];\n                if (s.points) s.points.forEach(p => { p.x += dx; p.y += dy; });\n                else { s.x0 += dx; s.y0 += dy; s.x1 += dx; s.y1 += dy; }\n                dragRef.current.prevPos = pos;\n                redrawAll(); return;\n            }\n            if (activeTool === \"poly-line\" && polyRef.current.length) {\n                ctx2.clearRect(0, 0, c2.width, c2.height);\n                ctx2.strokeStyle = lineColor; ctx2.lineWidth = strokeWidth;\n                ctx2.beginPath(); ctx2.moveTo(polyRef.current[0].x, polyRef.current[0].y);\n                for (let p of polyRef.current.slice(1)) ctx2.lineTo(p.x, p.y);\n                ctx2.lineTo(pos.x, pos.y); ctx2.stroke(); return;\n            }\n            if (activeTool === \"curve\" && curveRef.current.length) {\n                ctx2.clearRect(0, 0, c2.width, c2.height);\n                const pts = [...curveRef.current, pos];\n                const shape = {\n                    tool: \"curve\",\n                    points: pts,\n                    strokeWidth,\n                    lineColor,\n                };\n                ctx2.lineWidth = shape.strokeWidth;\n                ctx2.strokeStyle = shape.lineColor;\n                drawShape(ctx2, shape, 0, 0);\n                return;\n            }\n            if (!isDrawing) return;\n            ctx2.clearRect(0, 0, c2.width, c2.height);\n            const { x, y } = pos;\n\n            const shape = {\n                tool: activeTool,\n                x0: startPos.x,\n                y0: startPos.y,\n                x1: x,\n                y1: y,\n                isSquare: e.shiftKey && activeTool === \"square\",\n                isCircle: e.shiftKey && activeTool === \"circle\",\n                strokeWidth: 1,\n                lineColor: \"black\",\n                fillColor: \"transparent\"\n            }\n            ctx2.fillStyle = shape.fillColor;\n            ctx2.strokeStyle = shape.lineColor;\n            ctx2.lineWidth = shape.strokeWidth;\n\n            drawShape(ctx2, shape, 0, 0);\n        };\n\n        const up = e => {\n            if (dragRef.current.isRotating) {\n                // 1) grab rotation info\n                const { shapeIndex, center } = dragRef.current;\n                const shape = shapesRef.current[shapeIndex];\n\n                dragRef.current.isRotating = false;\n\n                redrawAll();\n                return;\n            }\n            if (dragRef.current.isResizing) {\n                dragRef.current.isResizing = false;\n                dragRef.current.handleIndex = null;\n                dragRef.current.origShape = null;\n                return;\n            }\n            if (activeTool === \"cursor\" && dragRef.current.isDragging) {\n                dragRef.current.isDragging = false;\n                dragRef.current.shapeIndex = null;\n                return;\n            }\n            if ([\"poly-line\", \"curve\"].includes(activeTool)) return;\n            if (!isDrawing) return;\n            const pos = getPos(e);\n            if (pos.x === startPos.x && pos.y === startPos.y) {\n                ctx2.clearRect(0, 0, c2.width, c2.height);\n                setIsDrawing(false);\n                return;\n            }\n            const isCircle = activeTool === \"circle\" && e.shiftKey;\n            const isSquare = activeTool === \"square\" && e.shiftKey;\n\n            const newShape = {\n                tool: activeTool,\n                x0: startPos.x, y0: startPos.y,\n                x1: pos.x, y1: pos.y,\n                lineColor, fillColor, strokeWidth,\n                isCircle, isSquare,\n                rotation: 0,\n                selected: false\n            };\n\n            shapesRef.current.push(newShape);\n\n            undoStack.current.push({ type: 'add', shapes: [newShape] });\n            // clear redoStack because it's a brand-new action\n            redoStack.current = [];\n\n            shapesRef.current.forEach(s => (s.selected = false));\n            shapesRef.current[shapesRef.current.length - 1].selected = true;\n            redrawAll();\n            ctx2.clearRect(0, 0, c2.width, c2.height);\n            setIsDrawing(false);\n        };\n\n        const finishPoly = e => {\n            if (activeTool !== \"poly-line\" || polyRef.current.length < 2) return;\n            const newShape = {\n                tool: \"poly-line\",\n                points: polyRef.current.slice(),\n                lineColor, fillColor, strokeWidth,\n                selected: false\n            };\n            shapesRef.current.push(newShape);\n\n            undoStack.current.push({ type: 'add', shapes: [newShape] });\n            // clear redoStack because it's a brand-new action\n            redoStack.current = [];\n\n            shapesRef.current.forEach(s => (s.selected = false));\n            shapesRef.current[shapesRef.current.length - 1].selected = true;\n            redrawAll();\n            ctx2.clearRect(0, 0, c2.width, c2.height);\n            polyRef.current = [];\n        };\n\n        const finishCurve = e => {\n            if (activeTool !== \"curve\" || curveRef.current.length < 2) return;\n\n            // 1. capture the final click\n            const pos = getPos(e);\n            curveRef.current.push(pos);\n\n            // 2. push the full point list\n            const newShape = {\n                tool: \"curve\",\n                points: curveRef.current.slice(),\n                lineColor, fillColor, strokeWidth,\n                selected: false\n            };\n            shapesRef.current.push(newShape);\n\n            undoStack.current.push({ type: 'add', shapes: [newShape] });\n            // clear redoStack because it's a brand-new action\n            redoStack.current = [];\n\n            // 3. rest stays the same\n            shapesRef.current.forEach(s => (s.selected = false));\n            shapesRef.current[shapesRef.current.length - 1].selected = true;\n            redrawAll();\n            ctx2.clearRect(0, 0, c2.width, c2.height);\n\n            // 4. reset\n            curveRef.current = [];\n            setIsDrawing(false);\n        };\n\n        const onKeyDown = e => {\n            if (e.ctrlKey && !e.shiftKey && e.key.toLowerCase() === 'z') {\n                const action = undoStack.current.pop();\n                if (!action) return;\n\n                if (action.type === 'add') {\n                    // remove the shape(s) that were added\n                    shapesRef.current = shapesRef.current.filter(\n                        s => !action.shapes.includes(s)\n                    );\n                } else if (action.type === 'delete') {\n                    // re‐insert deleted shapes at their original positions\n                    action.shapes.forEach((shape, i) => {\n                        const idx = action.indices[i];\n                        shapesRef.current.splice(idx, 0, shape);\n                    });\n                }\n\n                redoStack.current.push(action);\n                redrawAll();\n            }\n\n            // REDO\n            else if (e.ctrlKey && e.shiftKey && e.key.toLowerCase() === 'z') {\n                const action = redoStack.current.pop();\n                if (!action) return;\n\n                if (action.type === 'add') {\n                    // re‐add those shapes\n                    shapesRef.current.push(...action.shapes);\n                } else if (action.type === 'delete') {\n                    // re‐delete them\n                    shapesRef.current = shapesRef.current.filter(\n                        s => !action.shapes.includes(s)\n                    );\n                }\n\n                undoStack.current.push(action);\n                redrawAll();\n            }\n            else if (e.key === \"Delete\") {\n                const deleted = shapesRef.current.filter(s => s.selected);\n                if (deleted.length) {\n                    // remember their original indices if you care about insert order:\n                    const indices = deleted.map(s => shapesRef.current.indexOf(s));\n                    shapesRef.current = shapesRef.current.filter(s => !s.selected);\n                    undoStack.current.push({ type: 'delete', shapes: deleted, indices });\n                    redoStack.current = [];\n                    redrawAll();\n                }\n            }\n        };\n\n        c2.addEventListener(\"mousedown\", down);\n        c2.addEventListener(\"mousemove\", move);\n        c2.addEventListener(\"mouseup\", up);\n        c2.addEventListener(\"dblclick\", finishPoly);\n        c2.addEventListener(\"dblclick\", finishCurve);\n        window.addEventListener(\"keydown\", onKeyDown);\n        return () => {\n            c2.removeEventListener(\"mousedown\", down);\n            c2.removeEventListener(\"mousemove\", move);\n            c2.removeEventListener(\"mouseup\", up);\n            c2.removeEventListener(\"dblclick\", finishPoly);\n            c2.removeEventListener(\"dblclick\", finishCurve);\n            window.removeEventListener(\"keydown\", onKeyDown);\n        };\n    }, [activeTool, isDrawing, startPos, lineColor, fillColor, strokeWidth]);\n\n    return (\n        <div ref={containerRef} className=\"canvas-container\">\n            <canvas ref={c1Ref} />\n            <canvas ref={c2Ref} style={{ backgroundColor: \"transparent\" }} />\n        </div>\n    );\n});\n\nexport default Canvas;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}