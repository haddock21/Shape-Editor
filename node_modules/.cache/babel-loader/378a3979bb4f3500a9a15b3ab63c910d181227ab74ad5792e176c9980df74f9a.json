{"ast":null,"code":"var _jsxFileName = \"/home/nightsquid/Desktop/Graphics 1/Shape-Editor/src/components/Canvas.js\",\n  _s = $RefreshSig$();\nimport React, { forwardRef, useImperativeHandle, useRef, useEffect, useState } from \"react\";\nimport { jsPDF } from \"jspdf\";\nimport \"../css/canvas.css\";\n\n// --- Helper Functions ---\n// Draw a uniform grid of given cell size\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction drawGrid(ctx, width, height, cell) {\n  ctx.save();\n  ctx.beginPath();\n  ctx.strokeStyle = \"#ffffff3a\"; // light grey grid\n  ctx.lineWidth = 1;\n  // vertical\n  for (let x = 0; x <= width; x += cell) {\n    ctx.moveTo(x, 0);\n    ctx.lineTo(x, height);\n  }\n  // horizontal\n  for (let y = 0; y <= height; y += cell) {\n    ctx.moveTo(0, y);\n    ctx.lineTo(width, y);\n  }\n  ctx.stroke();\n  ctx.restore();\n}\n\n// --- Helper: rotate a point (px,py) around center (cx,cy) by θ radians\nfunction rotatePoint(px, py, cx, cy, θ) {\n  const dx = px - cx,\n    dy = py - cy;\n  const c = Math.cos(θ),\n    s = Math.sin(θ);\n  return {\n    x: c * dx - s * dy + cx,\n    y: s * dx + c * dy + cy\n  };\n}\nfunction getBBox(shape) {\n  const θ = shape.rotation || 0;\n\n  // 1) figure out the world-coords of each “corner” or defining point\n  let worldPoints;\n  if (shape.points) {\n    // polyline / free-form shape\n    const center = {\n      x: shape.points.reduce((a, p) => a + p.x, 0) / shape.points.length,\n      y: shape.points.reduce((a, p) => a + p.y, 0) / shape.points.length\n    };\n    worldPoints = shape.points.map(p => rotatePoint(p.x, p.y, center.x, center.y, θ));\n  } else {\n    // rectangle / circle‐bounding‐box shapes\n    const cx = (shape.x0 + shape.x1) / 2;\n    const cy = (shape.y0 + shape.y1) / 2;\n    const corners = [{\n      x: shape.x0,\n      y: shape.y0\n    }, {\n      x: shape.x1,\n      y: shape.y0\n    }, {\n      x: shape.x1,\n      y: shape.y1\n    }, {\n      x: shape.x0,\n      y: shape.y1\n    }];\n    worldPoints = corners.map(c => rotatePoint(c.x, c.y, cx, cy, θ));\n  }\n\n  // 2) axis-align that rotated set\n  const xs = worldPoints.map(p => p.x);\n  const ys = worldPoints.map(p => p.y);\n  return {\n    xMin: Math.min(...xs),\n    yMin: Math.min(...ys),\n    xMax: Math.max(...xs),\n    yMax: Math.max(...ys)\n  };\n}\n\n// Hit-test a point against any shape (strokes for lines, box for others)\nfunction hitTest(ctx, shape, x, y, defaultStroke) {\n  const path = new Path2D();\n  ctx.lineWidth = (shape.strokeWidth || defaultStroke) + 8;\n  switch (shape.tool) {\n    case \"line\":\n      path.moveTo(shape.x0, shape.y0);\n      path.lineTo(shape.x1, shape.y1);\n      return ctx.isPointInStroke(path, x, y);\n    case \"poly-line\":\n    case \"curve\":\n      if (shape.points && shape.points.length > 1) {\n        path.moveTo(shape.points[0].x, shape.points[0].y);\n        for (let p of shape.points.slice(1)) path.lineTo(p.x, p.y);\n        return ctx.isPointInStroke(path, x, y);\n      }\n      return false;\n    default:\n      const {\n        xMin,\n        yMin,\n        xMax,\n        yMax\n      } = getBBox(shape);\n      return x >= xMin && x <= xMax && y >= yMin && y <= yMax;\n  }\n}\n\n// Draw a shape onto the canvas context\nfunction drawShape(ctx, shape, offsetX = 0, offsetY = 0) {\n  const x0 = shape.x0 + offsetX;\n  const y0 = shape.y0 + offsetY;\n  const x1 = shape.x1 + offsetX;\n  const y1 = shape.y1 + offsetY;\n  const {\n    xMin,\n    yMin,\n    xMax,\n    yMax\n  } = getBBox(shape);\n  const cx = (xMin + xMax) / 2 + offsetX;\n  const cy = (yMin + yMax) / 2 + offsetY;\n  ctx.save();\n  ctx.translate(cx, cy);\n  ctx.rotate(shape.rotation || 0);\n  ctx.translate(-cx, -cy);\n  switch (shape.tool) {\n    case \"square\":\n      {\n        const dx = shape.x1 - shape.x0;\n        const dy = shape.y1 - shape.y0;\n        let w, h;\n        if (shape.isSquare) {\n          const side = Math.min(Math.abs(dx), Math.abs(dy));\n          w = dx < 0 ? -side : side;\n          h = dy < 0 ? -side : side;\n        } else {\n          w = dx;\n          h = dy;\n        }\n        ctx.fillRect(shape.x0 + offsetX, shape.y0 + offsetY, w, h);\n        ctx.strokeRect(shape.x0 + offsetX, shape.y0 + offsetY, w, h);\n        return;\n      }\n    case \"line\":\n      ctx.beginPath();\n      ctx.moveTo(x0, y0);\n      ctx.lineTo(x1, y1);\n      ctx.stroke();\n      return;\n    case \"circle\":\n      ctx.beginPath();\n      if (shape.isCircle) {\n        const r = Math.hypot(shape.x1 - shape.x0, shape.y1 - shape.y0);\n        ctx.arc(x0, y0, r, 0, 2 * Math.PI);\n      } else {\n        ctx.ellipse(x0, y0, Math.abs(shape.x1 - shape.x0), Math.abs(shape.y1 - shape.y0), 0, 0, 2 * Math.PI);\n      }\n      ctx.fill();\n      ctx.stroke();\n      return;\n    case \"triangle\":\n      ctx.beginPath();\n      ctx.moveTo(x0, y0);\n      ctx.lineTo(x1, y0);\n      ctx.lineTo((x0 + x1) / 2, y1);\n      ctx.closePath();\n      ctx.fill();\n      ctx.stroke();\n      return;\n    case \"polygon\":\n      ctx.beginPath();\n      const sides = 5;\n      const radius = Math.hypot(shape.x1 - shape.x0, shape.y1 - shape.y0);\n      for (let i = 0; i < sides; i++) {\n        const ang = i * (2 * Math.PI / sides) - Math.PI / 2;\n        const px = shape.x0 + offsetX + radius * Math.cos(ang);\n        const py = shape.y0 + offsetY + radius * Math.sin(ang);\n        if (i === 0) ctx.moveTo(px, py);else ctx.lineTo(px, py);\n      }\n      ctx.closePath();\n      ctx.fill();\n      ctx.stroke();\n      return;\n    case \"poly-line\":\n      if (shape.points && shape.points.length) {\n        ctx.beginPath();\n        ctx.moveTo(shape.points[0].x + offsetX, shape.points[0].y + offsetY);\n        for (let p of shape.points.slice(1)) ctx.lineTo(p.x + offsetX, p.y + offsetY);\n        ctx.stroke();\n      }\n      return;\n    case \"curve\":\n      if (shape.points && shape.points.length) {\n        ctx.beginPath();\n        const pts = shape.points;\n        ctx.moveTo(pts[0].x + offsetX, pts[0].y + offsetY);\n        for (let i = 1; i < pts.length; i++) {\n          const prev = pts[i - 1];\n          const curr = pts[i];\n          const mx = (prev.x + curr.x) / 2 + offsetX;\n          const my = (prev.y + curr.y) / 2 + offsetY;\n          ctx.quadraticCurveTo(prev.x + offsetX, prev.y + offsetY, mx, my);\n        }\n        const last = pts[pts.length - 1];\n        ctx.lineTo(last.x + offsetX, last.y + offsetY);\n        ctx.stroke();\n      }\n      return;\n    default:\n      ctx.save();\n      ctx.translate(cx, cy);\n      ctx.rotate(shape.rotation || 0);\n      ctx.translate(-cx, -cy);\n  }\n}\n\n// Draw selection handles\nfunction drawSelection(ctx, shape, offsetX = 0, offsetY = 0) {\n  const R = 5;\n  if (shape.tool === \"line\") {\n    const p0 = {\n      x: shape.x0 + offsetX,\n      y: shape.y0 + offsetY\n    };\n    const p1 = {\n      x: shape.x1 + offsetX,\n      y: shape.y1 + offsetY\n    };\n    ctx.fillStyle = \"white\";\n    ctx.fill();\n    ctx.beginPath();\n    ctx.moveTo(p0.x, p0.y);\n    ctx.lineTo(p1.x, p1.y);\n    ctx.stroke();\n    [p0, p1].forEach(pt => {\n      ctx.beginPath();\n      ctx.arc(pt.x, pt.y, R, 0, 2 * Math.PI);\n      ctx.fill();\n      ctx.stroke();\n    });\n    return;\n  }\n  const {\n    xMin,\n    yMin,\n    xMax,\n    yMax\n  } = getBBox(shape);\n  const midX = (xMin + xMax) / 2;\n  const rotY = yMin - 20;\n  ctx.beginPath();\n  ctx.moveTo(midX, yMin);\n  ctx.lineTo(midX, rotY);\n  ctx.stroke();\n\n  // circle grip\n  ctx.beginPath();\n  ctx.arc(midX, rotY, R, 0, 2 * Math.PI);\n  ctx.stroke();\n  ctx.strokeRect(xMin, yMin, xMax - xMin, yMax - yMin);\n  ctx.fillStyle = \"white\";\n  ctx.fill();\n  [{\n    x: xMin,\n    y: yMin\n  }, {\n    x: xMax,\n    y: yMin\n  }, {\n    x: xMax,\n    y: yMax\n  }, {\n    x: xMin,\n    y: yMax\n  }].forEach(pt => {\n    ctx.beginPath();\n    ctx.arc(pt.x, pt.y, R, 0, 2 * Math.PI);\n    ctx.fill();\n    ctx.stroke();\n  });\n}\nconst Canvas = /*#__PURE__*/_s(/*#__PURE__*/forwardRef(_c = _s(({\n  activeTool,\n  lineColor,\n  fillColor,\n  strokeWidth,\n  showGrid,\n  snapToGrid\n}, ref) => {\n  _s();\n  const containerRef = useRef(null);\n  const c1Ref = useRef(null);\n  const c2Ref = useRef(null);\n  const shapesRef = useRef([]);\n  const undoStack = useRef([]);\n  const redoStack = useRef([]);\n  const polyRef = useRef([]);\n  const curveRef = useRef([]);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [startPos, setStartPos] = useState({\n    x: 0,\n    y: 0\n  });\n  const dragRef = useRef({\n    isDragging: false,\n    isResizing: false,\n    prevPos: {\n      x: 0,\n      y: 0\n    },\n    shapeIndex: null,\n    handleIndex: null,\n    origShape: null,\n    origRotation: 0,\n    center: null,\n    startAngle: 0\n  });\n  const gridSize = 100; // match the same cell size you draw in drawGrid\n  const snap = ({\n    x,\n    y\n  }) => ({\n    x: Math.round(x / gridSize) * gridSize,\n    y: Math.round(y / gridSize) * gridSize\n  });\n  useImperativeHandle(ref, () => ({\n    exportShapes: () => {\n      shapesRef.current.forEach(s => s.selected = false);\n      const data = JSON.stringify(shapesRef.current, null, 2);\n      const blob = new Blob([data], {\n        type: \"application/json\"\n      });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement(\"a\");\n      a.href = url;\n      a.download = \"shapes.json\";\n      a.click();\n      URL.revokeObjectURL(url);\n    },\n    downloadJPEG: () => {\n      shapesRef.current.forEach(s => s.selected = false);\n      const shapes = shapesRef.current;\n      const pad = 20;\n      let minX = Infinity,\n        minY = Infinity;\n      let maxX = -Infinity,\n        maxY = -Infinity;\n      shapes.forEach(s => {\n        if (s.tool === \"circle\" || s.tool === \"polygon\") {\n          const r = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n          minX = Math.min(minX, s.x0 - r);\n          maxX = Math.max(maxX, s.x0 + r);\n          minY = Math.min(minY, s.y0 - r);\n          maxY = Math.max(maxY, s.y0 + r);\n        } else {\n          minX = Math.min(minX, s.x0, s.x1);\n          maxX = Math.max(maxX, s.x0, s.x1);\n          minY = Math.min(minY, s.y0, s.y1);\n          maxY = Math.max(maxY, s.y0, s.y1);\n        }\n      });\n      if (minX === Infinity) {\n        minX = 0;\n        minY = 0;\n        maxX = c1Ref.current.width;\n        maxY = c1Ref.current.height;\n      }\n      minX -= pad;\n      minY -= pad;\n      maxX += pad;\n      maxY += pad;\n      const sw = maxX - minX;\n      const sh = maxY - minY;\n      const tmp = document.createElement(\"canvas\");\n      tmp.width = sw;\n      tmp.height = sh;\n      redrawAll({\n        current: tmp\n      }, -minX, -minY, \"#ffffff\");\n      const dataURL = tmp.toDataURL(\"image/jpeg\", 1.0);\n      const link = document.createElement(\"a\");\n      link.href = dataURL;\n      link.download = \"shapes.jpg\";\n      link.click();\n    },\n    downloadPDF: () => {\n      shapesRef.current.forEach(s => s.selected = false);\n      const shapes = shapesRef.current;\n      const pad = 20;\n      let minX = Infinity,\n        minY = Infinity;\n      let maxX = -Infinity,\n        maxY = -Infinity;\n      shapes.forEach(s => {\n        if (s.tool === \"circle\" || s.tool === \"polygon\") {\n          const r = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n          minX = Math.min(minX, s.x0 - r);\n          maxX = Math.max(maxX, s.x0 + r);\n          minY = Math.min(minY, s.y0 - r);\n          maxY = Math.max(maxY, s.y0 + r);\n        } else {\n          minX = Math.min(minX, s.x0, s.x1);\n          maxX = Math.max(maxX, s.x0, s.x1);\n          minY = Math.min(minY, s.y0, s.y1);\n          maxY = Math.max(maxY, s.y0, s.y1);\n        }\n      });\n      if (minX === Infinity) {\n        minX = 0;\n        minY = 0;\n        maxX = c1Ref.current.width;\n        maxY = c1Ref.current.height;\n      }\n      minX -= pad;\n      minY -= pad;\n      maxX += pad;\n      maxY += pad;\n      const sw = maxX - minX;\n      const sh = maxY - minY;\n      const tmp = document.createElement(\"canvas\");\n      tmp.width = sw;\n      tmp.height = sh;\n      redrawAll({\n        current: tmp\n      }, -minX, -minY, \"#ffffff\");\n      const orientation = sw > sh ? \"landscape\" : \"portrait\";\n      const pdf = new jsPDF({\n        orientation,\n        unit: \"px\",\n        format: \"a4\"\n      });\n      const pageW = pdf.internal.pageSize.getWidth();\n      const pageH = pdf.internal.pageSize.getHeight();\n      const scale = Math.min(pageW / sw, pageH / sh);\n      let yOffset = 0;\n      while (yOffset < sh) {\n        const sliceH = Math.min(sh - yOffset, pageH / scale);\n        const slice = document.createElement(\"canvas\");\n        slice.width = sw;\n        slice.height = sliceH;\n        slice.getContext(\"2d\").drawImage(tmp, 0, yOffset, sw, sliceH, 0, 0, sw, sliceH);\n        const imgData = slice.toDataURL(\"image/jpeg\", 1.0);\n        const imgW = sw * scale,\n          imgH = sliceH * scale;\n        const xPos = (pageW - imgW) / 2;\n        pdf.addImage(imgData, \"JPEG\", xPos, 0, imgW, imgH);\n        yOffset += sliceH;\n        if (yOffset < sh) pdf.addPage();\n      }\n      pdf.save(\"shapes.pdf\");\n    },\n    loadShapes: arr => {\n      shapesRef.current = arr.map(s => ({\n        ...s,\n        selected: false\n      }));\n      redrawAll();\n    },\n    getShapeCount: () => shapesRef.current.length,\n    clearShapes: () => {\n      shapesRef.current = [];\n      redrawAll();\n    }\n  }));\n  useEffect(() => {\n    const resize = () => {\n      const {\n        width,\n        height\n      } = containerRef.current.getBoundingClientRect();\n      [c1Ref, c2Ref].forEach(r => {\n        r.current.width = width;\n        r.current.height = height;\n      });\n      redrawAll();\n    };\n    resize();\n    window.addEventListener(\"resize\", resize);\n    return () => window.removeEventListener(\"resize\", resize);\n  }, []);\n  useEffect(() => {\n    let dirty = false;\n    shapesRef.current.forEach(s => {\n      if (s.selected && (s.strokeWidth !== strokeWidth || s.lineColor !== lineColor || s.fillColor !== fillColor)) {\n        s.strokeWidth = strokeWidth;\n        s.lineColor = lineColor;\n        s.fillColor = fillColor;\n        dirty = true;\n      }\n    });\n    if (dirty) redrawAll();\n  }, [strokeWidth, lineColor, fillColor]);\n  function redrawAll(context = c1Ref, offsetX = 0, offsetY = 0, backgroundColor = \"#979797\") {\n    const c = context.current;\n    const ctx = c.getContext(\"2d\");\n    ctx.clearRect(0, 0, c.width, c.height);\n    // 1) paint background\n    ctx.fillStyle = backgroundColor;\n    ctx.fillRect(0, 0, c.width, c.height);\n    // 2) draw grid behind everything\n    if (showGrid) drawGrid(ctx, c.width, c.height, 100); // 50px cells, tweak as you like\n    shapesRef.current.forEach(s => {\n      ctx.save();\n      ctx.strokeStyle = s.lineColor || lineColor;\n      ctx.fillStyle = s.fillColor || fillColor;\n      ctx.lineWidth = s.strokeWidth || strokeWidth;\n      drawShape(ctx, s, offsetX, offsetY);\n      if (s.selected) {\n        ctx.save();\n        ctx.strokeStyle = \"#ff7300\";\n        ctx.lineWidth = 2;\n        drawSelection(ctx, s, offsetX, offsetY);\n        ctx.restore();\n      }\n      ctx.restore();\n    });\n  }\n  useEffect(() => {\n    redrawAll();\n  }, [showGrid]);\n  useEffect(() => {\n    const c2 = c2Ref.current;\n    const ctx2 = c2.getContext(\"2d\");\n    const getPos = e => {\n      const r = c2.getBoundingClientRect();\n      return {\n        x: e.clientX - r.left,\n        y: e.clientY - r.top\n      };\n    };\n    const down = e => {\n      let pos = getPos(e);\n      if (activeTool === \"cursor\") {\n        const ctx1 = c1Ref.current.getContext(\"2d\");\n        // clear previous selection\n        shapesRef.current.forEach(sh => sh.selected = false);\n\n        // walk shapes in reverse z-order\n        for (let i = shapesRef.current.length - 1; i >= 0; i--) {\n          const s = shapesRef.current[i];\n          const {\n            xMin,\n            yMin,\n            xMax,\n            yMax\n          } = getBBox(s);\n          const midX = (xMin + xMax) / 2;\n          const rotY = yMin - 20;\n          if (Math.hypot(pos.x - midX, pos.y - rotY) < 6) {\n            console.log(\"🔄 starting rotate for shape\", i);\n            s.selected = true;\n\n            // remember rotation state\n            dragRef.current = {\n              isRotating: true,\n              shapeIndex: i,\n              origRotation: s.rotation || 0,\n              // use the bounding‐box center, not (x0+x1)/2\n              center: {\n                x: midX,\n                y: (yMin + yMax) / 2\n              },\n              startAngle: Math.atan2(pos.y - (yMin + yMax) / 2, pos.x - midX)\n            };\n            redrawAll();\n            return; // bail out so you don’t also start a move or resize\n          }\n          if (!hitTest(ctx1, s, pos.x, pos.y, strokeWidth)) continue;\n\n          // 1) check for a corner-drag first\n          const corners = [{\n            x: xMin,\n            y: yMin\n          }, {\n            x: xMax,\n            y: yMin\n          }, {\n            x: xMax,\n            y: yMax\n          }, {\n            x: xMin,\n            y: yMax\n          }];\n          for (let h = 0; h < corners.length; h++) {\n            const dx = pos.x - corners[h].x;\n            const dy = pos.y - corners[h].y;\n            if (Math.hypot(dx, dy) < 6) {\n              // inside handle radius\n              s.selected = true;\n              dragRef.current = {\n                isResizing: true,\n                shapeIndex: i,\n                handleIndex: h,\n                origShape: JSON.parse(JSON.stringify(s))\n              };\n              redrawAll();\n              return; // don’t start a move-drag\n            }\n          }\n\n          // 2) if no corner, it’s a normal drag\n          s.selected = true;\n          dragRef.current = {\n            isDragging: true,\n            startPos: pos,\n            // where drag began\n            origShape: JSON.parse(JSON.stringify(s)),\n            // deep copy of original coords\n            shapeIndex: i\n          };\n          redrawAll();\n          return;\n        }\n\n        // clicked on empty space\n        redrawAll();\n        return;\n      }\n      if (activeTool === \"poly-line\") {\n        polyRef.current.push(pos);\n        setIsDrawing(true);\n        return;\n      }\n      if (activeTool === \"curve\") {\n        curveRef.current.push(pos);\n        setIsDrawing(true);\n        return;\n      }\n      if (![\"square\", \"line\", \"circle\", \"triangle\", \"polygon\"].includes(activeTool)) return;\n      setStartPos(pos);\n      setIsDrawing(true);\n    };\n    const move = e => {\n      let pos = getPos(e);\n      if (dragRef.current.isRotating) {\n        console.log(\"🖱️ rotating… angle delta =\", Math.atan2(pos.y - dragRef.current.center.y, pos.x - dragRef.current.center.x) - dragRef.current.startAngle);\n        const {\n          shapeIndex,\n          origRotation,\n          center,\n          startAngle\n        } = dragRef.current;\n        const target = shapesRef.current[shapeIndex];\n        const currPos = getPos(e);\n\n        // how far we’ve turned\n        const currentAngle = Math.atan2(currPos.y - center.y, currPos.x - center.x);\n        target.rotation = origRotation + (currentAngle - startAngle);\n        redrawAll();\n        return;\n      }\n      if (dragRef.current.isResizing) {\n        const {\n          shapeIndex,\n          handleIndex,\n          origShape\n        } = dragRef.current;\n        const target = shapesRef.current[shapeIndex];\n        const pos = getPos(e); // current mouse\n        const {\n          xMin,\n          yMin,\n          xMax,\n          yMax\n        } = getBBox(origShape);\n        const corners = [{\n          x: xMin,\n          y: yMin\n        }, {\n          x: xMax,\n          y: yMin\n        }, {\n          x: xMax,\n          y: yMax\n        }, {\n          x: xMin,\n          y: yMax\n        }];\n        const origHandle = corners[handleIndex];\n        const opposite = corners[(handleIndex + 2) % 4];\n        if (origShape.tool === \"line\") {\n          // for lines, just drag one endpoint\n          if (handleIndex === 0) {\n            target.x0 = pos.x;\n            target.y0 = pos.y;\n          } else {\n            target.x1 = pos.x;\n            target.y1 = pos.y;\n          }\n        } else if (origShape.tool === \"circle\" || origShape.tool === \"polygon\") {\n          // if you want perfect circle lock, compute r = hypot(...)\n          // but even for ellipses, you can just set the handle\n          target.x1 = pos.x;\n          target.y1 = pos.y;\n          redrawAll();\n          return;\n        } else {\n          // for everything else, scale about the opposite corner\n          const sx = (pos.x - opposite.x) / (origHandle.x - opposite.x);\n          const sy = (pos.y - opposite.y) / (origHandle.y - opposite.y);\n          if (origShape.points) {\n            // poly‐line & curve: scale each point\n            target.points = origShape.points.map(p => ({\n              x: opposite.x + (p.x - opposite.x) * sx,\n              y: opposite.y + (p.y - opposite.y) * sy\n            }));\n          } else {\n            // x0/y0 and x1/y1 shapes (rect, circle, square, triangle, polygon)\n            [\"x0\", \"y0\", \"x1\", \"y1\"].forEach(k => {\n              const coord = k.startsWith(\"x\") ? \"x\" : \"y\";\n              const o = origShape[k];\n              const off = opposite[coord];\n              target[k] = off + (o - off) * (coord === \"x\" ? sx : sy);\n            });\n          }\n        }\n        redrawAll();\n        return;\n      }\n      if (activeTool === \"cursor\" && dragRef.current.isDragging) {\n        const {\n          startPos,\n          origShape,\n          shapeIndex\n        } = dragRef.current;\n        const target = shapesRef.current[shapeIndex];\n\n        // 1) how far the mouse has moved since drag start\n        const dx = pos.x - startPos.x;\n        const dy = pos.y - startPos.y;\n\n        // 2) move the shape by that delta\n        if (origShape.points) {\n          // poly-line & curve\n          target.points = origShape.points.map(p => ({\n            x: p.x + dx,\n            y: p.y + dy\n          }));\n        } else {\n          // x0/y0 & x1/y1 shapes\n          target.x0 = origShape.x0 + dx;\n          target.y0 = origShape.y0 + dy;\n          target.x1 = origShape.x1 + dx;\n          target.y1 = origShape.y1 + dy;\n        }\n\n        // 3) now snap the bounding‐box top-left to grid\n        if (showGrid && e.shiftKey) {\n          const {\n            xMin,\n            yMin\n          } = getBBox(target);\n          const {\n            x: snapX,\n            y: snapY\n          } = snap({\n            x: xMin,\n            y: yMin\n          });\n          const offX = snapX - xMin;\n          const offY = snapY - yMin;\n          if (target.points) {\n            target.points.forEach(p => {\n              p.x += offX;\n              p.y += offY;\n            });\n          } else {\n            target.x0 += offX;\n            target.y0 += offY;\n            target.x1 += offX;\n            target.y1 += offY;\n          }\n        }\n        redrawAll();\n        return;\n      }\n      if (activeTool === \"poly-line\" && polyRef.current.length) {\n        ctx2.clearRect(0, 0, c2.width, c2.height);\n        ctx2.strokeStyle = lineColor;\n        ctx2.lineWidth = strokeWidth;\n        ctx2.beginPath();\n        ctx2.moveTo(polyRef.current[0].x, polyRef.current[0].y);\n        for (let p of polyRef.current.slice(1)) ctx2.lineTo(p.x, p.y);\n        ctx2.lineTo(pos.x, pos.y);\n        ctx2.stroke();\n        return;\n      }\n      if (activeTool === \"curve\" && curveRef.current.length) {\n        ctx2.clearRect(0, 0, c2.width, c2.height);\n        const pts = [...curveRef.current, pos];\n        const shape = {\n          tool: \"curve\",\n          points: pts,\n          strokeWidth,\n          lineColor\n        };\n        ctx2.lineWidth = shape.strokeWidth;\n        ctx2.strokeStyle = shape.lineColor;\n        drawShape(ctx2, shape, 0, 0);\n        return;\n      }\n      if (!isDrawing) return;\n      ctx2.clearRect(0, 0, c2.width, c2.height);\n      const {\n        x,\n        y\n      } = pos;\n      const shape = {\n        tool: activeTool,\n        x0: startPos.x,\n        y0: startPos.y,\n        x1: x,\n        y1: y,\n        isSquare: e.shiftKey && activeTool === \"square\",\n        isCircle: e.shiftKey && activeTool === \"circle\",\n        strokeWidth: 1,\n        lineColor: \"black\",\n        fillColor: \"transparent\"\n      };\n      ctx2.fillStyle = shape.fillColor;\n      ctx2.strokeStyle = shape.lineColor;\n      ctx2.lineWidth = shape.strokeWidth;\n      drawShape(ctx2, shape, 0, 0);\n    };\n    const up = e => {\n      if (dragRef.current.isRotating) {\n        // 1) grab rotation info\n        const {\n          shapeIndex,\n          center\n        } = dragRef.current;\n        const shape = shapesRef.current[shapeIndex];\n        dragRef.current.isRotating = false;\n        redrawAll();\n        return;\n      }\n      if (dragRef.current.isResizing) {\n        dragRef.current.isResizing = false;\n        dragRef.current.handleIndex = null;\n        dragRef.current.origShape = null;\n        return;\n      }\n      if (activeTool === \"cursor\" && dragRef.current.isDragging) {\n        dragRef.current.isDragging = false;\n        dragRef.current.shapeIndex = null;\n        return;\n      }\n      if ([\"poly-line\", \"curve\"].includes(activeTool)) return;\n      if (!isDrawing) return;\n      const pos = getPos(e);\n      if (pos.x === startPos.x && pos.y === startPos.y) {\n        ctx2.clearRect(0, 0, c2.width, c2.height);\n        setIsDrawing(false);\n        return;\n      }\n      const isCircle = activeTool === \"circle\" && e.shiftKey;\n      const isSquare = activeTool === \"square\" && e.shiftKey;\n      const newShape = {\n        tool: activeTool,\n        x0: startPos.x,\n        y0: startPos.y,\n        x1: pos.x,\n        y1: pos.y,\n        lineColor,\n        fillColor,\n        strokeWidth,\n        isCircle,\n        isSquare,\n        rotation: 0,\n        selected: false\n      };\n      shapesRef.current.push(newShape);\n      undoStack.current.push({\n        type: 'add',\n        shapes: [newShape]\n      });\n      // clear redoStack because it's a brand-new action\n      redoStack.current = [];\n      shapesRef.current.forEach(s => s.selected = false);\n      shapesRef.current[shapesRef.current.length - 1].selected = true;\n      redrawAll();\n      ctx2.clearRect(0, 0, c2.width, c2.height);\n      setIsDrawing(false);\n    };\n    const finishPoly = e => {\n      if (activeTool !== \"poly-line\" || polyRef.current.length < 2) return;\n      const newShape = {\n        tool: \"poly-line\",\n        points: polyRef.current.slice(),\n        lineColor,\n        fillColor,\n        strokeWidth,\n        selected: false\n      };\n      shapesRef.current.push(newShape);\n      undoStack.current.push({\n        type: 'add',\n        shapes: [newShape]\n      });\n      // clear redoStack because it's a brand-new action\n      redoStack.current = [];\n      shapesRef.current.forEach(s => s.selected = false);\n      shapesRef.current[shapesRef.current.length - 1].selected = true;\n      redrawAll();\n      ctx2.clearRect(0, 0, c2.width, c2.height);\n      polyRef.current = [];\n    };\n    const finishCurve = e => {\n      if (activeTool !== \"curve\" || curveRef.current.length < 2) return;\n\n      // 1. capture the final click\n      const pos = getPos(e);\n      curveRef.current.push(pos);\n\n      // 2. push the full point list\n      const newShape = {\n        tool: \"curve\",\n        points: curveRef.current.slice(),\n        lineColor,\n        fillColor,\n        strokeWidth,\n        selected: false\n      };\n      shapesRef.current.push(newShape);\n      undoStack.current.push({\n        type: 'add',\n        shapes: [newShape]\n      });\n      // clear redoStack because it's a brand-new action\n      redoStack.current = [];\n\n      // 3. rest stays the same\n      shapesRef.current.forEach(s => s.selected = false);\n      shapesRef.current[shapesRef.current.length - 1].selected = true;\n      redrawAll();\n      ctx2.clearRect(0, 0, c2.width, c2.height);\n\n      // 4. reset\n      curveRef.current = [];\n      setIsDrawing(false);\n    };\n    const onKeyDown = e => {\n      if (e.ctrlKey && !e.shiftKey && e.key.toLowerCase() === 'z') {\n        const action = undoStack.current.pop();\n        if (!action) return;\n        if (action.type === 'add') {\n          // remove the shape(s) that were added\n          shapesRef.current = shapesRef.current.filter(s => !action.shapes.includes(s));\n        } else if (action.type === 'delete') {\n          // re‐insert deleted shapes at their original positions\n          action.shapes.forEach((shape, i) => {\n            const idx = action.indices[i];\n            shapesRef.current.splice(idx, 0, shape);\n          });\n        }\n        redoStack.current.push(action);\n        redrawAll();\n      }\n\n      // REDO\n      else if (e.ctrlKey && e.shiftKey && e.key.toLowerCase() === 'z') {\n        const action = redoStack.current.pop();\n        if (!action) return;\n        if (action.type === 'add') {\n          // re‐add those shapes\n          shapesRef.current.push(...action.shapes);\n        } else if (action.type === 'delete') {\n          // re‐delete them\n          shapesRef.current = shapesRef.current.filter(s => !action.shapes.includes(s));\n        }\n        undoStack.current.push(action);\n        redrawAll();\n      } else if (e.key === \"Delete\") {\n        const deleted = shapesRef.current.filter(s => s.selected);\n        if (deleted.length) {\n          // remember their original indices if you care about insert order:\n          const indices = deleted.map(s => shapesRef.current.indexOf(s));\n          shapesRef.current = shapesRef.current.filter(s => !s.selected);\n          undoStack.current.push({\n            type: 'delete',\n            shapes: deleted,\n            indices\n          });\n          redoStack.current = [];\n          redrawAll();\n        }\n      }\n    };\n    c2.addEventListener(\"mousedown\", down);\n    c2.addEventListener(\"mousemove\", move);\n    c2.addEventListener(\"mouseup\", up);\n    c2.addEventListener(\"dblclick\", finishPoly);\n    c2.addEventListener(\"dblclick\", finishCurve);\n    window.addEventListener(\"keydown\", onKeyDown);\n    return () => {\n      c2.removeEventListener(\"mousedown\", down);\n      c2.removeEventListener(\"mousemove\", move);\n      c2.removeEventListener(\"mouseup\", up);\n      c2.removeEventListener(\"dblclick\", finishPoly);\n      c2.removeEventListener(\"dblclick\", finishCurve);\n      window.removeEventListener(\"keydown\", onKeyDown);\n    };\n  }, [activeTool, isDrawing, startPos, lineColor, fillColor, strokeWidth, showGrid, snapToGrid]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    className: \"canvas-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: c1Ref\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 863,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: c2Ref,\n      style: {\n        backgroundColor: \"transparent\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 864,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 862,\n    columnNumber: 9\n  }, this);\n}, \"54LGM42IYhvK02ZAJ0MTqe3eJDU=\")), \"54LGM42IYhvK02ZAJ0MTqe3eJDU=\");\n_c2 = Canvas;\nexport default Canvas;\nvar _c, _c2;\n$RefreshReg$(_c, \"Canvas$forwardRef\");\n$RefreshReg$(_c2, \"Canvas\");","map":{"version":3,"names":["React","forwardRef","useImperativeHandle","useRef","useEffect","useState","jsPDF","jsxDEV","_jsxDEV","drawGrid","ctx","width","height","cell","save","beginPath","strokeStyle","lineWidth","x","moveTo","lineTo","y","stroke","restore","rotatePoint","px","py","cx","cy","θ","dx","dy","c","Math","cos","s","sin","getBBox","shape","rotation","worldPoints","points","center","reduce","a","p","length","map","x0","x1","y0","y1","corners","xs","ys","xMin","min","yMin","xMax","max","yMax","hitTest","defaultStroke","path","Path2D","strokeWidth","tool","isPointInStroke","slice","drawShape","offsetX","offsetY","translate","rotate","w","h","isSquare","side","abs","fillRect","strokeRect","isCircle","r","hypot","arc","PI","ellipse","fill","closePath","sides","radius","i","ang","pts","prev","curr","mx","my","quadraticCurveTo","last","drawSelection","R","p0","p1","fillStyle","forEach","pt","midX","rotY","Canvas","_s","_c","activeTool","lineColor","fillColor","showGrid","snapToGrid","ref","containerRef","c1Ref","c2Ref","shapesRef","undoStack","redoStack","polyRef","curveRef","isDrawing","setIsDrawing","startPos","setStartPos","dragRef","isDragging","isResizing","prevPos","shapeIndex","handleIndex","origShape","origRotation","startAngle","gridSize","snap","round","exportShapes","current","selected","data","JSON","stringify","blob","Blob","type","url","URL","createObjectURL","document","createElement","href","download","click","revokeObjectURL","downloadJPEG","shapes","pad","minX","Infinity","minY","maxX","maxY","sw","sh","tmp","redrawAll","dataURL","toDataURL","link","downloadPDF","orientation","pdf","unit","format","pageW","internal","pageSize","getWidth","pageH","getHeight","scale","yOffset","sliceH","getContext","drawImage","imgData","imgW","imgH","xPos","addImage","addPage","loadShapes","arr","getShapeCount","clearShapes","resize","getBoundingClientRect","window","addEventListener","removeEventListener","dirty","context","backgroundColor","clearRect","c2","ctx2","getPos","e","clientX","left","clientY","top","down","pos","ctx1","console","log","isRotating","atan2","parse","push","includes","move","target","currPos","currentAngle","origHandle","opposite","sx","sy","k","coord","startsWith","o","off","shiftKey","snapX","snapY","offX","offY","up","newShape","finishPoly","finishCurve","onKeyDown","ctrlKey","key","toLowerCase","action","pop","filter","idx","indices","splice","deleted","indexOf","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","_c2","$RefreshReg$"],"sources":["/home/nightsquid/Desktop/Graphics 1/Shape-Editor/src/components/Canvas.js"],"sourcesContent":["import React, { forwardRef, useImperativeHandle, useRef, useEffect, useState } from \"react\";\nimport { jsPDF } from \"jspdf\";\nimport \"../css/canvas.css\";\n\n// --- Helper Functions ---\n// Draw a uniform grid of given cell size\nfunction drawGrid(ctx, width, height, cell) {\n    ctx.save();\n    ctx.beginPath();\n    ctx.strokeStyle = \"#ffffff3a\";    // light grey grid\n    ctx.lineWidth = 1;\n    // vertical\n    for (let x = 0; x <= width; x += cell) {\n        ctx.moveTo(x, 0);\n        ctx.lineTo(x, height);\n    }\n    // horizontal\n    for (let y = 0; y <= height; y += cell) {\n        ctx.moveTo(0, y);\n        ctx.lineTo(width, y);\n    }\n    ctx.stroke();\n    ctx.restore();\n}\n\n// --- Helper: rotate a point (px,py) around center (cx,cy) by θ radians\nfunction rotatePoint(px, py, cx, cy, θ) {\n    const dx = px - cx, dy = py - cy;\n    const c = Math.cos(θ), s = Math.sin(θ);\n    return {\n        x: c * dx - s * dy + cx,\n        y: s * dx + c * dy + cy\n    };\n}\n\nfunction getBBox(shape) {\n    const θ = shape.rotation || 0;\n\n    // 1) figure out the world-coords of each “corner” or defining point\n    let worldPoints;\n    if (shape.points) {\n        // polyline / free-form shape\n        const center = {\n            x: (shape.points.reduce((a, p) => a + p.x, 0) / shape.points.length),\n            y: (shape.points.reduce((a, p) => a + p.y, 0) / shape.points.length)\n        };\n        worldPoints = shape.points.map(p =>\n            rotatePoint(p.x, p.y, center.x, center.y, θ)\n        );\n    } else {\n        // rectangle / circle‐bounding‐box shapes\n        const cx = (shape.x0 + shape.x1) / 2;\n        const cy = (shape.y0 + shape.y1) / 2;\n        const corners = [\n            { x: shape.x0, y: shape.y0 },\n            { x: shape.x1, y: shape.y0 },\n            { x: shape.x1, y: shape.y1 },\n            { x: shape.x0, y: shape.y1 }\n        ];\n        worldPoints = corners.map(c => rotatePoint(c.x, c.y, cx, cy, θ));\n    }\n\n    // 2) axis-align that rotated set\n    const xs = worldPoints.map(p => p.x);\n    const ys = worldPoints.map(p => p.y);\n    return {\n        xMin: Math.min(...xs),\n        yMin: Math.min(...ys),\n        xMax: Math.max(...xs),\n        yMax: Math.max(...ys)\n    };\n}\n\n\n// Hit-test a point against any shape (strokes for lines, box for others)\nfunction hitTest(ctx, shape, x, y, defaultStroke) {\n    const path = new Path2D();\n    ctx.lineWidth = (shape.strokeWidth || defaultStroke) + 8;\n    switch (shape.tool) {\n        case \"line\":\n            path.moveTo(shape.x0, shape.y0);\n            path.lineTo(shape.x1, shape.y1);\n            return ctx.isPointInStroke(path, x, y);\n        case \"poly-line\":\n        case \"curve\":\n            if (shape.points && shape.points.length > 1) {\n                path.moveTo(shape.points[0].x, shape.points[0].y);\n                for (let p of shape.points.slice(1)) path.lineTo(p.x, p.y);\n                return ctx.isPointInStroke(path, x, y);\n            }\n            return false;\n        default:\n            const { xMin, yMin, xMax, yMax } = getBBox(shape);\n            return x >= xMin && x <= xMax && y >= yMin && y <= yMax;\n    }\n}\n\n// Draw a shape onto the canvas context\nfunction drawShape(ctx, shape, offsetX = 0, offsetY = 0) {\n    const x0 = shape.x0 + offsetX;\n    const y0 = shape.y0 + offsetY;\n    const x1 = shape.x1 + offsetX;\n    const y1 = shape.y1 + offsetY;\n\n    const { xMin, yMin, xMax, yMax } = getBBox(shape);\n    const cx = (xMin + xMax) / 2 + offsetX;\n    const cy = (yMin + yMax) / 2 + offsetY;\n\n    ctx.save();\n    ctx.translate(cx, cy);\n    ctx.rotate(shape.rotation || 0);\n    ctx.translate(-cx, -cy);\n\n    switch (shape.tool) {\n        case \"square\": {\n            const dx = shape.x1 - shape.x0;\n            const dy = shape.y1 - shape.y0;\n            let w, h;\n            if (shape.isSquare) {\n                const side = Math.min(Math.abs(dx), Math.abs(dy));\n                w = dx < 0 ? -side : side;\n                h = dy < 0 ? -side : side;\n            } else {\n                w = dx;\n                h = dy;\n            }\n            ctx.fillRect(shape.x0 + offsetX, shape.y0 + offsetY, w, h);\n            ctx.strokeRect(shape.x0 + offsetX, shape.y0 + offsetY, w, h);\n            return;\n        }\n        case \"line\":\n            ctx.beginPath();\n            ctx.moveTo(x0, y0);\n            ctx.lineTo(x1, y1);\n            ctx.stroke();\n            return;\n        case \"circle\":\n            ctx.beginPath();\n            if (shape.isCircle) {\n                const r = Math.hypot(shape.x1 - shape.x0, shape.y1 - shape.y0);\n                ctx.arc(x0, y0, r, 0, 2 * Math.PI);\n            } else {\n                ctx.ellipse(x0, y0, Math.abs(shape.x1 - shape.x0), Math.abs(shape.y1 - shape.y0), 0, 0, 2 * Math.PI);\n            }\n            ctx.fill();\n            ctx.stroke();\n            return;\n        case \"triangle\":\n            ctx.beginPath();\n            ctx.moveTo(x0, y0);\n            ctx.lineTo(x1, y0);\n            ctx.lineTo((x0 + x1) / 2, y1);\n            ctx.closePath();\n            ctx.fill();\n            ctx.stroke();\n            return;\n        case \"polygon\":\n            ctx.beginPath();\n            const sides = 5;\n            const radius = Math.hypot(shape.x1 - shape.x0, shape.y1 - shape.y0);\n            for (let i = 0; i < sides; i++) {\n                const ang = i * (2 * Math.PI / sides) - Math.PI / 2;\n                const px = shape.x0 + offsetX + radius * Math.cos(ang);\n                const py = shape.y0 + offsetY + radius * Math.sin(ang);\n                if (i === 0) ctx.moveTo(px, py);\n                else ctx.lineTo(px, py);\n            }\n            ctx.closePath();\n            ctx.fill();\n            ctx.stroke();\n            return;\n        case \"poly-line\":\n            if (shape.points && shape.points.length) {\n                ctx.beginPath();\n                ctx.moveTo(shape.points[0].x + offsetX, shape.points[0].y + offsetY);\n                for (let p of shape.points.slice(1)) ctx.lineTo(p.x + offsetX, p.y + offsetY);\n                ctx.stroke();\n            }\n            return;\n        case \"curve\":\n            if (shape.points && shape.points.length) {\n                ctx.beginPath();\n                const pts = shape.points;\n                ctx.moveTo(pts[0].x + offsetX, pts[0].y + offsetY);\n                for (let i = 1; i < pts.length; i++) {\n                    const prev = pts[i - 1];\n                    const curr = pts[i];\n                    const mx = (prev.x + curr.x) / 2 + offsetX;\n                    const my = (prev.y + curr.y) / 2 + offsetY;\n                    ctx.quadraticCurveTo(prev.x + offsetX, prev.y + offsetY, mx, my);\n                }\n\n                const last = pts[pts.length - 1];\n                ctx.lineTo(last.x + offsetX, last.y + offsetY);\n\n                ctx.stroke();\n            }\n            return;\n        default:\n            ctx.save();\n            ctx.translate(cx, cy);\n            ctx.rotate(shape.rotation || 0);\n            ctx.translate(-cx, -cy);\n\n    }\n}\n\n// Draw selection handles\nfunction drawSelection(ctx, shape, offsetX = 0, offsetY = 0) {\n    const R = 5;\n    if (shape.tool === \"line\") {\n        const p0 = { x: shape.x0 + offsetX, y: shape.y0 + offsetY };\n        const p1 = { x: shape.x1 + offsetX, y: shape.y1 + offsetY };\n        ctx.fillStyle = \"white\";\n        ctx.fill();\n        ctx.beginPath(); ctx.moveTo(p0.x, p0.y); ctx.lineTo(p1.x, p1.y); ctx.stroke();\n        [p0, p1].forEach(pt => {\n            ctx.beginPath(); ctx.arc(pt.x, pt.y, R, 0, 2 * Math.PI); ctx.fill(); ctx.stroke();\n        });\n        return;\n    }\n    const { xMin, yMin, xMax, yMax } = getBBox(shape);\n    const midX = (xMin + xMax) / 2;\n    const rotY = yMin - 20;\n    ctx.beginPath();\n    ctx.moveTo(midX, yMin);\n    ctx.lineTo(midX, rotY);\n    ctx.stroke();\n\n    // circle grip\n    ctx.beginPath();\n    ctx.arc(midX, rotY, R, 0, 2 * Math.PI);\n\n    ctx.stroke();\n    ctx.strokeRect(xMin, yMin, xMax - xMin, yMax - yMin);\n    ctx.fillStyle = \"white\";\n    ctx.fill();\n    [\n        { x: xMin, y: yMin },\n        { x: xMax, y: yMin },\n        { x: xMax, y: yMax },\n        { x: xMin, y: yMax }\n    ].forEach(pt => {\n        ctx.beginPath(); ctx.arc(pt.x, pt.y, R, 0, 2 * Math.PI); ctx.fill(); ctx.stroke();\n    });\n}\n\nconst Canvas = forwardRef(({ activeTool, lineColor, fillColor, strokeWidth, showGrid, snapToGrid }, ref) => {\n    const containerRef = useRef(null);\n    const c1Ref = useRef(null);\n    const c2Ref = useRef(null);\n    const shapesRef = useRef([]);\n    const undoStack = useRef([]);\n    const redoStack = useRef([]);\n    const polyRef = useRef([]);\n    const curveRef = useRef([]);\n    const [isDrawing, setIsDrawing] = useState(false);\n    const [startPos, setStartPos] = useState({ x: 0, y: 0 });\n    const dragRef = useRef({\n        isDragging: false,\n        isResizing: false,\n        prevPos: { x: 0, y: 0 },\n        shapeIndex: null,\n        handleIndex: null,\n        origShape: null,\n        origRotation: 0,\n        center: null,\n        startAngle: 0\n    });\n    const gridSize = 100; // match the same cell size you draw in drawGrid\n    const snap = ({ x, y }) => ({\n        x: Math.round(x / gridSize) * gridSize,\n        y: Math.round(y / gridSize) * gridSize\n    });\n\n    useImperativeHandle(ref, () => ({\n        exportShapes: () => {\n            shapesRef.current.forEach(s => (s.selected = false));\n            const data = JSON.stringify(shapesRef.current, null, 2);\n            const blob = new Blob([data], { type: \"application/json\" });\n            const url = URL.createObjectURL(blob);\n            const a = document.createElement(\"a\");\n            a.href = url; a.download = \"shapes.json\"; a.click();\n            URL.revokeObjectURL(url);\n        },\n        downloadJPEG: () => {\n            shapesRef.current.forEach(s => (s.selected = false));\n            const shapes = shapesRef.current;\n            const pad = 20;\n            let minX = Infinity, minY = Infinity;\n            let maxX = -Infinity, maxY = -Infinity;\n            shapes.forEach(s => {\n                if (s.tool === \"circle\" || s.tool === \"polygon\") {\n                    const r = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n                    minX = Math.min(minX, s.x0 - r);\n                    maxX = Math.max(maxX, s.x0 + r);\n                    minY = Math.min(minY, s.y0 - r);\n                    maxY = Math.max(maxY, s.y0 + r);\n                } else {\n                    minX = Math.min(minX, s.x0, s.x1);\n                    maxX = Math.max(maxX, s.x0, s.x1);\n                    minY = Math.min(minY, s.y0, s.y1);\n                    maxY = Math.max(maxY, s.y0, s.y1);\n                }\n            });\n            if (minX === Infinity) {\n                minX = 0; minY = 0;\n                maxX = c1Ref.current.width;\n                maxY = c1Ref.current.height;\n            }\n            minX -= pad; minY -= pad; maxX += pad; maxY += pad;\n            const sw = maxX - minX;\n            const sh = maxY - minY;\n            const tmp = document.createElement(\"canvas\");\n            tmp.width = sw; tmp.height = sh;\n            redrawAll({ current: tmp }, -minX, -minY, \"#ffffff\");\n            const dataURL = tmp.toDataURL(\"image/jpeg\", 1.0);\n            const link = document.createElement(\"a\");\n            link.href = dataURL;\n            link.download = \"shapes.jpg\";\n            link.click();\n        },\n        downloadPDF: () => {\n            shapesRef.current.forEach(s => (s.selected = false));\n            const shapes = shapesRef.current;\n            const pad = 20;\n            let minX = Infinity, minY = Infinity;\n            let maxX = -Infinity, maxY = -Infinity;\n            shapes.forEach(s => {\n                if (s.tool === \"circle\" || s.tool === \"polygon\") {\n                    const r = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n                    minX = Math.min(minX, s.x0 - r);\n                    maxX = Math.max(maxX, s.x0 + r);\n                    minY = Math.min(minY, s.y0 - r);\n                    maxY = Math.max(maxY, s.y0 + r);\n                } else {\n                    minX = Math.min(minX, s.x0, s.x1);\n                    maxX = Math.max(maxX, s.x0, s.x1);\n                    minY = Math.min(minY, s.y0, s.y1);\n                    maxY = Math.max(maxY, s.y0, s.y1);\n                }\n            });\n            if (minX === Infinity) {\n                minX = 0; minY = 0;\n                maxX = c1Ref.current.width;\n                maxY = c1Ref.current.height;\n            }\n            minX -= pad; minY -= pad; maxX += pad; maxY += pad;\n            const sw = maxX - minX;\n            const sh = maxY - minY;\n            const tmp = document.createElement(\"canvas\");\n            tmp.width = sw; tmp.height = sh;\n            redrawAll({ current: tmp }, -minX, -minY, \"#ffffff\");\n            const orientation = sw > sh ? \"landscape\" : \"portrait\";\n            const pdf = new jsPDF({ orientation, unit: \"px\", format: \"a4\" });\n            const pageW = pdf.internal.pageSize.getWidth();\n            const pageH = pdf.internal.pageSize.getHeight();\n            const scale = Math.min(pageW / sw, pageH / sh);\n            let yOffset = 0;\n            while (yOffset < sh) {\n                const sliceH = Math.min(sh - yOffset, pageH / scale);\n                const slice = document.createElement(\"canvas\");\n                slice.width = sw; slice.height = sliceH;\n                slice.getContext(\"2d\").drawImage(\n                    tmp,\n                    0, yOffset, sw, sliceH,\n                    0, 0, sw, sliceH\n                );\n                const imgData = slice.toDataURL(\"image/jpeg\", 1.0);\n                const imgW = sw * scale, imgH = sliceH * scale;\n                const xPos = (pageW - imgW) / 2;\n                pdf.addImage(imgData, \"JPEG\", xPos, 0, imgW, imgH);\n                yOffset += sliceH;\n                if (yOffset < sh) pdf.addPage();\n            }\n            pdf.save(\"shapes.pdf\");\n        },\n        loadShapes: (arr) => { shapesRef.current = arr.map(s => ({ ...s, selected: false })); redrawAll(); },\n        getShapeCount: () => shapesRef.current.length,\n        clearShapes: () => { shapesRef.current = []; redrawAll(); }\n    }));\n\n    useEffect(() => {\n        const resize = () => {\n            const { width, height } = containerRef.current.getBoundingClientRect();\n            [c1Ref, c2Ref].forEach(r => { r.current.width = width; r.current.height = height; });\n            redrawAll();\n        };\n        resize(); window.addEventListener(\"resize\", resize);\n        return () => window.removeEventListener(\"resize\", resize);\n    }, []);\n\n    useEffect(() => {\n        let dirty = false;\n        shapesRef.current.forEach(s => {\n            if (s.selected && (s.strokeWidth !== strokeWidth || s.lineColor !== lineColor || s.fillColor !== fillColor)) {\n                s.strokeWidth = strokeWidth;\n                s.lineColor = lineColor;\n                s.fillColor = fillColor;\n                dirty = true;\n            }\n        });\n        if (dirty) redrawAll();\n    }, [strokeWidth, lineColor, fillColor]);\n\n    function redrawAll(context = c1Ref, offsetX = 0, offsetY = 0, backgroundColor = \"#979797\") {\n        const c = context.current;\n        const ctx = c.getContext(\"2d\");\n        ctx.clearRect(0, 0, c.width, c.height);\n        // 1) paint background\n        ctx.fillStyle = backgroundColor;\n        ctx.fillRect(0, 0, c.width, c.height);\n        // 2) draw grid behind everything\n        if (showGrid) drawGrid(ctx, c.width, c.height, 100);   // 50px cells, tweak as you like\n        shapesRef.current.forEach(s => {\n            ctx.save();\n            ctx.strokeStyle = s.lineColor || lineColor;\n            ctx.fillStyle = s.fillColor || fillColor;\n            ctx.lineWidth = s.strokeWidth || strokeWidth;\n            drawShape(ctx, s, offsetX, offsetY);\n            if (s.selected) {\n                ctx.save(); ctx.strokeStyle = \"#ff7300\"; ctx.lineWidth = 2;\n                drawSelection(ctx, s, offsetX, offsetY);\n                ctx.restore();\n            }\n            ctx.restore();\n        });\n    }\n    useEffect(() => {\n        redrawAll();\n    }, [showGrid]);\n\n    useEffect(() => {\n        const c2 = c2Ref.current;\n        const ctx2 = c2.getContext(\"2d\");\n        const getPos = e => {\n            const r = c2.getBoundingClientRect();\n            return { x: e.clientX - r.left, y: e.clientY - r.top };\n        };\n\n        const down = e => {\n            let pos = getPos(e);\n            if (activeTool === \"cursor\") {\n                const ctx1 = c1Ref.current.getContext(\"2d\");\n                // clear previous selection\n                shapesRef.current.forEach(sh => sh.selected = false);\n\n                // walk shapes in reverse z-order\n                for (let i = shapesRef.current.length - 1; i >= 0; i--) {\n                    const s = shapesRef.current[i];\n\n                    const { xMin, yMin, xMax, yMax } = getBBox(s);\n                    const midX = (xMin + xMax) / 2;\n                    const rotY = yMin - 20;\n\n                    if (Math.hypot(pos.x - midX, pos.y - rotY) < 6) {\n                        console.log(\"🔄 starting rotate for shape\", i);\n                        s.selected = true;\n\n                        // remember rotation state\n                        dragRef.current = {\n                            isRotating: true,\n                            shapeIndex: i,\n                            origRotation: s.rotation || 0,\n                            // use the bounding‐box center, not (x0+x1)/2\n                            center: { x: midX, y: (yMin + yMax) / 2 },\n                            startAngle: Math.atan2(\n                                pos.y - ((yMin + yMax) / 2),\n                                pos.x - midX\n                            )\n                        };\n\n                        redrawAll();\n                        return;    // bail out so you don’t also start a move or resize\n                    }\n\n                    if (!hitTest(ctx1, s, pos.x, pos.y, strokeWidth)) continue;\n\n                    // 1) check for a corner-drag first\n                    const corners = [\n                        { x: xMin, y: yMin },\n                        { x: xMax, y: yMin },\n                        { x: xMax, y: yMax },\n                        { x: xMin, y: yMax }\n                    ];\n                    for (let h = 0; h < corners.length; h++) {\n                        const dx = pos.x - corners[h].x;\n                        const dy = pos.y - corners[h].y;\n                        if (Math.hypot(dx, dy) < 6) {        // inside handle radius\n                            s.selected = true;\n                            dragRef.current = {\n                                isResizing: true,\n                                shapeIndex: i,\n                                handleIndex: h,\n                                origShape: JSON.parse(JSON.stringify(s))\n                            };\n                            redrawAll();\n                            return;  // don’t start a move-drag\n                        }\n                    }\n\n                    // 2) if no corner, it’s a normal drag\n                    s.selected = true;\n                    dragRef.current = {\n                        isDragging: true,\n                        startPos: pos,                                // where drag began\n                        origShape: JSON.parse(JSON.stringify(s)),     // deep copy of original coords\n                        shapeIndex: i\n                    };\n                    redrawAll();\n                    return;\n                }\n\n                // clicked on empty space\n                redrawAll();\n                return;\n            }\n            if (activeTool === \"poly-line\") { polyRef.current.push(pos); setIsDrawing(true); return; }\n            if (activeTool === \"curve\") { curveRef.current.push(pos); setIsDrawing(true); return; }\n            if (![\"square\", \"line\", \"circle\", \"triangle\", \"polygon\"].includes(activeTool)) return;\n            setStartPos(pos);\n            setIsDrawing(true);\n        };\n\n        const move = e => {\n            let pos = getPos(e);\n            if (dragRef.current.isRotating) {\n                console.log(\"🖱️ rotating… angle delta =\", (Math.atan2(pos.y - dragRef.current.center.y,\n                    pos.x - dragRef.current.center.x)\n                    - dragRef.current.startAngle));\n                const { shapeIndex, origRotation, center, startAngle } = dragRef.current;\n                const target = shapesRef.current[shapeIndex];\n                const currPos = getPos(e);\n\n                // how far we’ve turned\n                const currentAngle = Math.atan2(currPos.y - center.y, currPos.x - center.x);\n                target.rotation = origRotation + (currentAngle - startAngle);\n\n                redrawAll();\n                return;\n            }\n            if (dragRef.current.isResizing) {\n                const { shapeIndex, handleIndex, origShape } = dragRef.current;\n                const target = shapesRef.current[shapeIndex];\n                const pos = getPos(e);             // current mouse\n                const { xMin, yMin, xMax, yMax } = getBBox(origShape);\n                const corners = [\n                    { x: xMin, y: yMin },\n                    { x: xMax, y: yMin },\n                    { x: xMax, y: yMax },\n                    { x: xMin, y: yMax }\n                ];\n                const origHandle = corners[handleIndex];\n                const opposite = corners[(handleIndex + 2) % 4];\n\n                if (origShape.tool === \"line\") {\n                    // for lines, just drag one endpoint\n                    if (handleIndex === 0) {\n                        target.x0 = pos.x; target.y0 = pos.y;\n                    } else {\n                        target.x1 = pos.x; target.y1 = pos.y;\n                    }\n                } else if (origShape.tool === \"circle\" || origShape.tool === \"polygon\") {\n                    // if you want perfect circle lock, compute r = hypot(...)\n                    // but even for ellipses, you can just set the handle\n                    target.x1 = pos.x;\n                    target.y1 = pos.y;\n                    redrawAll();\n                    return;\n                } else {\n                    // for everything else, scale about the opposite corner\n                    const sx = (pos.x - opposite.x) / (origHandle.x - opposite.x);\n                    const sy = (pos.y - opposite.y) / (origHandle.y - opposite.y);\n\n                    if (origShape.points) {\n                        // poly‐line & curve: scale each point\n                        target.points = origShape.points.map(p => ({\n                            x: opposite.x + (p.x - opposite.x) * sx,\n                            y: opposite.y + (p.y - opposite.y) * sy\n                        }));\n                    } else {\n                        // x0/y0 and x1/y1 shapes (rect, circle, square, triangle, polygon)\n                        [\"x0\", \"y0\", \"x1\", \"y1\"].forEach(k => {\n                            const coord = k.startsWith(\"x\") ? \"x\" : \"y\";\n                            const o = origShape[k];\n                            const off = opposite[coord];\n                            target[k] = off + (o - off) * (coord === \"x\" ? sx : sy);\n                        });\n                    }\n                }\n\n                redrawAll();\n                return;\n            }\n            if (activeTool === \"cursor\" && dragRef.current.isDragging) {\n                const { startPos, origShape, shapeIndex } = dragRef.current;\n                const target = shapesRef.current[shapeIndex];\n\n                // 1) how far the mouse has moved since drag start\n                const dx = pos.x - startPos.x;\n                const dy = pos.y - startPos.y;\n\n                // 2) move the shape by that delta\n                if (origShape.points) {\n                    // poly-line & curve\n                    target.points = origShape.points.map(p => ({\n                        x: p.x + dx,\n                        y: p.y + dy\n                    }));\n                } else {\n                    // x0/y0 & x1/y1 shapes\n                    target.x0 = origShape.x0 + dx;\n                    target.y0 = origShape.y0 + dy;\n                    target.x1 = origShape.x1 + dx;\n                    target.y1 = origShape.y1 + dy;\n                }\n\n                // 3) now snap the bounding‐box top-left to grid\n                if (showGrid && e.shiftKey) {\n                    const { xMin, yMin } = getBBox(target);\n                    const { x: snapX, y: snapY } = snap({ x: xMin, y: yMin });\n                    const offX = snapX - xMin;\n                    const offY = snapY - yMin;\n\n                    if (target.points) {\n                        target.points.forEach(p => {\n                            p.x += offX;\n                            p.y += offY;\n                        });\n                    } else {\n                        target.x0 += offX; target.y0 += offY;\n                        target.x1 += offX; target.y1 += offY;\n                    }\n                }\n\n                redrawAll();\n                return;\n            }\n\n            if (activeTool === \"poly-line\" && polyRef.current.length) {\n                ctx2.clearRect(0, 0, c2.width, c2.height);\n                ctx2.strokeStyle = lineColor; ctx2.lineWidth = strokeWidth;\n                ctx2.beginPath(); ctx2.moveTo(polyRef.current[0].x, polyRef.current[0].y);\n                for (let p of polyRef.current.slice(1)) ctx2.lineTo(p.x, p.y);\n                ctx2.lineTo(pos.x, pos.y); ctx2.stroke(); return;\n            }\n            if (activeTool === \"curve\" && curveRef.current.length) {\n                ctx2.clearRect(0, 0, c2.width, c2.height);\n                const pts = [...curveRef.current, pos];\n                const shape = {\n                    tool: \"curve\",\n                    points: pts,\n                    strokeWidth,\n                    lineColor,\n                };\n                ctx2.lineWidth = shape.strokeWidth;\n                ctx2.strokeStyle = shape.lineColor;\n                drawShape(ctx2, shape, 0, 0);\n                return;\n            }\n            if (!isDrawing) return;\n            ctx2.clearRect(0, 0, c2.width, c2.height);\n            const { x, y } = pos;\n\n            const shape = {\n                tool: activeTool,\n                x0: startPos.x,\n                y0: startPos.y,\n                x1: x,\n                y1: y,\n                isSquare: e.shiftKey && activeTool === \"square\",\n                isCircle: e.shiftKey && activeTool === \"circle\",\n                strokeWidth: 1,\n                lineColor: \"black\",\n                fillColor: \"transparent\"\n            }\n            ctx2.fillStyle = shape.fillColor;\n            ctx2.strokeStyle = shape.lineColor;\n            ctx2.lineWidth = shape.strokeWidth;\n\n            drawShape(ctx2, shape, 0, 0);\n        };\n\n        const up = e => {\n            if (dragRef.current.isRotating) {\n                // 1) grab rotation info\n                const { shapeIndex, center } = dragRef.current;\n                const shape = shapesRef.current[shapeIndex];\n\n                dragRef.current.isRotating = false;\n\n                redrawAll();\n                return;\n            }\n            if (dragRef.current.isResizing) {\n                dragRef.current.isResizing = false;\n                dragRef.current.handleIndex = null;\n                dragRef.current.origShape = null;\n                return;\n            }\n            if (activeTool === \"cursor\" && dragRef.current.isDragging) {\n                dragRef.current.isDragging = false;\n                dragRef.current.shapeIndex = null;\n                return;\n            }\n            if ([\"poly-line\", \"curve\"].includes(activeTool)) return;\n            if (!isDrawing) return;\n            const pos = getPos(e);\n            if (pos.x === startPos.x && pos.y === startPos.y) {\n                ctx2.clearRect(0, 0, c2.width, c2.height);\n                setIsDrawing(false);\n                return;\n            }\n            const isCircle = activeTool === \"circle\" && e.shiftKey;\n            const isSquare = activeTool === \"square\" && e.shiftKey;\n\n            const newShape = {\n                tool: activeTool,\n                x0: startPos.x, y0: startPos.y,\n                x1: pos.x, y1: pos.y,\n                lineColor, fillColor, strokeWidth,\n                isCircle, isSquare,\n                rotation: 0,\n                selected: false\n            };\n\n            shapesRef.current.push(newShape);\n\n            undoStack.current.push({ type: 'add', shapes: [newShape] });\n            // clear redoStack because it's a brand-new action\n            redoStack.current = [];\n\n            shapesRef.current.forEach(s => (s.selected = false));\n            shapesRef.current[shapesRef.current.length - 1].selected = true;\n            redrawAll();\n            ctx2.clearRect(0, 0, c2.width, c2.height);\n            setIsDrawing(false);\n        };\n\n        const finishPoly = e => {\n            if (activeTool !== \"poly-line\" || polyRef.current.length < 2) return;\n            const newShape = {\n                tool: \"poly-line\",\n                points: polyRef.current.slice(),\n                lineColor, fillColor, strokeWidth,\n                selected: false\n            };\n            shapesRef.current.push(newShape);\n\n            undoStack.current.push({ type: 'add', shapes: [newShape] });\n            // clear redoStack because it's a brand-new action\n            redoStack.current = [];\n\n            shapesRef.current.forEach(s => (s.selected = false));\n            shapesRef.current[shapesRef.current.length - 1].selected = true;\n            redrawAll();\n            ctx2.clearRect(0, 0, c2.width, c2.height);\n            polyRef.current = [];\n        };\n\n        const finishCurve = e => {\n            if (activeTool !== \"curve\" || curveRef.current.length < 2) return;\n\n            // 1. capture the final click\n            const pos = getPos(e);\n            curveRef.current.push(pos);\n\n            // 2. push the full point list\n            const newShape = {\n                tool: \"curve\",\n                points: curveRef.current.slice(),\n                lineColor, fillColor, strokeWidth,\n                selected: false\n            };\n            shapesRef.current.push(newShape);\n\n            undoStack.current.push({ type: 'add', shapes: [newShape] });\n            // clear redoStack because it's a brand-new action\n            redoStack.current = [];\n\n            // 3. rest stays the same\n            shapesRef.current.forEach(s => (s.selected = false));\n            shapesRef.current[shapesRef.current.length - 1].selected = true;\n            redrawAll();\n            ctx2.clearRect(0, 0, c2.width, c2.height);\n\n            // 4. reset\n            curveRef.current = [];\n            setIsDrawing(false);\n        };\n\n        const onKeyDown = e => {\n            if (e.ctrlKey && !e.shiftKey && e.key.toLowerCase() === 'z') {\n                const action = undoStack.current.pop();\n                if (!action) return;\n\n                if (action.type === 'add') {\n                    // remove the shape(s) that were added\n                    shapesRef.current = shapesRef.current.filter(\n                        s => !action.shapes.includes(s)\n                    );\n                } else if (action.type === 'delete') {\n                    // re‐insert deleted shapes at their original positions\n                    action.shapes.forEach((shape, i) => {\n                        const idx = action.indices[i];\n                        shapesRef.current.splice(idx, 0, shape);\n                    });\n                }\n\n                redoStack.current.push(action);\n                redrawAll();\n            }\n\n            // REDO\n            else if (e.ctrlKey && e.shiftKey && e.key.toLowerCase() === 'z') {\n                const action = redoStack.current.pop();\n                if (!action) return;\n\n                if (action.type === 'add') {\n                    // re‐add those shapes\n                    shapesRef.current.push(...action.shapes);\n                } else if (action.type === 'delete') {\n                    // re‐delete them\n                    shapesRef.current = shapesRef.current.filter(\n                        s => !action.shapes.includes(s)\n                    );\n                }\n\n                undoStack.current.push(action);\n                redrawAll();\n            }\n            else if (e.key === \"Delete\") {\n                const deleted = shapesRef.current.filter(s => s.selected);\n                if (deleted.length) {\n                    // remember their original indices if you care about insert order:\n                    const indices = deleted.map(s => shapesRef.current.indexOf(s));\n                    shapesRef.current = shapesRef.current.filter(s => !s.selected);\n                    undoStack.current.push({ type: 'delete', shapes: deleted, indices });\n                    redoStack.current = [];\n                    redrawAll();\n                }\n            }\n        };\n\n        c2.addEventListener(\"mousedown\", down);\n        c2.addEventListener(\"mousemove\", move);\n        c2.addEventListener(\"mouseup\", up);\n        c2.addEventListener(\"dblclick\", finishPoly);\n        c2.addEventListener(\"dblclick\", finishCurve);\n        window.addEventListener(\"keydown\", onKeyDown);\n        return () => {\n            c2.removeEventListener(\"mousedown\", down);\n            c2.removeEventListener(\"mousemove\", move);\n            c2.removeEventListener(\"mouseup\", up);\n            c2.removeEventListener(\"dblclick\", finishPoly);\n            c2.removeEventListener(\"dblclick\", finishCurve);\n            window.removeEventListener(\"keydown\", onKeyDown);\n        };\n    }, [activeTool, isDrawing, startPos, lineColor, fillColor, strokeWidth, showGrid, snapToGrid]);\n\n    return (\n        <div ref={containerRef} className=\"canvas-container\">\n            <canvas ref={c1Ref} />\n            <canvas ref={c2Ref} style={{ backgroundColor: \"transparent\" }} />\n        </div>\n    );\n});\n\nexport default Canvas;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}