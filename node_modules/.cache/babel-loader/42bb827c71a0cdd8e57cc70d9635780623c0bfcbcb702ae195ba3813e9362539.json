{"ast":null,"code":"var _jsxFileName = \"/home/nightsquid/Desktop/GUI II/studyspace/src/components/Canvas.js\",\n  _s = $RefreshSig$();\n// src/components/Canvas.js\nimport React, { forwardRef, useImperativeHandle, useRef, useEffect, useState } from \"react\";\nimport { jsPDF } from \"jspdf\";\nimport \"../css/canvas.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Canvas = /*#__PURE__*/_s(/*#__PURE__*/forwardRef(_c = _s(({\n  activeTool,\n  lineColor,\n  fillColor\n}, ref) => {\n  _s();\n  const containerRef = useRef(null);\n  const c1Ref = useRef(null);\n  const c2Ref = useRef(null);\n  const shapesRef = useRef([]);\n  const redoRef = useRef([]);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [startPos, setStartPos] = useState({\n    x: 0,\n    y: 0\n  });\n\n  // 1) Expose export/load/download handlers\n  useImperativeHandle(ref, () => ({\n    exportShapes: () => {\n      const data = JSON.stringify(shapesRef.current, null, 2);\n      const blob = new Blob([data], {\n        type: \"application/json\"\n      });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement(\"a\");\n      a.href = url;\n      a.download = \"shapes.json\";\n      a.click();\n      URL.revokeObjectURL(url);\n    },\n    downloadJPEG: () => {\n      const shapes = shapesRef.current;\n      const pad = 20;\n\n      // 1) Compute bounds\n      let minX = Infinity,\n        minY = Infinity,\n        maxX = -Infinity,\n        maxY = -Infinity;\n      shapes.forEach(s => {\n        let sMinX, sMinY, sMaxX, sMaxY;\n        if (s.tool === \"circle\" || s.tool === \"polygon\") {\n          const cx = s.x0,\n            cy = s.y0;\n          const r = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n          sMinX = cx - r;\n          sMaxX = cx + r;\n          sMinY = cy - r;\n          sMaxY = cy + r;\n        } else {\n          sMinX = Math.min(s.x0, s.x1);\n          sMaxX = Math.max(s.x0, s.x1);\n          sMinY = Math.min(s.y0, s.y1);\n          sMaxY = Math.max(s.y0, s.y1);\n        }\n        minX = Math.min(minX, sMinX);\n        minY = Math.min(minY, sMinY);\n        maxX = Math.max(maxX, sMaxX);\n        maxY = Math.max(maxY, sMaxY);\n      });\n\n      // If no shapes, fall back to full canvas\n      if (minX === Infinity) {\n        minX = 0;\n        minY = 0;\n        maxX = c1Ref.current.width;\n        maxY = c1Ref.current.height;\n      }\n\n      // 2) Add padding and clamp\n      minX = Math.max(0, minX - pad);\n      minY = Math.max(0, minY - pad);\n      maxX = Math.min(c1Ref.current.width, maxX + pad);\n      maxY = Math.min(c1Ref.current.height, maxY + pad);\n      const sw = maxX - minX;\n      const sh = maxY - minY;\n\n      // 3) Offscreen canvas\n      const off = document.createElement(\"canvas\");\n      off.width = sw;\n      off.height = sh;\n      const ctx = off.getContext(\"2d\");\n\n      // background\n      ctx.fillStyle = \"#979797\";\n      ctx.fillRect(0, 0, sw, sh);\n\n      // 4) Redraw each shape, offset by -minX+pad, -minY+pad\n      const dx = -minX,\n        dy = -minY;\n      shapes.forEach(s => {\n        const lc = s.lineColor || lineColor;\n        const fc = s.fillColor || fillColor;\n        ctx.save();\n        ctx.strokeStyle = lc;\n        ctx.fillStyle = fc;\n        ctx.lineWidth = 1;\n        ctx.beginPath();\n        switch (s.tool) {\n          case \"square\":\n            ctx.fillRect(s.x0 + dx, s.y0 + dy, s.x1 - s.x0, s.y1 - s.y0);\n            ctx.strokeRect(s.x0 + dx, s.y0 + dy, s.x1 - s.x0, s.y1 - s.y0);\n            break;\n          case \"line\":\n            ctx.moveTo(s.x0 + dx, s.y0 + dy);\n            ctx.lineTo(s.x1 + dx, s.y1 + dy);\n            ctx.stroke();\n            break;\n          case \"circle\":\n            const r = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n            ctx.arc(s.x0 + dx, s.y0 + dy, r, 0, 2 * Math.PI);\n            ctx.fill();\n            ctx.stroke();\n            break;\n          case \"triangle\":\n            ctx.moveTo(s.x0 + dx, s.y0 + dy);\n            ctx.lineTo(s.x1 + dx, s.y0 + dy);\n            ctx.lineTo((s.x0 + s.x1) / 2 + dx, s.y1 + dy);\n            ctx.closePath();\n            ctx.fill();\n            ctx.stroke();\n            break;\n          case \"polygon\":\n            const sides = 5;\n            const rad = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n            const step = 2 * Math.PI / sides;\n            for (let i = 0; i < sides; i++) {\n              const ang = i * step - Math.PI / 2;\n              const px = s.x0 + rad * Math.cos(ang) + dx;\n              const py = s.y0 + rad * Math.sin(ang) + dy;\n              i === 0 ? ctx.moveTo(px, py) : ctx.lineTo(px, py);\n            }\n            ctx.closePath();\n            ctx.fill();\n            ctx.stroke();\n            break;\n        }\n        if (s.selected) {\n          ctx.strokeStyle = \"red\";\n          ctx.strokeRect(Math.min(s.x0, s.x1) + dx, Math.min(s.y0, s.y1) + dy, Math.abs(s.x1 - s.x0), Math.abs(s.y1 - s.y0));\n        }\n        ctx.restore();\n      });\n\n      // 5) Export as JPEG\n      const dataURL = off.toDataURL(\"image/jpeg\", 1.0);\n      const link = document.createElement(\"a\");\n      link.href = dataURL;\n      link.download = \"shapes.jpg\";\n      link.click();\n    },\n    downloadPDF: () => {\n      // identical bounding + draw logic...\n      const shapes = shapesRef.current;\n      const pad = 20;\n      let minX = Infinity,\n        minY = Infinity,\n        maxX = -Infinity,\n        maxY = -Infinity;\n      shapes.forEach(s => {\n        let sMinX, sMinY, sMaxX, sMaxY;\n        if (s.tool === \"circle\" || s.tool === \"polygon\") {\n          const cx = s.x0,\n            cy = s.y0;\n          const r = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n          sMinX = cx - r;\n          sMaxX = cx + r;\n          sMinY = cy - r;\n          sMaxY = cy + r;\n        } else {\n          sMinX = Math.min(s.x0, s.x1);\n          sMaxX = Math.max(s.x0, s.x1);\n          sMinY = Math.min(s.y0, s.y1);\n          sMaxY = Math.max(s.y0, s.y1);\n        }\n        minX = Math.min(minX, sMinX);\n        minY = Math.min(minY, sMinY);\n        maxX = Math.max(maxX, sMaxX);\n        maxY = Math.max(maxY, sMaxY);\n      });\n      if (minX === Infinity) {\n        minX = 0;\n        minY = 0;\n        maxX = c1Ref.current.width;\n        maxY = c1Ref.current.height;\n      }\n      minX = Math.max(0, minX - pad);\n      minY = Math.max(0, minY - pad);\n      maxX = Math.min(c1Ref.current.width, maxX + pad);\n      maxY = Math.min(c1Ref.current.height, maxY + pad);\n      const sw = maxX - minX,\n        sh = maxY - minY;\n      const off = document.createElement(\"canvas\");\n      off.width = sw;\n      off.height = sh;\n      const ctx = off.getContext(\"2d\");\n      ctx.fillStyle = \"#979797\";\n      ctx.fillRect(0, 0, sw, sh);\n      const dx = -minX,\n        dy = -minY;\n      shapes.forEach(s => {\n        const lc = s.lineColor || lineColor;\n        const fc = s.fillColor || fillColor;\n        ctx.save();\n        ctx.strokeStyle = lc;\n        ctx.fillStyle = fc;\n        ctx.lineWidth = 1;\n        ctx.beginPath();\n        switch\n          /* ... same drawing switch as above ... */\n        (s.tool) {}\n        if (s.selected) {\n          ctx.strokeStyle = \"red\";\n          ctx.strokeRect(Math.min(s.x0, s.x1) + dx, Math.min(s.y0, s.y1) + dy, Math.abs(s.x1 - s.x0), Math.abs(s.y1 - s.y0));\n        }\n        ctx.restore();\n      });\n      const imgData = off.toDataURL(\"image/jpeg\", 1.0);\n      const pdf = new jsPDF({\n        unit: \"px\",\n        format: [sw, sh]\n      });\n      pdf.addImage(imgData, \"JPEG\", 0, 0, sw, sh);\n      pdf.save(\"shapes.pdf\");\n    },\n    loadShapes: arr => {\n      shapesRef.current = arr.map(s => ({\n        ...s,\n        selected: false\n      }));\n      redrawAll();\n    }\n  }));\n\n  // 2) Resize loop: keep canvas internal size in sync with CSS size\n  useEffect(() => {\n    const resize = () => {\n      const {\n        width,\n        height\n      } = containerRef.current.getBoundingClientRect();\n      c1Ref.current.width = width;\n      c1Ref.current.height = height;\n      c2Ref.current.width = width;\n      c2Ref.current.height = height;\n      redrawAll();\n    };\n    resize();\n    window.addEventListener(\"resize\", resize);\n    return () => window.removeEventListener(\"resize\", resize);\n  }, []);\n\n  // 3) Redraw everything (with baked-in background)\n  const redrawAll = () => {\n    const c = c1Ref.current;\n    const ctx = c.getContext(\"2d\");\n    ctx.clearRect(0, 0, c.width, c.height);\n    shapesRef.current.forEach(s => {\n      const {\n        tool,\n        x0,\n        y0,\n        x1,\n        y1,\n        lineColor: lc,\n        fillColor: fc,\n        selected\n      } = s;\n      ctx.save();\n      ctx.strokeStyle = lc || lineColor;\n      ctx.fillStyle = fc || fillColor;\n      ctx.lineWidth = 1;\n      ctx.beginPath();\n      switch (tool) {\n        case \"square\":\n          ctx.fillRect(x0, y0, x1 - x0, y1 - y0);\n          ctx.strokeRect(x0, y0, x1 - x0, y1 - y0);\n          break;\n        case \"line\":\n          ctx.moveTo(x0, y0);\n          ctx.lineTo(x1, y1);\n          ctx.stroke();\n          break;\n        case \"circle\":\n          const r = Math.hypot(x1 - x0, y1 - y0);\n          ctx.arc(x0, y0, r, 0, 2 * Math.PI);\n          ctx.fill();\n          ctx.stroke();\n          break;\n        case \"triangle\":\n          ctx.moveTo(x0, y0);\n          ctx.lineTo(x1, y0);\n          ctx.lineTo((x0 + x1) / 2, y1);\n          ctx.closePath();\n          ctx.fill();\n          ctx.stroke();\n          break;\n        case \"polygon\":\n          const sides = 5,\n            rad = Math.hypot(x1 - x0, y1 - y0),\n            step = 2 * Math.PI / sides;\n          for (let i = 0; i < sides; i++) {\n            const ang = i * step - Math.PI / 2,\n              px = x0 + rad * Math.cos(ang),\n              py = y0 + rad * Math.sin(ang);\n            i === 0 ? ctx.moveTo(px, py) : ctx.lineTo(px, py);\n          }\n          ctx.closePath();\n          ctx.fill();\n          ctx.stroke();\n          break;\n      }\n      if (selected) {\n        ctx.strokeStyle = \"red\";\n        ctx.strokeRect(Math.min(x0, x1), Math.min(y0, y1), Math.abs(x1 - x0), Math.abs(y1 - y0));\n      }\n      ctx.restore();\n    });\n  };\n\n  // 4) Drawing & selection logic\n  useEffect(() => {\n    const c2 = c2Ref.current;\n    const ctx2 = c2.getContext(\"2d\");\n    const getPos = e => {\n      const r = c2.getBoundingClientRect();\n      return {\n        x: e.clientX - r.left,\n        y: e.clientY - r.top\n      };\n    };\n    const down = e => {\n      if (activeTool === \"cursor\") {\n        const pos = getPos(e);\n        shapesRef.current.forEach(s => s.selected = false);\n        for (let i = shapesRef.current.length - 1; i >= 0; i--) {\n          const s = shapesRef.current[i],\n            minX = Math.min(s.x0, s.x1),\n            maxX = Math.max(s.x0, s.x1),\n            minY = Math.min(s.y0, s.y1),\n            maxY = Math.max(s.y0, s.y1);\n          if (pos.x >= minX && pos.x <= maxX && pos.y >= minY && pos.y <= maxY) {\n            s.selected = true;\n            break;\n          }\n        }\n        redrawAll();\n        return;\n      }\n      if (![\"square\", \"line\", \"circle\", \"triangle\", \"polygon\"].includes(activeTool)) return;\n      setStartPos(getPos(e));\n      setIsDrawing(true);\n    };\n    const move = e => {\n      if (!isDrawing) return;\n      const {\n        x,\n        y\n      } = getPos(e);\n      const dx = x - startPos.x,\n        dy = y - startPos.y;\n      ctx2.clearRect(0, 0, c2.width, c2.height);\n      ctx2.strokeStyle = lineColor;\n      ctx2.beginPath();\n      switch (activeTool) {\n        case \"square\":\n          ctx2.strokeRect(startPos.x, startPos.y, dx, dy);\n          break;\n        case \"line\":\n          ctx2.moveTo(startPos.x, startPos.y);\n          ctx2.lineTo(x, y);\n          ctx2.stroke();\n          break;\n        case \"circle\":\n          ctx2.arc(startPos.x, startPos.y, Math.hypot(dx, dy), 0, 2 * Math.PI);\n          ctx2.stroke();\n          break;\n        case \"triangle\":\n          ctx2.moveTo(startPos.x, startPos.y);\n          ctx2.lineTo(startPos.x + dx, startPos.y);\n          ctx2.lineTo(startPos.x + dx / 2, startPos.y + dy);\n          ctx2.closePath();\n          ctx2.stroke();\n          break;\n        case \"polygon\":\n          const sides2 = 5,\n            rad2 = Math.hypot(dx, dy),\n            step2 = 2 * Math.PI / sides2;\n          for (let i = 0; i < sides2; i++) {\n            const ang = i * step2 - Math.PI / 2,\n              px = startPos.x + rad2 * Math.cos(ang),\n              py = startPos.y + rad2 * Math.sin(ang);\n            i === 0 ? ctx2.moveTo(px, py) : ctx2.lineTo(px, py);\n          }\n          ctx2.closePath();\n          ctx2.stroke();\n          break;\n      }\n    };\n    const up = e => {\n      if (!isDrawing) return;\n      const {\n        x,\n        y\n      } = getPos(e);\n      shapesRef.current.push({\n        tool: activeTool,\n        x0: startPos.x,\n        y0: startPos.y,\n        x1: x,\n        y1: y,\n        lineColor,\n        fillColor,\n        selected: false\n      });\n      redrawAll();\n      ctx2.clearRect(0, 0, c2.width, c2.height);\n      setIsDrawing(false);\n    };\n    const onKeyDown = e => {\n      if (e.ctrlKey && e.key === \"z\" && shapesRef.current.length) {\n        redoRef.current.push(shapesRef.current.pop());\n        redrawAll();\n      } else if (e.ctrlKey && e.shiftKey && e.key.toLowerCase() === \"z\" && redoRef.current.length) {\n        shapesRef.current.push(redoRef.current.pop());\n        redrawAll();\n      }\n    };\n    c2.addEventListener(\"mousedown\", down);\n    c2.addEventListener(\"mousemove\", move);\n    c2.addEventListener(\"mouseup\", up);\n    window.addEventListener(\"keydown\", onKeyDown);\n    return () => {\n      c2.removeEventListener(\"mousedown\", down);\n      c2.removeEventListener(\"mousemove\", move);\n      c2.removeEventListener(\"mouseup\", up);\n      window.removeEventListener(\"keydown\", onKeyDown);\n    };\n  }, [activeTool, isDrawing, startPos, lineColor, fillColor]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    className: \"canvas-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: c1Ref\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 415,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: c2Ref,\n      style: {\n        backgroundColor: \"transparent\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 416,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 414,\n    columnNumber: 9\n  }, this);\n}, \"UJLDpA+bOaQrWpjxwsKEiK11vyM=\")), \"UJLDpA+bOaQrWpjxwsKEiK11vyM=\");\n_c2 = Canvas;\nexport default Canvas;\nvar _c, _c2;\n$RefreshReg$(_c, \"Canvas$forwardRef\");\n$RefreshReg$(_c2, \"Canvas\");","map":{"version":3,"names":["React","forwardRef","useImperativeHandle","useRef","useEffect","useState","jsPDF","jsxDEV","_jsxDEV","Canvas","_s","_c","activeTool","lineColor","fillColor","ref","containerRef","c1Ref","c2Ref","shapesRef","redoRef","isDrawing","setIsDrawing","startPos","setStartPos","x","y","exportShapes","data","JSON","stringify","current","blob","Blob","type","url","URL","createObjectURL","a","document","createElement","href","download","click","revokeObjectURL","downloadJPEG","shapes","pad","minX","Infinity","minY","maxX","maxY","forEach","s","sMinX","sMinY","sMaxX","sMaxY","tool","cx","x0","cy","y0","r","Math","hypot","x1","y1","min","max","width","height","sw","sh","off","ctx","getContext","fillStyle","fillRect","dx","dy","lc","fc","save","strokeStyle","lineWidth","beginPath","strokeRect","moveTo","lineTo","stroke","arc","PI","fill","closePath","sides","rad","step","i","ang","px","cos","py","sin","selected","abs","restore","dataURL","toDataURL","link","downloadPDF","imgData","pdf","unit","format","addImage","loadShapes","arr","map","redrawAll","resize","getBoundingClientRect","window","addEventListener","removeEventListener","c","clearRect","c2","ctx2","getPos","e","clientX","left","clientY","top","down","pos","length","includes","move","sides2","rad2","step2","up","push","onKeyDown","ctrlKey","key","pop","shiftKey","toLowerCase","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","backgroundColor","_c2","$RefreshReg$"],"sources":["/home/nightsquid/Desktop/GUI II/studyspace/src/components/Canvas.js"],"sourcesContent":["// src/components/Canvas.js\nimport React, {\n    forwardRef,\n    useImperativeHandle,\n    useRef,\n    useEffect,\n    useState\n} from \"react\";\nimport { jsPDF } from \"jspdf\";\nimport \"../css/canvas.css\";\n\nconst Canvas = forwardRef(({ activeTool, lineColor, fillColor }, ref) => {\n    const containerRef = useRef(null);\n    const c1Ref = useRef(null);\n    const c2Ref = useRef(null);\n\n    const shapesRef = useRef([]);\n    const redoRef = useRef([]);\n\n    const [isDrawing, setIsDrawing] = useState(false);\n    const [startPos, setStartPos] = useState({ x: 0, y: 0 });\n\n    // 1) Expose export/load/download handlers\n    useImperativeHandle(ref, () => ({\n        exportShapes: () => {\n            const data = JSON.stringify(shapesRef.current, null, 2);\n            const blob = new Blob([data], { type: \"application/json\" });\n            const url = URL.createObjectURL(blob);\n            const a = document.createElement(\"a\");\n            a.href = url; a.download = \"shapes.json\"; a.click();\n            URL.revokeObjectURL(url);\n        },\n        downloadJPEG: () => {\n            const shapes = shapesRef.current;\n            const pad = 20;\n\n            // 1) Compute bounds\n            let minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity;\n            shapes.forEach(s => {\n                let sMinX, sMinY, sMaxX, sMaxY;\n                if (s.tool === \"circle\" || s.tool === \"polygon\") {\n                    const cx = s.x0, cy = s.y0;\n                    const r = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n                    sMinX = cx - r; sMaxX = cx + r;\n                    sMinY = cy - r; sMaxY = cy + r;\n                } else {\n                    sMinX = Math.min(s.x0, s.x1);\n                    sMaxX = Math.max(s.x0, s.x1);\n                    sMinY = Math.min(s.y0, s.y1);\n                    sMaxY = Math.max(s.y0, s.y1);\n                }\n                minX = Math.min(minX, sMinX);\n                minY = Math.min(minY, sMinY);\n                maxX = Math.max(maxX, sMaxX);\n                maxY = Math.max(maxY, sMaxY);\n            });\n\n            // If no shapes, fall back to full canvas\n            if (minX === Infinity) {\n                minX = 0; minY = 0;\n                maxX = c1Ref.current.width;\n                maxY = c1Ref.current.height;\n            }\n\n            // 2) Add padding and clamp\n            minX = Math.max(0, minX - pad);\n            minY = Math.max(0, minY - pad);\n            maxX = Math.min(c1Ref.current.width, maxX + pad);\n            maxY = Math.min(c1Ref.current.height, maxY + pad);\n\n            const sw = maxX - minX;\n            const sh = maxY - minY;\n\n            // 3) Offscreen canvas\n            const off = document.createElement(\"canvas\");\n            off.width = sw;\n            off.height = sh;\n            const ctx = off.getContext(\"2d\");\n\n            // background\n            ctx.fillStyle = \"#979797\";\n            ctx.fillRect(0, 0, sw, sh);\n\n            // 4) Redraw each shape, offset by -minX+pad, -minY+pad\n            const dx = -minX, dy = -minY;\n            shapes.forEach(s => {\n                const lc = s.lineColor || lineColor;\n                const fc = s.fillColor || fillColor;\n                ctx.save();\n                ctx.strokeStyle = lc;\n                ctx.fillStyle = fc;\n                ctx.lineWidth = 1;\n                ctx.beginPath();\n\n                switch (s.tool) {\n                    case \"square\":\n                        ctx.fillRect(s.x0 + dx, s.y0 + dy, s.x1 - s.x0, s.y1 - s.y0);\n                        ctx.strokeRect(s.x0 + dx, s.y0 + dy, s.x1 - s.x0, s.y1 - s.y0);\n                        break;\n                    case \"line\":\n                        ctx.moveTo(s.x0 + dx, s.y0 + dy);\n                        ctx.lineTo(s.x1 + dx, s.y1 + dy);\n                        ctx.stroke();\n                        break;\n                    case \"circle\":\n                        const r = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n                        ctx.arc(s.x0 + dx, s.y0 + dy, r, 0, 2 * Math.PI);\n                        ctx.fill(); ctx.stroke();\n                        break;\n                    case \"triangle\":\n                        ctx.moveTo(s.x0 + dx, s.y0 + dy);\n                        ctx.lineTo(s.x1 + dx, s.y0 + dy);\n                        ctx.lineTo((s.x0 + s.x1) / 2 + dx, s.y1 + dy);\n                        ctx.closePath();\n                        ctx.fill(); ctx.stroke();\n                        break;\n                    case \"polygon\":\n                        const sides = 5;\n                        const rad = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n                        const step = 2 * Math.PI / sides;\n                        for (let i = 0; i < sides; i++) {\n                            const ang = i * step - Math.PI / 2;\n                            const px = s.x0 + rad * Math.cos(ang) + dx;\n                            const py = s.y0 + rad * Math.sin(ang) + dy;\n                            i === 0 ? ctx.moveTo(px, py) : ctx.lineTo(px, py);\n                        }\n                        ctx.closePath();\n                        ctx.fill(); ctx.stroke();\n                        break;\n                }\n\n                if (s.selected) {\n                    ctx.strokeStyle = \"red\";\n                    ctx.strokeRect(\n                        Math.min(s.x0, s.x1) + dx,\n                        Math.min(s.y0, s.y1) + dy,\n                        Math.abs(s.x1 - s.x0),\n                        Math.abs(s.y1 - s.y0)\n                    );\n                }\n\n                ctx.restore();\n            });\n\n            // 5) Export as JPEG\n            const dataURL = off.toDataURL(\"image/jpeg\", 1.0);\n            const link = document.createElement(\"a\");\n            link.href = dataURL;\n            link.download = \"shapes.jpg\";\n            link.click();\n        },\n\n        downloadPDF: () => {\n            // identical bounding + draw logic...\n            const shapes = shapesRef.current;\n            const pad = 20;\n            let minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity;\n            shapes.forEach(s => {\n                let sMinX, sMinY, sMaxX, sMaxY;\n                if (s.tool === \"circle\" || s.tool === \"polygon\") {\n                    const cx = s.x0, cy = s.y0;\n                    const r = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n                    sMinX = cx - r; sMaxX = cx + r;\n                    sMinY = cy - r; sMaxY = cy + r;\n                } else {\n                    sMinX = Math.min(s.x0, s.x1);\n                    sMaxX = Math.max(s.x0, s.x1);\n                    sMinY = Math.min(s.y0, s.y1);\n                    sMaxY = Math.max(s.y0, s.y1);\n                }\n                minX = Math.min(minX, sMinX);\n                minY = Math.min(minY, sMinY);\n                maxX = Math.max(maxX, sMaxX);\n                maxY = Math.max(maxY, sMaxY);\n            });\n            if (minX === Infinity) {\n                minX = 0; minY = 0;\n                maxX = c1Ref.current.width;\n                maxY = c1Ref.current.height;\n            }\n            minX = Math.max(0, minX - pad);\n            minY = Math.max(0, minY - pad);\n            maxX = Math.min(c1Ref.current.width, maxX + pad);\n            maxY = Math.min(c1Ref.current.height, maxY + pad);\n            const sw = maxX - minX, sh = maxY - minY;\n\n            const off = document.createElement(\"canvas\");\n            off.width = sw;\n            off.height = sh;\n            const ctx = off.getContext(\"2d\");\n            ctx.fillStyle = \"#979797\";\n            ctx.fillRect(0, 0, sw, sh);\n            const dx = -minX, dy = -minY;\n\n            shapes.forEach(s => {\n                const lc = s.lineColor || lineColor;\n                const fc = s.fillColor || fillColor;\n                ctx.save();\n                ctx.strokeStyle = lc;\n                ctx.fillStyle = fc;\n                ctx.lineWidth = 1;\n                ctx.beginPath();\n\n                switch (s.tool) {\n                    /* ... same drawing switch as above ... */\n                }\n\n                if (s.selected) {\n                    ctx.strokeStyle = \"red\";\n                    ctx.strokeRect(\n                        Math.min(s.x0, s.x1) + dx,\n                        Math.min(s.y0, s.y1) + dy,\n                        Math.abs(s.x1 - s.x0),\n                        Math.abs(s.y1 - s.y0)\n                    );\n                }\n\n                ctx.restore();\n            });\n\n            const imgData = off.toDataURL(\"image/jpeg\", 1.0);\n            const pdf = new jsPDF({ unit: \"px\", format: [sw, sh] });\n            pdf.addImage(imgData, \"JPEG\", 0, 0, sw, sh);\n            pdf.save(\"shapes.pdf\");\n        },\n        loadShapes: (arr) => {\n            shapesRef.current = arr.map(s => ({ ...s, selected: false }));\n            redrawAll();\n        }\n    }));\n\n    // 2) Resize loop: keep canvas internal size in sync with CSS size\n    useEffect(() => {\n        const resize = () => {\n            const { width, height } = containerRef.current.getBoundingClientRect();\n            c1Ref.current.width = width;\n            c1Ref.current.height = height;\n            c2Ref.current.width = width;\n            c2Ref.current.height = height;\n            redrawAll();\n        };\n        resize();\n        window.addEventListener(\"resize\", resize);\n        return () => window.removeEventListener(\"resize\", resize);\n    }, []);\n\n    // 3) Redraw everything (with baked-in background)\n    const redrawAll = () => {\n        const c = c1Ref.current;\n        const ctx = c.getContext(\"2d\");\n        ctx.clearRect(0, 0, c.width, c.height);\n        shapesRef.current.forEach(s => {\n            const { tool, x0, y0, x1, y1, lineColor: lc, fillColor: fc, selected } = s;\n            ctx.save();\n            ctx.strokeStyle = lc || lineColor;\n            ctx.fillStyle = fc || fillColor;\n            ctx.lineWidth = 1;\n            ctx.beginPath();\n            switch (tool) {\n                case \"square\":\n                    ctx.fillRect(x0, y0, x1 - x0, y1 - y0);\n                    ctx.strokeRect(x0, y0, x1 - x0, y1 - y0);\n                    break;\n                case \"line\":\n                    ctx.moveTo(x0, y0); ctx.lineTo(x1, y1); ctx.stroke();\n                    break;\n                case \"circle\":\n                    const r = Math.hypot(x1 - x0, y1 - y0);\n                    ctx.arc(x0, y0, r, 0, 2 * Math.PI);\n                    ctx.fill(); ctx.stroke();\n                    break;\n                case \"triangle\":\n                    ctx.moveTo(x0, y0);\n                    ctx.lineTo(x1, y0);\n                    ctx.lineTo((x0 + x1) / 2, y1);\n                    ctx.closePath();\n                    ctx.fill(); ctx.stroke();\n                    break;\n                case \"polygon\":\n                    const sides = 5, rad = Math.hypot(x1 - x0, y1 - y0), step = 2 * Math.PI / sides;\n                    for (let i = 0; i < sides; i++) {\n                        const ang = i * step - Math.PI / 2,\n                            px = x0 + rad * Math.cos(ang),\n                            py = y0 + rad * Math.sin(ang);\n                        i === 0 ? ctx.moveTo(px, py) : ctx.lineTo(px, py);\n                    }\n                    ctx.closePath();\n                    ctx.fill(); ctx.stroke();\n                    break;\n            }\n            if (selected) {\n                ctx.strokeStyle = \"red\";\n                ctx.strokeRect(\n                    Math.min(x0, x1),\n                    Math.min(y0, y1),\n                    Math.abs(x1 - x0),\n                    Math.abs(y1 - y0)\n                );\n            }\n            ctx.restore();\n        });\n    };\n\n    // 4) Drawing & selection logic\n    useEffect(() => {\n        const c2 = c2Ref.current;\n        const ctx2 = c2.getContext(\"2d\");\n\n        const getPos = e => {\n            const r = c2.getBoundingClientRect();\n            return { x: e.clientX - r.left, y: e.clientY - r.top };\n        };\n\n        const down = e => {\n            if (activeTool === \"cursor\") {\n                const pos = getPos(e);\n                shapesRef.current.forEach(s => s.selected = false);\n                for (let i = shapesRef.current.length - 1; i >= 0; i--) {\n                    const s = shapesRef.current[i],\n                        minX = Math.min(s.x0, s.x1), maxX = Math.max(s.x0, s.x1),\n                        minY = Math.min(s.y0, s.y1), maxY = Math.max(s.y0, s.y1);\n                    if (pos.x >= minX && pos.x <= maxX && pos.y >= minY && pos.y <= maxY) {\n                        s.selected = true; break;\n                    }\n                }\n                redrawAll();\n                return;\n            }\n            if (![\"square\", \"line\", \"circle\", \"triangle\", \"polygon\"].includes(activeTool)) return;\n            setStartPos(getPos(e));\n            setIsDrawing(true);\n        };\n\n        const move = e => {\n            if (!isDrawing) return;\n            const { x, y } = getPos(e);\n            const dx = x - startPos.x, dy = y - startPos.y;\n            ctx2.clearRect(0, 0, c2.width, c2.height);\n            ctx2.strokeStyle = lineColor;\n            ctx2.beginPath();\n            switch (activeTool) {\n                case \"square\":\n                    ctx2.strokeRect(startPos.x, startPos.y, dx, dy);\n                    break;\n                case \"line\":\n                    ctx2.moveTo(startPos.x, startPos.y);\n                    ctx2.lineTo(x, y);\n                    ctx2.stroke();\n                    break;\n                case \"circle\":\n                    ctx2.arc(startPos.x, startPos.y, Math.hypot(dx, dy), 0, 2 * Math.PI);\n                    ctx2.stroke();\n                    break;\n                case \"triangle\":\n                    ctx2.moveTo(startPos.x, startPos.y);\n                    ctx2.lineTo(startPos.x + dx, startPos.y);\n                    ctx2.lineTo(startPos.x + dx / 2, startPos.y + dy);\n                    ctx2.closePath();\n                    ctx2.stroke();\n                    break;\n                case \"polygon\":\n                    const sides2 = 5, rad2 = Math.hypot(dx, dy), step2 = 2 * Math.PI / sides2;\n                    for (let i = 0; i < sides2; i++) {\n                        const ang = i * step2 - Math.PI / 2,\n                            px = startPos.x + rad2 * Math.cos(ang),\n                            py = startPos.y + rad2 * Math.sin(ang);\n                        i === 0 ? ctx2.moveTo(px, py) : ctx2.lineTo(px, py);\n                    }\n                    ctx2.closePath();\n                    ctx2.stroke();\n                    break;\n            }\n        };\n\n        const up = e => {\n            if (!isDrawing) return;\n            const { x, y } = getPos(e);\n            shapesRef.current.push({\n                tool: activeTool,\n                x0: startPos.x, y0: startPos.y,\n                x1: x, y1: y,\n                lineColor, fillColor,\n                selected: false\n            });\n            redrawAll();\n            ctx2.clearRect(0, 0, c2.width, c2.height);\n            setIsDrawing(false);\n        };\n\n        const onKeyDown = e => {\n            if (e.ctrlKey && e.key === \"z\" && shapesRef.current.length) {\n                redoRef.current.push(shapesRef.current.pop());\n                redrawAll();\n            }\n            else if (e.ctrlKey && e.shiftKey && e.key.toLowerCase() === \"z\" && redoRef.current.length) {\n                shapesRef.current.push(redoRef.current.pop());\n                redrawAll();\n            }\n        };\n\n        c2.addEventListener(\"mousedown\", down);\n        c2.addEventListener(\"mousemove\", move);\n        c2.addEventListener(\"mouseup\", up);\n        window.addEventListener(\"keydown\", onKeyDown);\n        return () => {\n            c2.removeEventListener(\"mousedown\", down);\n            c2.removeEventListener(\"mousemove\", move);\n            c2.removeEventListener(\"mouseup\", up);\n            window.removeEventListener(\"keydown\", onKeyDown);\n        };\n    }, [activeTool, isDrawing, startPos, lineColor, fillColor]);\n\n    return (\n        <div ref={containerRef} className=\"canvas-container\">\n            <canvas ref={c1Ref} />\n            <canvas ref={c2Ref} style={{ backgroundColor: \"transparent\" }} />\n        </div>\n    );\n});\n\nexport default Canvas;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}