{"ast":null,"code":"var _jsxFileName = \"/home/nightsquid/Desktop/Graphics 1/Shape-Editor/src/components/Canvas.js\",\n  _s = $RefreshSig$();\nimport React, { forwardRef, useImperativeHandle, useRef, useEffect, useState, useCallback } from \"react\";\nimport { jsPDF } from \"jspdf\";\nimport \"../css/canvas.css\";\n\n// Draws a grid background for the canvas\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction drawGrid(ctx, width, height, cell) {\n  ctx.save();\n  ctx.beginPath();\n  ctx.strokeStyle = \"#ffffff3a\";\n  ctx.lineWidth = 1;\n\n  // draw vertical grid lines\n  for (let x = 0; x <= width; x += cell) {\n    ctx.moveTo(x, 0);\n    ctx.lineTo(x, height);\n  }\n\n  // draw horizontal grid lines\n  for (let y = 0; y <= height; y += cell) {\n    ctx.moveTo(0, y);\n    ctx.lineTo(width, y);\n  }\n  ctx.stroke();\n  ctx.restore();\n}\n\n// Computes the bounding box for any shape\nfunction getBBox(shape) {\n  if (shape.points) {\n    // poly-line or curve: use all points\n    const xs = shape.points.map(p => p.x);\n    const ys = shape.points.map(p => p.y);\n    return {\n      xMin: Math.min(...xs),\n      yMin: Math.min(...ys),\n      xMax: Math.max(...xs),\n      yMax: Math.max(...ys)\n    };\n  }\n  // circle or ellipse: calculate extents from center and radii\n  if (shape.tool === \"circle\") {\n    const cx = shape.x0,\n      cy = shape.y0;\n    if (shape.isCircle) {\n      const r = Math.hypot(shape.x1 - shape.x0, shape.y1 - shape.y0);\n      return {\n        xMin: cx - r,\n        yMin: cy - r,\n        xMax: cx + r,\n        yMax: cy + r\n      };\n    } else {\n      const rx = Math.abs(shape.x1 - shape.x0);\n      const ry = Math.abs(shape.y1 - shape.y0);\n      return {\n        xMin: cx - rx,\n        yMin: cy - ry,\n        xMax: cx + rx,\n        yMax: cy + ry\n      };\n    }\n  }\n  // regular pentagon: approximate by computing all vertices\n  if (shape.tool === \"polygon\") {\n    const cx = shape.x0;\n    const cy = shape.y0;\n    const radius = Math.hypot(shape.x1 - shape.x0, shape.y1 - shape.y0);\n    const sides = 5;\n    const xs = [];\n    const ys = [];\n    for (let i = 0; i < sides; i++) {\n      const ang = i * (2 * Math.PI / sides) - Math.PI / 2;\n      xs.push(cx + radius * Math.cos(ang));\n      ys.push(cy + radius * Math.sin(ang));\n    }\n    return {\n      xMin: Math.min(...xs),\n      yMin: Math.min(...ys),\n      xMax: Math.max(...xs),\n      yMax: Math.max(...ys)\n    };\n  }\n  // square: enforce equal width/height then compute corners\n  if (shape.tool === \"square\" && shape.isSquare) {\n    const dx = shape.x1 - shape.x0;\n    const dy = shape.y1 - shape.y0;\n    const side = Math.min(Math.abs(dx), Math.abs(dy));\n    const w = dx < 0 ? -side : side;\n    const h = dy < 0 ? -side : side;\n    const xA = shape.x0;\n    const yA = shape.y0;\n    const xB = shape.x0 + w;\n    const yB = shape.y0 + h;\n    return {\n      xMin: Math.min(xA, xB),\n      yMin: Math.min(yA, yB),\n      xMax: Math.max(xA, xB),\n      yMax: Math.max(yA, yB)\n    };\n  }\n  // default rectangle: two corner points\n  return {\n    xMin: Math.min(shape.x0, shape.x1),\n    yMin: Math.min(shape.y0, shape.y1),\n    xMax: Math.max(shape.x0, shape.x1),\n    yMax: Math.max(shape.y0, shape.y1)\n  };\n}\n\n// Hit-testing: checks if point (x,y) hits the shape stroke or interior\nfunction hitTest(ctx, shape, x, y, defaultStroke) {\n  const path = new Path2D();\n  ctx.lineWidth = (shape.strokeWidth || defaultStroke) + 15;\n  switch (shape.tool) {\n    case \"line\":\n      path.moveTo(shape.x0, shape.y0);\n      path.lineTo(shape.x1, shape.y1);\n      return ctx.isPointInStroke(path, x, y);\n    default:\n      const {\n        xMin,\n        yMin,\n        xMax,\n        yMax\n      } = getBBox(shape);\n      return x >= xMin && x <= xMax && y >= yMin && y <= yMax;\n  }\n}\n\n// Draws the shape itself, applying any rotation and offset\nfunction drawShape(ctx, shape, offsetX = 0, offsetY = 0) {\n  const x0 = shape.x0 + offsetX;\n  const y0 = shape.y0 + offsetY;\n  const x1 = shape.x1 + offsetX;\n  const y1 = shape.y1 + offsetY;\n  // compute center of bounding box for rotation\n  const {\n    xMin,\n    yMin,\n    xMax,\n    yMax\n  } = getBBox(shape);\n  const cx = (xMin + xMax) / 2 + offsetX;\n  const cy = (yMin + yMax) / 2 + offsetY;\n  ctx.save();\n  ctx.translate(cx, cy);\n  ctx.rotate(shape.rotation || 0);\n  ctx.translate(-cx, -cy);\n  switch (shape.tool) {\n    case \"square\":\n      {\n        const dx = shape.x1 - shape.x0;\n        const dy = shape.y1 - shape.y0;\n        let w, h;\n        if (shape.isSquare) {\n          const side = Math.min(Math.abs(dx), Math.abs(dy));\n          w = dx < 0 ? -side : side;\n          h = dy < 0 ? -side : side;\n        } else {\n          w = dx;\n          h = dy;\n        }\n        ctx.fillRect(shape.x0 + offsetX, shape.y0 + offsetY, w, h);\n        ctx.strokeRect(shape.x0 + offsetX, shape.y0 + offsetY, w, h);\n        return;\n      }\n    case \"line\":\n      ctx.beginPath();\n      ctx.moveTo(x0, y0);\n      ctx.lineTo(x1, y1);\n      ctx.stroke();\n      return;\n    case \"circle\":\n      ctx.beginPath();\n      if (shape.isCircle) {\n        const r = Math.hypot(shape.x1 - shape.x0, shape.y1 - shape.y0);\n        ctx.arc(x0, y0, r, 0, 2 * Math.PI);\n      } else {\n        ctx.ellipse(x0, y0, Math.abs(shape.x1 - shape.x0), Math.abs(shape.y1 - shape.y0), 0, 0, 2 * Math.PI);\n      }\n      ctx.fill();\n      ctx.stroke();\n      return;\n    case \"triangle\":\n      ctx.beginPath();\n      ctx.moveTo(x0, y0);\n      ctx.lineTo(x1, y0);\n      ctx.lineTo((x0 + x1) / 2, y1);\n      ctx.closePath();\n      ctx.fill();\n      ctx.stroke();\n      return;\n    case \"polygon\":\n      ctx.beginPath();\n      const sides = 5;\n      const radius = Math.hypot(shape.x1 - shape.x0, shape.y1 - shape.y0);\n      for (let i = 0; i < sides; i++) {\n        const ang = i * (2 * Math.PI / sides) - Math.PI / 2;\n        const px = shape.x0 + offsetX + radius * Math.cos(ang);\n        const py = shape.y0 + offsetY + radius * Math.sin(ang);\n        if (i === 0) ctx.moveTo(px, py);else ctx.lineTo(px, py);\n      }\n      ctx.closePath();\n      ctx.fill();\n      ctx.stroke();\n      return;\n    case \"poly-line\":\n      if (shape.points && shape.points.length) {\n        ctx.beginPath();\n        ctx.moveTo(shape.points[0].x + offsetX, shape.points[0].y + offsetY);\n        for (let p of shape.points.slice(1)) ctx.lineTo(p.x + offsetX, p.y + offsetY);\n        ctx.stroke();\n      }\n      return;\n    case \"curve\":\n      if (shape.points && shape.points.length) {\n        ctx.beginPath();\n        const pts = shape.points;\n        ctx.moveTo(pts[0].x + offsetX, pts[0].y + offsetY);\n        for (let i = 1; i < pts.length; i++) {\n          const prev = pts[i - 1];\n          const curr = pts[i];\n          const mx = (prev.x + curr.x) / 2 + offsetX;\n          const my = (prev.y + curr.y) / 2 + offsetY;\n          ctx.quadraticCurveTo(prev.x + offsetX, prev.y + offsetY, mx, my);\n        }\n        const last = pts[pts.length - 1];\n        ctx.lineTo(last.x + offsetX, last.y + offsetY);\n        ctx.stroke();\n      }\n      return;\n    default:\n      ctx.save();\n      ctx.translate(cx, cy);\n      ctx.rotate(shape.rotation || 0);\n      ctx.translate(-cx, -cy);\n  }\n}\n\n// Draws selection handles & rotation grip around the shape\nfunction drawSelection(ctx, shape, offsetX = 0, offsetY = 0) {\n  const R = 5;\n  if (shape.tool === \"line\") {\n    // line endpoints as handles\n    const p0 = {\n      x: shape.x0 + offsetX,\n      y: shape.y0 + offsetY\n    };\n    const p1 = {\n      x: shape.x1 + offsetX,\n      y: shape.y1 + offsetY\n    };\n    ctx.fillStyle = \"white\";\n    ctx.fill();\n    ctx.beginPath();\n    ctx.moveTo(p0.x, p0.y);\n    ctx.lineTo(p1.x, p1.y);\n    ctx.stroke();\n    [p0, p1].forEach(pt => {\n      ctx.beginPath();\n      ctx.arc(pt.x, pt.y, R, 0, 2 * Math.PI);\n      ctx.fill();\n      ctx.stroke();\n    });\n    return;\n  }\n  const {\n    xMin,\n    yMin,\n    xMax,\n    yMax\n  } = getBBox(shape);\n  const midX = (xMin + xMax) / 2;\n  const rotY = yMin - 20;\n  ctx.beginPath();\n  ctx.moveTo(midX, yMin);\n  ctx.lineTo(midX, rotY);\n  ctx.stroke();\n\n  // draw rotate handle line + circle\n  ctx.beginPath();\n  ctx.arc(midX, rotY, R, 0, 2 * Math.PI);\n  ctx.stroke();\n\n  // draw bounding rect\n  ctx.strokeRect(xMin, yMin, xMax - xMin, yMax - yMin);\n\n  // draw corner handles\n  ctx.fillStyle = \"white\";\n  ctx.fill();\n  [{\n    x: xMin,\n    y: yMin\n  }, {\n    x: xMax,\n    y: yMin\n  }, {\n    x: xMax,\n    y: yMax\n  }, {\n    x: xMin,\n    y: yMax\n  }].forEach(pt => {\n    ctx.beginPath();\n    ctx.arc(pt.x, pt.y, R, 0, 2 * Math.PI);\n    ctx.fill();\n    ctx.stroke();\n  });\n}\nconst Canvas = /*#__PURE__*/_s(/*#__PURE__*/forwardRef(_c = _s(({\n  activeTool,\n  lineColor,\n  fillColor,\n  strokeWidth,\n  showGrid,\n  snapToGrid\n}, ref) => {\n  _s();\n  // refs for DOM and data\n  const containerRef = useRef(null);\n  const c1Ref = useRef(null); // background canvas\n  const c2Ref = useRef(null); // top canvas for interactions\n  const shapesRef = useRef([]); // all shapes data\n  const undoStack = useRef([]); // history for undo\n  const redoStack = useRef([]); // history for redo\n  const polyRef = useRef([]); // building polyline\n  const clipboardRef = useRef([]); // copy/paste buffer\n  const curveRef = useRef([]); // building curve\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [startPos, setStartPos] = useState({\n    x: 0,\n    y: 0\n  });\n  const dragRef = useRef({\n    // drag state\n    isDragging: false,\n    isResizing: false,\n    origShape: null,\n    origRotation: 0,\n    center: null,\n    startAngle: 0\n  });\n\n  // draws all shapes\n  const redrawAll = useCallback((context = c1Ref, offsetX = 0, offsetY = 0, backgroundColor = \"#979797\") => {\n    const c = context.current;\n    const ctx = c.getContext(\"2d\");\n    ctx.clearRect(0, 0, c.width, c.height);\n    console.log(\"width:\", c.width, \"height:\", c.height);\n    ctx.fillStyle = backgroundColor;\n    ctx.fillRect(0, 0, c.width, c.height);\n    if (showGrid) drawGrid(ctx, c.width, c.height, 100);\n    shapesRef.current.forEach(s => {\n      ctx.save();\n      ctx.strokeStyle = s.lineColor || lineColor;\n      ctx.fillStyle = s.fillColor || fillColor;\n      ctx.lineWidth = s.strokeWidth || strokeWidth;\n      drawShape(ctx, s, offsetX, offsetY);\n      if (s.selected) {\n        ctx.save();\n        ctx.strokeStyle = \"#ff7300\";\n        ctx.lineWidth = 2;\n        drawSelection(ctx, s, offsetX, offsetY);\n        ctx.restore();\n      }\n      ctx.restore();\n    });\n  }, [fillColor, lineColor, showGrid, strokeWidth]);\n  const gridSize = 100;\n  const snap = ({\n    x,\n    y\n  }) => ({\n    x: Math.round(x / gridSize) * gridSize,\n    y: Math.round(y / gridSize) * gridSize\n  });\n\n  // useImperativeHandle lets parent components call these methods on our Canvas ref\n  useImperativeHandle(ref, () => ({\n    // exportShapes: clear any selection, serialize shapes to JSON and trigger a download\n    exportShapes: () => {\n      // Deselect all shapes\n      shapesRef.current.forEach(s => s.selected = false);\n      // Turn shapes array into a JSON string\n      const data = JSON.stringify(shapesRef.current, null, 2);\n      // Create a Blob from the JSON\n      const blob = new Blob([data], {\n        type: \"application/json\"\n      });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement(\"a\");\n      a.href = url;\n      a.download = \"shapes.json\";\n      a.click();\n      URL.revokeObjectURL(url);\n    },\n    // downloadJPEG: render the shapes into an off-screen canvas, then save as JPEG\n    downloadJPEG: () => {\n      // Deselect\n      shapesRef.current.forEach(s => s.selected = false);\n\n      // Compute collective bounding box\n      const pad = 20;\n      let minX = Infinity,\n        minY = Infinity;\n      let maxX = -Infinity,\n        maxY = -Infinity;\n      shapesRef.current.forEach(s => {\n        const bb = s.points ? getBBox(s) // handles poly-line & curve\n        : s.tool === \"circle\" || s.tool === \"polygon\" ? (() => {\n          // your existing circle/polygon logic\n          const r = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n          return {\n            xMin: s.x0 - r,\n            yMin: s.y0 - r,\n            xMax: s.x0 + r,\n            yMax: s.y0 + r\n          };\n        })() : {\n          // fallback for rectangles, lines, triangles…\n          xMin: Math.min(s.x0, s.x1),\n          yMin: Math.min(s.y0, s.y1),\n          xMax: Math.max(s.x0, s.x1),\n          yMax: Math.max(s.y0, s.y1)\n        };\n        minX = Math.min(minX, bb.xMin);\n        minY = Math.min(minY, bb.yMin);\n        maxX = Math.max(maxX, bb.xMax);\n        maxY = Math.max(maxY, bb.yMax);\n      });\n      if (minX === Infinity) {\n        // empty canvas\n        minX = 0;\n        minY = 0;\n        maxX = c1Ref.current.width;\n        maxY = c1Ref.current.height;\n      }\n\n      // pad & size\n      minX -= pad;\n      minY -= pad;\n      maxX += pad;\n      maxY += pad;\n      const sw = maxX - minX;\n      const sh = maxY - minY;\n\n      // offscreen canvas\n      const tmp = document.createElement(\"canvas\");\n      tmp.width = sw;\n      tmp.height = sh;\n      const ctx1 = tmp.getContext(\"2d\");\n      const fakeRef = {\n        current: Object.assign(tmp, {\n          getContext: () => ctx1,\n          width: sw,\n          height: sh\n        })\n      };\n\n      // redraw and export\n      redrawAll(fakeRef, -minX, -minY, \"#ffffff\");\n      const dataURL = tmp.toDataURL(\"image/jpeg\", 1.0);\n      const link = document.createElement(\"a\");\n      link.href = dataURL;\n      link.download = \"shapes.jpg\";\n      link.click();\n    },\n    // downloadPDF: similar to JPEG but slices canvas into A4 pages with jsPDF\n    downloadPDF: () => {\n      // Deselect all\n      shapesRef.current.forEach(s => s.selected = false);\n\n      // Compute collective bounding box\n      const pad = 20;\n      let minX = Infinity,\n        minY = Infinity;\n      let maxX = -Infinity,\n        maxY = -Infinity;\n      shapesRef.current.forEach(s => {\n        // getBBox handles poly-line & curve\n        const bb = s.points ? getBBox(s) : s.tool === \"circle\" || s.tool === \"polygon\" ? (() => {\n          const r = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n          return {\n            xMin: s.x0 - r,\n            yMin: s.y0 - r,\n            xMax: s.x0 + r,\n            yMax: s.y0 + r\n          };\n        })() : {\n          xMin: Math.min(s.x0, s.x1),\n          yMin: Math.min(s.y0, s.y1),\n          xMax: Math.max(s.x0, s.x1),\n          yMax: Math.max(s.y0, s.y1)\n        };\n        minX = Math.min(minX, bb.xMin);\n        minY = Math.min(minY, bb.yMin);\n        maxX = Math.max(maxX, bb.xMax);\n        maxY = Math.max(maxY, bb.yMax);\n      });\n\n      // if empty fall back to full canvas\n      if (minX === Infinity) {\n        minX = 0;\n        minY = 0;\n        maxX = c1Ref.current.width;\n        maxY = c1Ref.current.height;\n      }\n\n      // pad & compute size\n      minX -= pad;\n      minY -= pad;\n      maxX += pad;\n      maxY += pad;\n      const sw = maxX - minX;\n      const sh = maxY - minY;\n\n      // create off-screen canvas\n      const tmp = document.createElement(\"canvas\");\n      tmp.width = sw;\n      tmp.height = sh;\n      const ctx1 = tmp.getContext(\"2d\");\n\n      // fake the ref interface so redrawAll sees width/height\n      const fakeRef = {\n        current: Object.assign(tmp, {\n          getContext: () => ctx1,\n          width: sw,\n          height: sh\n        })\n      };\n\n      // redraw everything into tmp\n      redrawAll(fakeRef, -minX, -minY, \"#ffffff\");\n\n      // set up PDF\n      const orientation = sw > sh ? \"landscape\" : \"portrait\";\n      const pdf = new jsPDF({\n        orientation,\n        unit: \"px\",\n        format: \"a4\"\n      });\n      const pageW = pdf.internal.pageSize.getWidth();\n      const pageH = pdf.internal.pageSize.getHeight();\n      const scale = Math.min(pageW / sw, pageH / sh);\n\n      // slice into pages\n      let yOffset = 0;\n      while (yOffset < sh) {\n        const sliceH = Math.min(sh - yOffset, pageH / scale);\n        const slice = document.createElement(\"canvas\");\n        slice.width = sw;\n        slice.height = sliceH;\n        slice.getContext(\"2d\").drawImage(tmp, 0, yOffset, sw, sliceH, 0, 0, sw, sliceH);\n        const imgData = slice.toDataURL(\"image/jpeg\", 1.0);\n        const imgW = sw * scale;\n        const imgH = sliceH * scale;\n        const xPos = (pageW - imgW) / 2;\n        pdf.addImage(imgData, \"JPEG\", xPos, 0, imgW, imgH);\n        yOffset += sliceH;\n        if (yOffset < sh) pdf.addPage();\n      }\n\n      // download\n      pdf.save(\"shapes.pdf\");\n    },\n    // loadShapes: replace the current shapes array and redraw\n    loadShapes: arr => {\n      shapesRef.current = arr.map(s => ({\n        ...s,\n        selected: false\n      }));\n      redrawAll();\n    },\n    // getShapeCount: returns how many shapes are currently stored\n    getShapeCount: () => shapesRef.current.length,\n    // clearShapes: empties all shapes and clears the canvas\n    clearShapes: () => {\n      shapesRef.current = [];\n      redrawAll();\n    }\n  }));\n  useEffect(() => {\n    // resizes both canvases to fill the container\n    const resize = () => {\n      const {\n        width,\n        height\n      } = containerRef.current.getBoundingClientRect();\n      // Update both canvas elements to match new dimension\n      [c1Ref, c2Ref].forEach(r => {\n        r.current.width = width;\n        r.current.height = height;\n      });\n      // Redraw everything at the new size\n      redrawAll();\n    };\n    // Call it once immediately so canvases start at correct size\n    resize();\n    // And re-run on every window resize\n    window.addEventListener(\"resize\", resize);\n    // Clean up listener when component unmounts or redrawAll changes\n    return () => window.removeEventListener(\"resize\", resize);\n  }, [redrawAll]);\n  useEffect(() => {\n    let dirty = false;\n    // If any selected shape’s strokeWidth, lineColor, or fillColor\n    // no longer matches the current props, update it and mark dirty\n    shapesRef.current.forEach(s => {\n      if (s.selected && (s.strokeWidth !== strokeWidth || s.lineColor !== lineColor || s.fillColor !== fillColor)) {\n        s.strokeWidth = strokeWidth;\n        s.lineColor = lineColor;\n        s.fillColor = fillColor;\n        dirty = true;\n      }\n    });\n    // If we changed anything, trigger a redraw to apply the new styles\n    if (dirty) redrawAll();\n  }, [strokeWidth, lineColor, fillColor, redrawAll]);\n  useEffect(() => {\n    // Any time showGrid changes, redraw so the grid appears or disappears\n    redrawAll();\n  }, [showGrid, redrawAll]);\n  useEffect(() => {\n    // Grab the overlay canvas and its 2D context\n    const c2 = c2Ref.current;\n    const ctx2 = c2.getContext(\"2d\");\n    // convert a mouse event into coordinates relative to the canvas\n    const getPos = e => {\n      const r = c2.getBoundingClientRect();\n      return {\n        x: e.clientX - r.left,\n        y: e.clientY - r.top\n      };\n    };\n    // mousedown: either start a rotate/resize/drag or begin drawing a new shape\n    const down = e => {\n      let pos = getPos(e);\n      if (activeTool === \"select\") {\n        const ctx1 = c1Ref.current.getContext(\"2d\");\n        // clear any previous selection\n        shapesRef.current.forEach(sh => sh.selected = false);\n\n        // walk shapes top-down to see what was clicked\n        for (let i = shapesRef.current.length - 1; i >= 0; i--) {\n          const s = shapesRef.current[i];\n          const {\n            xMin,\n            yMin,\n            xMax,\n            yMax\n          } = getBBox(s);\n          const midX = (xMin + xMax) / 2;\n          const rotY = yMin - 20;\n\n          // checks if clicked on rotate handle\n          if (Math.hypot(pos.x - midX, pos.y - rotY) < 6) {\n            s.selected = true;\n            dragRef.current = {\n              isRotating: true,\n              shapeIndex: i,\n              origRotation: s.rotation || 0,\n              center: {\n                x: midX,\n                y: (yMin + yMax) / 2\n              },\n              startAngle: Math.atan2(pos.y - (yMin + yMax) / 2, pos.x - midX)\n            };\n            redrawAll();\n            return;\n          }\n\n          // checks if clicked inside shape. If not, continue\n          if (!hitTest(ctx1, s, pos.x, pos.y, strokeWidth)) continue;\n\n          // if clicked on a corner handle. start resize\n          const corners = [{\n            x: xMin,\n            y: yMin\n          }, {\n            x: xMax,\n            y: yMin\n          }, {\n            x: xMax,\n            y: yMax\n          }, {\n            x: xMin,\n            y: yMax\n          }];\n          for (let h = 0; h < corners.length; h++) {\n            const dx = pos.x - corners[h].x;\n            const dy = pos.y - corners[h].y;\n            if (Math.hypot(dx, dy) < 6) {\n              s.selected = true;\n              dragRef.current = {\n                isResizing: true,\n                shapeIndex: i,\n                handleIndex: h,\n                origShape: JSON.parse(JSON.stringify(s))\n              };\n              redrawAll();\n              return;\n            }\n          }\n\n          // else clicked inside shape body. start drag\n          s.selected = true;\n          dragRef.current = {\n            isDragging: true,\n            startPos: pos,\n            origShape: JSON.parse(JSON.stringify(s)),\n            shapeIndex: i\n          };\n          redrawAll();\n          return;\n        }\n\n        // clicked empty space. clear selection\n        redrawAll();\n        return;\n      }\n      // polyline mode: accumulate points\n      if (activeTool === \"poly-line\") {\n        polyRef.current.push(pos);\n        setIsDrawing(true);\n        return;\n      }\n      // curve mode: accumulate points\n      if (activeTool === \"curve\") {\n        curveRef.current.push(pos);\n        setIsDrawing(true);\n        return;\n      }\n      // shape tools: record start and begin drawing preview\n      if (![\"square\", \"line\", \"circle\", \"triangle\", \"polygon\"].includes(activeTool)) return;\n      setStartPos(pos);\n      setIsDrawing(true);\n    };\n\n    // mousemove: update rotate/resize/drag or draw preview\n    const move = e => {\n      let pos = getPos(e);\n      // rotating\n      if (dragRef.current.isRotating) {\n        const {\n          shapeIndex,\n          origRotation,\n          center,\n          startAngle\n        } = dragRef.current;\n        const target = shapesRef.current[shapeIndex];\n        const currPos = getPos(e);\n        const currentAngle = Math.atan2(currPos.y - center.y, currPos.x - center.x);\n        target.rotation = origRotation + (currentAngle - startAngle);\n        redrawAll();\n        return;\n      }\n      // resizing: compute scale factors, update shape dimensions\n      if (dragRef.current.isResizing) {\n        const {\n          shapeIndex,\n          handleIndex,\n          origShape\n        } = dragRef.current;\n        const target = shapesRef.current[shapeIndex];\n        const pos = getPos(e);\n        const {\n          xMin,\n          yMin,\n          xMax,\n          yMax\n        } = getBBox(origShape);\n        const corners = [{\n          x: xMin,\n          y: yMin\n        }, {\n          x: xMax,\n          y: yMin\n        }, {\n          x: xMax,\n          y: yMax\n        }, {\n          x: xMin,\n          y: yMax\n        }];\n        const origHandle = corners[handleIndex];\n        const opposite = corners[(handleIndex + 2) % 4];\n        if (origShape.tool === \"line\") {\n          if (handleIndex === 0) {\n            target.x0 = pos.x;\n            target.y0 = pos.y;\n          } else {\n            target.x1 = pos.x;\n            target.y1 = pos.y;\n          }\n        } else if (origShape.tool === \"circle\" || origShape.tool === \"polygon\") {\n          target.x1 = pos.x;\n          target.y1 = pos.y;\n          redrawAll();\n          return;\n        } else {\n          const sx = (pos.x - opposite.x) / (origHandle.x - opposite.x);\n          const sy = (pos.y - opposite.y) / (origHandle.y - opposite.y);\n          if (origShape.points) {\n            target.points = origShape.points.map(p => ({\n              x: opposite.x + (p.x - opposite.x) * sx,\n              y: opposite.y + (p.y - opposite.y) * sy\n            }));\n          } else {\n            [\"x0\", \"y0\", \"x1\", \"y1\"].forEach(k => {\n              const coord = k.startsWith(\"x\") ? \"x\" : \"y\";\n              const o = origShape[k];\n              const off = opposite[coord];\n              target[k] = off + (o - off) * (coord === \"x\" ? sx : sy);\n            });\n          }\n        }\n        redrawAll();\n        return;\n      }\n      // dragging: compute dx, dy, move shape, optionally snap to grid\n      if (activeTool === \"select\" && dragRef.current.isDragging) {\n        const {\n          startPos,\n          origShape,\n          shapeIndex\n        } = dragRef.current;\n        const target = shapesRef.current[shapeIndex];\n        const dx = pos.x - startPos.x;\n        const dy = pos.y - startPos.y;\n        if (origShape.points) {\n          target.points = origShape.points.map(p => ({\n            x: p.x + dx,\n            y: p.y + dy\n          }));\n        } else {\n          target.x0 = origShape.x0 + dx;\n          target.y0 = origShape.y0 + dy;\n          target.x1 = origShape.x1 + dx;\n          target.y1 = origShape.y1 + dy;\n        }\n        // snap to grid                \n        if (showGrid && e.shiftKey) {\n          const {\n            xMin,\n            yMin\n          } = getBBox(target);\n          const {\n            x: snapX,\n            y: snapY\n          } = snap({\n            x: xMin,\n            y: yMin\n          });\n          const offX = snapX - xMin;\n          const offY = snapY - yMin;\n          if (target.points) {\n            target.points.forEach(p => {\n              p.x += offX;\n              p.y += offY;\n            });\n          } else {\n            target.x0 += offX;\n            target.y0 += offY;\n            target.x1 += offX;\n            target.y1 += offY;\n          }\n        }\n        redrawAll();\n        return;\n      }\n\n      // computes preview of poly-line after each segment\n      if (activeTool === \"poly-line\" && polyRef.current.length) {\n        ctx2.clearRect(0, 0, c2.width, c2.height);\n        ctx2.strokeStyle = lineColor;\n        ctx2.lineWidth = strokeWidth;\n        ctx2.beginPath();\n        ctx2.moveTo(polyRef.current[0].x, polyRef.current[0].y);\n        for (let p of polyRef.current.slice(1)) ctx2.lineTo(p.x, p.y);\n        ctx2.lineTo(pos.x, pos.y);\n        ctx2.stroke();\n        return;\n      }\n      // computes preview of curve after each segment\n      if (activeTool === \"curve\" && curveRef.current.length) {\n        ctx2.clearRect(0, 0, c2.width, c2.height);\n        const pts = [...curveRef.current, pos];\n        const shape = {\n          tool: \"curve\",\n          points: pts,\n          strokeWidth,\n          lineColor\n        };\n        ctx2.lineWidth = shape.strokeWidth;\n        ctx2.strokeStyle = shape.lineColor;\n        drawShape(ctx2, shape, 0, 0);\n        return;\n      }\n      if (!isDrawing) return;\n      // drawing a new shape: show live preview on overlay\n      ctx2.clearRect(0, 0, c2.width, c2.height);\n      const {\n        x,\n        y\n      } = pos;\n      const shape = {\n        tool: activeTool,\n        x0: startPos.x,\n        y0: startPos.y,\n        x1: x,\n        y1: y,\n        isSquare: e.shiftKey && activeTool === \"square\",\n        isCircle: e.shiftKey && activeTool === \"circle\",\n        strokeWidth: 1,\n        lineColor: \"black\",\n        fillColor: \"transparent\"\n      };\n      ctx2.fillStyle = shape.fillColor;\n      ctx2.strokeStyle = shape.lineColor;\n      ctx2.lineWidth = shape.strokeWidth;\n      drawShape(ctx2, shape, 0, 0);\n    };\n\n    // mouseup: finalize rotate/resize/drag or commit new shape\n    const up = e => {\n      if (dragRef.current.isRotating) {\n        dragRef.current.isRotating = false;\n        redrawAll();\n        return;\n      }\n      if (dragRef.current.isResizing) {\n        dragRef.current.isResizing = false;\n        dragRef.current.handleIndex = null;\n        dragRef.current.origShape = null;\n        return;\n      }\n      if (activeTool === \"select\" && dragRef.current.isDragging) {\n        dragRef.current.isDragging = false;\n        dragRef.current.shapeIndex = null;\n        return;\n      }\n      if ([\"poly-line\", \"curve\"].includes(activeTool)) return;\n      if (!isDrawing) return;\n      const pos = getPos(e);\n      // commit new shape if mouse actually moved\n      if (pos.x === startPos.x && pos.y === startPos.y) {\n        ctx2.clearRect(0, 0, c2.width, c2.height);\n        setIsDrawing(false);\n        return;\n      }\n      const isCircle = activeTool === \"circle\" && e.shiftKey;\n      const isSquare = activeTool === \"square\" && e.shiftKey;\n\n      // construct newShape, push to shapesRef, record undo, select, redraw…\n      const newShape = {\n        tool: activeTool,\n        x0: startPos.x,\n        y0: startPos.y,\n        x1: pos.x,\n        y1: pos.y,\n        lineColor,\n        fillColor,\n        strokeWidth,\n        isCircle,\n        isSquare,\n        rotation: 0,\n        selected: false\n      };\n      shapesRef.current.push(newShape);\n      undoStack.current.push({\n        type: 'add',\n        shapes: [newShape]\n      });\n      redoStack.current = [];\n      shapesRef.current.forEach(s => s.selected = false);\n      shapesRef.current[shapesRef.current.length - 1].selected = true;\n      redrawAll();\n      ctx2.clearRect(0, 0, c2.width, c2.height);\n      setIsDrawing(false);\n    };\n\n    // dblclick: finish polyline\n    const finishPoly = e => {\n      if (activeTool !== \"poly-line\" || polyRef.current.length < 2) return;\n      const newShape = {\n        tool: \"poly-line\",\n        points: polyRef.current.slice(),\n        lineColor,\n        fillColor,\n        strokeWidth,\n        selected: false\n      };\n      shapesRef.current.push(newShape);\n      undoStack.current.push({\n        type: 'add',\n        shapes: [newShape]\n      });\n      redoStack.current = [];\n      shapesRef.current.forEach(s => s.selected = false);\n      shapesRef.current[shapesRef.current.length - 1].selected = true;\n      redrawAll();\n      ctx2.clearRect(0, 0, c2.width, c2.height);\n      polyRef.current = [];\n    };\n\n    // dblclick: finish curve\n    const finishCurve = e => {\n      if (activeTool !== \"curve\" || curveRef.current.length < 2) return;\n      const pos = getPos(e);\n      curveRef.current.push(pos);\n      const newShape = {\n        tool: \"curve\",\n        points: curveRef.current.slice(),\n        lineColor,\n        fillColor,\n        strokeWidth,\n        selected: false\n      };\n      shapesRef.current.push(newShape);\n      undoStack.current.push({\n        type: 'add',\n        shapes: [newShape]\n      });\n      redoStack.current = [];\n      shapesRef.current.forEach(s => s.selected = false);\n      shapesRef.current[shapesRef.current.length - 1].selected = true;\n      redrawAll();\n      ctx2.clearRect(0, 0, c2.width, c2.height);\n      curveRef.current = [];\n      setIsDrawing(false);\n    };\n\n    // 10) keydown: undo/redo/delete/copy/paste shortcuts\n    const onKeyDown = e => {\n      // undo\n      if (e.ctrlKey && !e.shiftKey && e.key.toLowerCase() === 'z') {\n        const action = undoStack.current.pop();\n        if (!action) return;\n        if (action.type === 'add') {\n          shapesRef.current = shapesRef.current.filter(s => !action.shapes.includes(s));\n        } else if (action.type === 'delete') {\n          action.shapes.forEach((shape, i) => {\n            const idx = action.indices[i];\n            shapesRef.current.splice(idx, 0, shape);\n          });\n        }\n        redoStack.current.push(action);\n        redrawAll();\n      }\n      // redo\n      else if (e.ctrlKey && e.shiftKey && e.key.toLowerCase() === 'z') {\n        const action = redoStack.current.pop();\n        if (!action) return;\n        if (action.type === 'add') {\n          shapesRef.current.push(...action.shapes);\n        } else if (action.type === 'delete') {\n          shapesRef.current = shapesRef.current.filter(s => !action.shapes.includes(s));\n        }\n        undoStack.current.push(action);\n        redrawAll();\n      }\n      // delete\n      else if (e.key === \"Delete\") {\n        const deleted = shapesRef.current.filter(s => s.selected);\n        if (deleted.length) {\n          const indices = deleted.map(s => shapesRef.current.indexOf(s));\n          shapesRef.current = shapesRef.current.filter(s => !s.selected);\n          undoStack.current.push({\n            type: 'delete',\n            shapes: deleted,\n            indices\n          });\n          redoStack.current = [];\n          redrawAll();\n        }\n      }\n      //copy\n      else if (e.ctrlKey && e.key.toLowerCase() === \"c\") {\n        clipboardRef.current = shapesRef.current.filter(s => s.selected).map(s => JSON.parse(JSON.stringify(s)));\n      }\n      // paste\n      else if (e.ctrlKey && e.key.toLowerCase() === \"v\") {\n        const OFFSET = 10;\n        const pasted = clipboardRef.current.map(orig => {\n          const copy = JSON.parse(JSON.stringify(orig));\n          if (copy.points) {\n            copy.points.forEach(p => {\n              p.x += OFFSET;\n              p.y += OFFSET;\n            });\n          } else {\n            copy.x0 += OFFSET;\n            copy.y0 += OFFSET;\n            copy.x1 += OFFSET;\n            copy.y1 += OFFSET;\n          }\n          copy.selected = true;\n          copy.rotation = copy.rotation || 0;\n          return copy;\n        });\n        if (pasted.length) {\n          shapesRef.current.forEach(s => s.selected = false);\n          shapesRef.current.push(...pasted);\n          undoStack.current.push({\n            type: 'add',\n            shapes: pasted\n          });\n          redoStack.current = [];\n          redrawAll();\n        }\n      }\n    };\n    // attach all listener\n    c2.addEventListener(\"mousedown\", down);\n    c2.addEventListener(\"mousemove\", move);\n    c2.addEventListener(\"mouseup\", up);\n    c2.addEventListener(\"dblclick\", finishPoly);\n    c2.addEventListener(\"dblclick\", finishCurve);\n    window.addEventListener(\"keydown\", onKeyDown);\n\n    // cleanup on unmount or deps change\n    return () => {\n      c2.removeEventListener(\"mousedown\", down);\n      c2.removeEventListener(\"mousemove\", move);\n      c2.removeEventListener(\"mouseup\", up);\n      c2.removeEventListener(\"dblclick\", finishPoly);\n      c2.removeEventListener(\"dblclick\", finishCurve);\n      window.removeEventListener(\"keydown\", onKeyDown);\n    };\n  }, [activeTool, isDrawing, startPos, lineColor, fillColor, strokeWidth, showGrid, snapToGrid, redrawAll]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    className: \"canvas-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: c1Ref\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1025,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: c2Ref,\n      style: {\n        backgroundColor: \"transparent\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1026,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1024,\n    columnNumber: 9\n  }, this);\n}, \"Zt0W++od58SsPncavL+Tq2mGU54=\")), \"Zt0W++od58SsPncavL+Tq2mGU54=\");\n_c2 = Canvas;\nexport default Canvas;\nvar _c, _c2;\n$RefreshReg$(_c, \"Canvas$forwardRef\");\n$RefreshReg$(_c2, \"Canvas\");","map":{"version":3,"names":["React","forwardRef","useImperativeHandle","useRef","useEffect","useState","useCallback","jsPDF","jsxDEV","_jsxDEV","drawGrid","ctx","width","height","cell","save","beginPath","strokeStyle","lineWidth","x","moveTo","lineTo","y","stroke","restore","getBBox","shape","points","xs","map","p","ys","xMin","Math","min","yMin","xMax","max","yMax","tool","cx","x0","cy","y0","isCircle","r","hypot","x1","y1","rx","abs","ry","radius","sides","i","ang","PI","push","cos","sin","isSquare","dx","dy","side","w","h","xA","yA","xB","yB","hitTest","defaultStroke","path","Path2D","strokeWidth","isPointInStroke","drawShape","offsetX","offsetY","translate","rotate","rotation","fillRect","strokeRect","arc","ellipse","fill","closePath","px","py","length","slice","pts","prev","curr","mx","my","quadraticCurveTo","last","drawSelection","R","p0","p1","fillStyle","forEach","pt","midX","rotY","Canvas","_s","_c","activeTool","lineColor","fillColor","showGrid","snapToGrid","ref","containerRef","c1Ref","c2Ref","shapesRef","undoStack","redoStack","polyRef","clipboardRef","curveRef","isDrawing","setIsDrawing","startPos","setStartPos","dragRef","isDragging","isResizing","origShape","origRotation","center","startAngle","redrawAll","context","backgroundColor","c","current","getContext","clearRect","console","log","s","selected","gridSize","snap","round","exportShapes","data","JSON","stringify","blob","Blob","type","url","URL","createObjectURL","a","document","createElement","href","download","click","revokeObjectURL","downloadJPEG","pad","minX","Infinity","minY","maxX","maxY","bb","sw","sh","tmp","ctx1","fakeRef","Object","assign","dataURL","toDataURL","link","downloadPDF","orientation","pdf","unit","format","pageW","internal","pageSize","getWidth","pageH","getHeight","scale","yOffset","sliceH","drawImage","imgData","imgW","imgH","xPos","addImage","addPage","loadShapes","arr","getShapeCount","clearShapes","resize","getBoundingClientRect","window","addEventListener","removeEventListener","dirty","c2","ctx2","getPos","e","clientX","left","clientY","top","down","pos","isRotating","shapeIndex","atan2","corners","handleIndex","parse","includes","move","target","currPos","currentAngle","origHandle","opposite","sx","sy","k","coord","startsWith","o","off","shiftKey","snapX","snapY","offX","offY","up","newShape","shapes","finishPoly","finishCurve","onKeyDown","ctrlKey","key","toLowerCase","action","pop","filter","idx","indices","splice","deleted","indexOf","OFFSET","pasted","orig","copy","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","_c2","$RefreshReg$"],"sources":["/home/nightsquid/Desktop/Graphics 1/Shape-Editor/src/components/Canvas.js"],"sourcesContent":["import React, { forwardRef, useImperativeHandle, useRef, useEffect, useState, useCallback } from \"react\";\nimport { jsPDF } from \"jspdf\";\nimport \"../css/canvas.css\";\n\n\n// Draws a grid background for the canvas\nfunction drawGrid(ctx, width, height, cell) {\n    ctx.save();\n    ctx.beginPath();\n    ctx.strokeStyle = \"#ffffff3a\";    \n    ctx.lineWidth = 1;\n    \n    // draw vertical grid lines\n    for (let x = 0; x <= width; x += cell) {\n        ctx.moveTo(x, 0);\n        ctx.lineTo(x, height);\n    }\n\n    // draw horizontal grid lines\n    for (let y = 0; y <= height; y += cell) {\n        ctx.moveTo(0, y);\n        ctx.lineTo(width, y);\n    }\n    ctx.stroke();\n    ctx.restore();\n}\n\n// Computes the bounding box for any shape\nfunction getBBox(shape) {\n    if (shape.points) {\n        // poly-line or curve: use all points\n        const xs = shape.points.map(p => p.x);\n        const ys = shape.points.map(p => p.y);\n        return {\n            xMin: Math.min(...xs),\n            yMin: Math.min(...ys),\n            xMax: Math.max(...xs),\n            yMax: Math.max(...ys)\n        };\n    }\n    // circle or ellipse: calculate extents from center and radii\n    if (shape.tool === \"circle\") {\n        const cx = shape.x0, cy = shape.y0;\n        if (shape.isCircle) {\n            const r = Math.hypot(shape.x1 - shape.x0, shape.y1 - shape.y0);\n            return { xMin: cx - r, yMin: cy - r, xMax: cx + r, yMax: cy + r };\n        } else {\n            const rx = Math.abs(shape.x1 - shape.x0);\n            const ry = Math.abs(shape.y1 - shape.y0);\n            return { xMin: cx - rx, yMin: cy - ry, xMax: cx + rx, yMax: cy + ry };\n        }\n    }\n    // regular pentagon: approximate by computing all vertices\n    if (shape.tool === \"polygon\") {\n        const cx = shape.x0;\n        const cy = shape.y0;\n        const radius = Math.hypot(shape.x1 - shape.x0, shape.y1 - shape.y0);\n        const sides = 5;  \n        const xs = [];\n        const ys = [];\n        for (let i = 0; i < sides; i++) {\n            const ang = i * (2 * Math.PI / sides) - Math.PI / 2;\n            xs.push(cx + radius * Math.cos(ang));\n            ys.push(cy + radius * Math.sin(ang));\n        }\n        return {\n            xMin: Math.min(...xs),\n            yMin: Math.min(...ys),\n            xMax: Math.max(...xs),\n            yMax: Math.max(...ys)\n        };\n    }\n    // square: enforce equal width/height then compute corners\n    if (shape.tool === \"square\" && shape.isSquare) {\n        const dx = shape.x1 - shape.x0;\n        const dy = shape.y1 - shape.y0;\n        const side = Math.min(Math.abs(dx), Math.abs(dy));\n        const w = dx < 0 ? -side : side;\n        const h = dy < 0 ? -side : side;\n\n        const xA = shape.x0;\n        const yA = shape.y0;\n        const xB = shape.x0 + w;\n        const yB = shape.y0 + h;\n\n        return {\n            xMin: Math.min(xA, xB),\n            yMin: Math.min(yA, yB),\n            xMax: Math.max(xA, xB),\n            yMax: Math.max(yA, yB)\n        };\n    }\n    // default rectangle: two corner points\n    return {\n        xMin: Math.min(shape.x0, shape.x1),\n        yMin: Math.min(shape.y0, shape.y1),\n        xMax: Math.max(shape.x0, shape.x1),\n        yMax: Math.max(shape.y0, shape.y1)\n    };\n}\n\n// Hit-testing: checks if point (x,y) hits the shape stroke or interior\nfunction hitTest(ctx, shape, x, y, defaultStroke) {\n    const path = new Path2D();\n    ctx.lineWidth = (shape.strokeWidth || defaultStroke) + 15;\n    switch (shape.tool) {\n        case \"line\":\n            path.moveTo(shape.x0, shape.y0);\n            path.lineTo(shape.x1, shape.y1);\n            return ctx.isPointInStroke(path, x, y);\n        default:\n            const { xMin, yMin, xMax, yMax } = getBBox(shape);\n            return x >= xMin && x <= xMax && y >= yMin && y <= yMax;\n    }\n}\n\n// Draws the shape itself, applying any rotation and offset\nfunction drawShape(ctx, shape, offsetX = 0, offsetY = 0) {\n    const x0 = shape.x0 + offsetX;\n    const y0 = shape.y0 + offsetY;\n    const x1 = shape.x1 + offsetX;\n    const y1 = shape.y1 + offsetY;\n    // compute center of bounding box for rotation\n    const { xMin, yMin, xMax, yMax } = getBBox(shape);\n    const cx = (xMin + xMax) / 2 + offsetX;\n    const cy = (yMin + yMax) / 2 + offsetY;\n\n    ctx.save();\n    ctx.translate(cx, cy);\n    ctx.rotate(shape.rotation || 0);\n    ctx.translate(-cx, -cy);\n\n    switch (shape.tool) {\n        case \"square\": {\n            const dx = shape.x1 - shape.x0;\n            const dy = shape.y1 - shape.y0;\n            let w, h;\n            if (shape.isSquare) {\n                const side = Math.min(Math.abs(dx), Math.abs(dy));\n                w = dx < 0 ? -side : side;\n                h = dy < 0 ? -side : side;\n            } else {\n                w = dx;\n                h = dy;\n            }\n            ctx.fillRect(shape.x0 + offsetX, shape.y0 + offsetY, w, h);\n            ctx.strokeRect(shape.x0 + offsetX, shape.y0 + offsetY, w, h);\n            return;\n        }\n        case \"line\":\n            ctx.beginPath();\n            ctx.moveTo(x0, y0);\n            ctx.lineTo(x1, y1);\n            ctx.stroke();\n            return;\n        case \"circle\":\n            ctx.beginPath();\n            if (shape.isCircle) {\n                const r = Math.hypot(shape.x1 - shape.x0, shape.y1 - shape.y0);\n                ctx.arc(x0, y0, r, 0, 2 * Math.PI);\n            } else {\n                ctx.ellipse(x0, y0, Math.abs(shape.x1 - shape.x0), Math.abs(shape.y1 - shape.y0), 0, 0, 2 * Math.PI);\n            }\n            ctx.fill();\n            ctx.stroke();\n            return;\n        case \"triangle\":\n            ctx.beginPath();\n            ctx.moveTo(x0, y0);\n            ctx.lineTo(x1, y0);\n            ctx.lineTo((x0 + x1) / 2, y1);\n            ctx.closePath();\n            ctx.fill();\n            ctx.stroke();\n            return;\n        case \"polygon\":\n            ctx.beginPath();\n            const sides = 5;\n            const radius = Math.hypot(shape.x1 - shape.x0, shape.y1 - shape.y0);\n            for (let i = 0; i < sides; i++) {\n                const ang = i * (2 * Math.PI / sides) - Math.PI / 2;\n                const px = shape.x0 + offsetX + radius * Math.cos(ang);\n                const py = shape.y0 + offsetY + radius * Math.sin(ang);\n                if (i === 0) ctx.moveTo(px, py);\n                else ctx.lineTo(px, py);\n            }\n            ctx.closePath();\n            ctx.fill();\n            ctx.stroke();\n            return;\n        case \"poly-line\":\n            if (shape.points && shape.points.length) {\n                ctx.beginPath();\n                ctx.moveTo(shape.points[0].x + offsetX, shape.points[0].y + offsetY);\n                for (let p of shape.points.slice(1)) ctx.lineTo(p.x + offsetX, p.y + offsetY);\n                ctx.stroke();\n            }\n            return;\n        case \"curve\":\n            if (shape.points && shape.points.length) {\n                ctx.beginPath();\n                const pts = shape.points;\n                ctx.moveTo(pts[0].x + offsetX, pts[0].y + offsetY);\n                for (let i = 1; i < pts.length; i++) {\n                    const prev = pts[i - 1];\n                    const curr = pts[i];\n                    const mx = (prev.x + curr.x) / 2 + offsetX;\n                    const my = (prev.y + curr.y) / 2 + offsetY;\n                    ctx.quadraticCurveTo(prev.x + offsetX, prev.y + offsetY, mx, my);\n                }\n\n                const last = pts[pts.length - 1];\n                ctx.lineTo(last.x + offsetX, last.y + offsetY);\n\n                ctx.stroke();\n            }\n            return;\n        default:\n            ctx.save();\n            ctx.translate(cx, cy);\n            ctx.rotate(shape.rotation || 0);\n            ctx.translate(-cx, -cy);\n\n    }\n}\n\n// Draws selection handles & rotation grip around the shape\nfunction drawSelection(ctx, shape, offsetX = 0, offsetY = 0) {\n    const R = 5;\n    if (shape.tool === \"line\") {\n        // line endpoints as handles\n        const p0 = { x: shape.x0 + offsetX, y: shape.y0 + offsetY };\n        const p1 = { x: shape.x1 + offsetX, y: shape.y1 + offsetY };\n        ctx.fillStyle = \"white\";\n        ctx.fill();\n        ctx.beginPath(); ctx.moveTo(p0.x, p0.y); ctx.lineTo(p1.x, p1.y); ctx.stroke();\n        [p0, p1].forEach(pt => {\n            ctx.beginPath(); ctx.arc(pt.x, pt.y, R, 0, 2 * Math.PI); ctx.fill(); ctx.stroke();\n        });\n        return;\n    }\n    const { xMin, yMin, xMax, yMax } = getBBox(shape);\n    const midX = (xMin + xMax) / 2;\n    const rotY = yMin - 20;\n    ctx.beginPath();\n    ctx.moveTo(midX, yMin);\n    ctx.lineTo(midX, rotY);\n    ctx.stroke();\n\n    // draw rotate handle line + circle\n    ctx.beginPath();\n    ctx.arc(midX, rotY, R, 0, 2 * Math.PI);\n\n    ctx.stroke();\n\n    // draw bounding rect\n    ctx.strokeRect(xMin, yMin, xMax - xMin, yMax - yMin);\n\n    // draw corner handles\n    ctx.fillStyle = \"white\";\n    ctx.fill();\n    [\n        { x: xMin, y: yMin },\n        { x: xMax, y: yMin },\n        { x: xMax, y: yMax },\n        { x: xMin, y: yMax }\n    ].forEach(pt => {\n        ctx.beginPath(); ctx.arc(pt.x, pt.y, R, 0, 2 * Math.PI); ctx.fill(); ctx.stroke();\n    });\n}\n\nconst Canvas = forwardRef(({ activeTool, lineColor, fillColor, strokeWidth, showGrid, snapToGrid }, ref) => {\n    // refs for DOM and data\n    const containerRef = useRef(null);\n    const c1Ref = useRef(null);        // background canvas\n    const c2Ref = useRef(null);        // top canvas for interactions\n    const shapesRef = useRef([]);      // all shapes data\n    const undoStack = useRef([]);      // history for undo\n    const redoStack = useRef([]);      // history for redo\n    const polyRef = useRef([]);        // building polyline\n    const clipboardRef = useRef([]);   // copy/paste buffer\n    const curveRef = useRef([]);       // building curve\n    const [isDrawing, setIsDrawing] = useState(false);\n    const [startPos, setStartPos] = useState({ x: 0, y: 0 });\n    const dragRef = useRef({       // drag state\n        isDragging: false,\n        isResizing: false,\n        origShape: null,\n        origRotation: 0,\n        center: null,\n        startAngle: 0\n    });\n\n    // draws all shapes\n    const redrawAll = useCallback((context = c1Ref, offsetX = 0, offsetY = 0, backgroundColor = \"#979797\") => {\n        const c = context.current;\n        const ctx = c.getContext(\"2d\");\n        ctx.clearRect(0, 0, c.width, c.height);\n        console.log(\"width:\", c.width, \"height:\", c.height);\n\n        \n        ctx.fillStyle = backgroundColor;\n        ctx.fillRect(0, 0, c.width, c.height);\n        \n        if (showGrid) drawGrid(ctx, c.width, c.height, 100);   \n        shapesRef.current.forEach(s => {\n            ctx.save();\n            ctx.strokeStyle = s.lineColor || lineColor;\n            ctx.fillStyle = s.fillColor || fillColor;\n            ctx.lineWidth = s.strokeWidth || strokeWidth;\n            drawShape(ctx, s, offsetX, offsetY);\n            if (s.selected) {\n                ctx.save(); ctx.strokeStyle = \"#ff7300\"; ctx.lineWidth = 2;\n                drawSelection(ctx, s, offsetX, offsetY);\n                ctx.restore();\n            }\n            ctx.restore();\n        });\n    }, [fillColor, lineColor, showGrid, strokeWidth]);\n\n    const gridSize = 100; \n    const snap = ({ x, y }) => ({\n        x: Math.round(x / gridSize) * gridSize,\n        y: Math.round(y / gridSize) * gridSize\n    });\n\n    // useImperativeHandle lets parent components call these methods on our Canvas ref\n    useImperativeHandle(ref, () => ({\n        // exportShapes: clear any selection, serialize shapes to JSON and trigger a download\n        exportShapes: () => {\n            // Deselect all shapes\n            shapesRef.current.forEach(s => (s.selected = false));\n            // Turn shapes array into a JSON string\n            const data = JSON.stringify(shapesRef.current, null, 2);\n            // Create a Blob from the JSON\n            const blob = new Blob([data], { type: \"application/json\" });\n            const url = URL.createObjectURL(blob);\n            const a = document.createElement(\"a\");\n            a.href = url; a.download = \"shapes.json\"; a.click();\n            URL.revokeObjectURL(url);\n        },\n        // downloadJPEG: render the shapes into an off-screen canvas, then save as JPEG\n        downloadJPEG: () => {\n            // Deselect\n            shapesRef.current.forEach(s => s.selected = false);\n\n            // Compute collective bounding box\n            const pad = 20;\n            let minX = Infinity, minY = Infinity;\n            let maxX = -Infinity, maxY = -Infinity;\n\n            shapesRef.current.forEach(s => {\n                const bb = s.points\n                    ? getBBox(s) // handles poly-line & curve\n                    : (s.tool === \"circle\" || s.tool === \"polygon\")\n                        ? (() => { // your existing circle/polygon logic\n                            const r = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n                            return { xMin: s.x0 - r, yMin: s.y0 - r, xMax: s.x0 + r, yMax: s.y0 + r };\n                        })()\n                        : { // fallback for rectangles, lines, triangles…\n                            xMin: Math.min(s.x0, s.x1),\n                            yMin: Math.min(s.y0, s.y1),\n                            xMax: Math.max(s.x0, s.x1),\n                            yMax: Math.max(s.y0, s.y1),\n                        };\n\n                minX = Math.min(minX, bb.xMin);\n                minY = Math.min(minY, bb.yMin);\n                maxX = Math.max(maxX, bb.xMax);\n                maxY = Math.max(maxY, bb.yMax);\n            });\n\n            if (minX === Infinity) {\n                // empty canvas\n                minX = 0; minY = 0;\n                maxX = c1Ref.current.width;\n                maxY = c1Ref.current.height;\n            }\n\n            // pad & size\n            minX -= pad; minY -= pad;\n            maxX += pad; maxY += pad;\n            const sw = maxX - minX;\n            const sh = maxY - minY;\n\n            // offscreen canvas\n            const tmp = document.createElement(\"canvas\");\n            tmp.width = sw; tmp.height = sh;\n            const ctx1 = tmp.getContext(\"2d\");\n            const fakeRef = { current: Object.assign(tmp, { getContext: () => ctx1, width: sw, height: sh }) };\n\n            // redraw and export\n            redrawAll(fakeRef, -minX, -minY, \"#ffffff\");\n            const dataURL = tmp.toDataURL(\"image/jpeg\", 1.0);\n            const link = document.createElement(\"a\");\n            link.href = dataURL;\n            link.download = \"shapes.jpg\";\n            link.click();\n        },\n        // downloadPDF: similar to JPEG but slices canvas into A4 pages with jsPDF\n        downloadPDF: () => {\n            // Deselect all\n            shapesRef.current.forEach(s => (s.selected = false));\n\n            // Compute collective bounding box\n            const pad = 20;\n            let minX = Infinity, minY = Infinity;\n            let maxX = -Infinity, maxY = -Infinity;\n\n            shapesRef.current.forEach(s => {\n                // getBBox handles poly-line & curve\n                const bb = s.points\n                    ? getBBox(s)\n                    : (s.tool === \"circle\" || s.tool === \"polygon\")\n                        ? (() => {\n                            const r = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n                            return {\n                                xMin: s.x0 - r,\n                                yMin: s.y0 - r,\n                                xMax: s.x0 + r,\n                                yMax: s.y0 + r\n                            };\n                        })()\n                        : {\n                            xMin: Math.min(s.x0, s.x1),\n                            yMin: Math.min(s.y0, s.y1),\n                            xMax: Math.max(s.x0, s.x1),\n                            yMax: Math.max(s.y0, s.y1)\n                        };\n\n                minX = Math.min(minX, bb.xMin);\n                minY = Math.min(minY, bb.yMin);\n                maxX = Math.max(maxX, bb.xMax);\n                maxY = Math.max(maxY, bb.yMax);\n            });\n\n            // if empty fall back to full canvas\n            if (minX === Infinity) {\n                minX = 0; minY = 0;\n                maxX = c1Ref.current.width;\n                maxY = c1Ref.current.height;\n            }\n\n            // pad & compute size\n            minX -= pad; minY -= pad;\n            maxX += pad; maxY += pad;\n            const sw = maxX - minX;\n            const sh = maxY - minY;\n\n            // create off-screen canvas\n            const tmp = document.createElement(\"canvas\");\n            tmp.width = sw;\n            tmp.height = sh;\n            const ctx1 = tmp.getContext(\"2d\");\n\n            // fake the ref interface so redrawAll sees width/height\n            const fakeRef = {\n                current: Object.assign(tmp, {\n                    getContext: () => ctx1,\n                    width: sw,\n                    height: sh\n                })\n            };\n\n            // redraw everything into tmp\n            redrawAll(fakeRef, -minX, -minY, \"#ffffff\");\n\n            // set up PDF\n            const orientation = sw > sh ? \"landscape\" : \"portrait\";\n            const pdf = new jsPDF({ orientation, unit: \"px\", format: \"a4\" });\n            const pageW = pdf.internal.pageSize.getWidth();\n            const pageH = pdf.internal.pageSize.getHeight();\n            const scale = Math.min(pageW / sw, pageH / sh);\n\n            // slice into pages\n            let yOffset = 0;\n            while (yOffset < sh) {\n                const sliceH = Math.min(sh - yOffset, pageH / scale);\n                const slice = document.createElement(\"canvas\");\n                slice.width = sw;\n                slice.height = sliceH;\n                slice.getContext(\"2d\").drawImage(\n                    tmp,\n                    0, yOffset, sw, sliceH,\n                    0, 0, sw, sliceH\n                );\n\n                const imgData = slice.toDataURL(\"image/jpeg\", 1.0);\n                const imgW = sw * scale;\n                const imgH = sliceH * scale;\n                const xPos = (pageW - imgW) / 2;\n\n                pdf.addImage(imgData, \"JPEG\", xPos, 0, imgW, imgH);\n                yOffset += sliceH;\n                if (yOffset < sh) pdf.addPage();\n            }\n\n            // download\n            pdf.save(\"shapes.pdf\");\n        },\n        // loadShapes: replace the current shapes array and redraw\n        loadShapes: (arr) => { shapesRef.current = arr.map(s => ({ ...s, selected: false })); redrawAll(); },\n        // getShapeCount: returns how many shapes are currently stored\n        getShapeCount: () => shapesRef.current.length,\n        // clearShapes: empties all shapes and clears the canvas\n        clearShapes: () => { shapesRef.current = []; redrawAll(); }\n    }));\n\n    useEffect(() => {\n        // resizes both canvases to fill the container\n        const resize = () => {\n            const { width, height } = containerRef.current.getBoundingClientRect();\n            // Update both canvas elements to match new dimension\n            [c1Ref, c2Ref].forEach(r => { r.current.width = width; r.current.height = height; });\n            // Redraw everything at the new size\n            redrawAll();\n        };\n        // Call it once immediately so canvases start at correct size\n        resize();\n        // And re-run on every window resize\n        window.addEventListener(\"resize\", resize);\n        // Clean up listener when component unmounts or redrawAll changes\n        return () => window.removeEventListener(\"resize\", resize);\n    }, [redrawAll]);\n\n    useEffect(() => {\n        let dirty = false;\n        // If any selected shape’s strokeWidth, lineColor, or fillColor\n        // no longer matches the current props, update it and mark dirty\n        shapesRef.current.forEach(s => {\n            if (s.selected && (s.strokeWidth !== strokeWidth || s.lineColor !== lineColor || s.fillColor !== fillColor)) {\n                s.strokeWidth = strokeWidth;\n                s.lineColor = lineColor;\n                s.fillColor = fillColor;\n                dirty = true;\n            }\n        });\n        // If we changed anything, trigger a redraw to apply the new styles\n        if (dirty) redrawAll();\n    }, [strokeWidth, lineColor, fillColor, redrawAll]);\n\n    useEffect(() => {\n        // Any time showGrid changes, redraw so the grid appears or disappears\n        redrawAll();\n    }, [showGrid, redrawAll]);\n\n    useEffect(() => {\n        // Grab the overlay canvas and its 2D context\n        const c2 = c2Ref.current;\n        const ctx2 = c2.getContext(\"2d\");\n        // convert a mouse event into coordinates relative to the canvas\n        const getPos = e => {\n            const r = c2.getBoundingClientRect();\n            return { x: e.clientX - r.left, y: e.clientY - r.top };\n        };\n        // mousedown: either start a rotate/resize/drag or begin drawing a new shape\n        const down = e => {\n            let pos = getPos(e);\n            if (activeTool === \"select\") {\n                const ctx1 = c1Ref.current.getContext(\"2d\");\n                // clear any previous selection\n                shapesRef.current.forEach(sh => sh.selected = false);\n\n                // walk shapes top-down to see what was clicked\n                for (let i = shapesRef.current.length - 1; i >= 0; i--) {\n                    const s = shapesRef.current[i];\n\n                    const { xMin, yMin, xMax, yMax } = getBBox(s);\n                    const midX = (xMin + xMax) / 2;\n                    const rotY = yMin - 20;\n\n                    // checks if clicked on rotate handle\n                    if (Math.hypot(pos.x - midX, pos.y - rotY) < 6) {\n                        s.selected = true;\n                        \n                        dragRef.current = {\n                            isRotating: true,\n                            shapeIndex: i,\n                            origRotation: s.rotation || 0,\n                            \n                            center: { x: midX, y: (yMin + yMax) / 2 },\n                            startAngle: Math.atan2(\n                                pos.y - ((yMin + yMax) / 2),\n                                pos.x - midX\n                            )\n                        };\n\n                        redrawAll();\n                        return;    \n                    }\n\n                    // checks if clicked inside shape. If not, continue\n                    if (!hitTest(ctx1, s, pos.x, pos.y, strokeWidth)) continue;\n\n                    // if clicked on a corner handle. start resize\n                    const corners = [\n                        { x: xMin, y: yMin },\n                        { x: xMax, y: yMin },\n                        { x: xMax, y: yMax },\n                        { x: xMin, y: yMax }\n                    ];\n                    for (let h = 0; h < corners.length; h++) {\n                        const dx = pos.x - corners[h].x;\n                        const dy = pos.y - corners[h].y;\n                        if (Math.hypot(dx, dy) < 6) {        \n                            s.selected = true;\n                            dragRef.current = {\n                                isResizing: true,\n                                shapeIndex: i,\n                                handleIndex: h,\n                                origShape: JSON.parse(JSON.stringify(s))\n                            };\n                            redrawAll();\n                            return;  \n                        }\n                    }\n\n                    // else clicked inside shape body. start drag\n                    s.selected = true;\n                    dragRef.current = {\n                        isDragging: true,\n                        startPos: pos,                                \n                        origShape: JSON.parse(JSON.stringify(s)),     \n                        shapeIndex: i\n                    };\n                    redrawAll();\n                    return;\n                }\n\n                // clicked empty space. clear selection\n                redrawAll();\n                return;\n            }\n            // polyline mode: accumulate points\n            if (activeTool === \"poly-line\") { polyRef.current.push(pos); setIsDrawing(true); return; }\n            // curve mode: accumulate points\n            if (activeTool === \"curve\") { curveRef.current.push(pos); setIsDrawing(true); return; }\n            // shape tools: record start and begin drawing preview\n            if (![\"square\", \"line\", \"circle\", \"triangle\", \"polygon\"].includes(activeTool)) return;\n            setStartPos(pos);\n            setIsDrawing(true);\n        };\n\n        // mousemove: update rotate/resize/drag or draw preview\n        const move = e => {\n            let pos = getPos(e);\n            // rotating\n            if (dragRef.current.isRotating) {\n                const { shapeIndex, origRotation, center, startAngle } = dragRef.current;\n                const target = shapesRef.current[shapeIndex];\n                const currPos = getPos(e);\n\n                \n                const currentAngle = Math.atan2(currPos.y - center.y, currPos.x - center.x);\n                target.rotation = origRotation + (currentAngle - startAngle);\n\n                redrawAll();\n                return;\n            }\n            // resizing: compute scale factors, update shape dimensions\n            if (dragRef.current.isResizing) {\n                const { shapeIndex, handleIndex, origShape } = dragRef.current;\n                const target = shapesRef.current[shapeIndex];\n                const pos = getPos(e);             \n                const { xMin, yMin, xMax, yMax } = getBBox(origShape);\n                const corners = [\n                    { x: xMin, y: yMin },\n                    { x: xMax, y: yMin },\n                    { x: xMax, y: yMax },\n                    { x: xMin, y: yMax }\n                ];\n                const origHandle = corners[handleIndex];\n                const opposite = corners[(handleIndex + 2) % 4];\n\n                if (origShape.tool === \"line\") {\n                    \n                    if (handleIndex === 0) {\n                        target.x0 = pos.x; target.y0 = pos.y;\n                    } else {\n                        target.x1 = pos.x; target.y1 = pos.y;\n                    }\n                } else if (origShape.tool === \"circle\" || origShape.tool === \"polygon\") {\n                    \n                    \n                    target.x1 = pos.x;\n                    target.y1 = pos.y;\n                    redrawAll();\n                    return;\n                } else {\n                    \n                    const sx = (pos.x - opposite.x) / (origHandle.x - opposite.x);\n                    const sy = (pos.y - opposite.y) / (origHandle.y - opposite.y);\n\n                    if (origShape.points) {\n                        \n                        target.points = origShape.points.map(p => ({\n                            x: opposite.x + (p.x - opposite.x) * sx,\n                            y: opposite.y + (p.y - opposite.y) * sy\n                        }));\n                    } else {\n                        \n                        [\"x0\", \"y0\", \"x1\", \"y1\"].forEach(k => {\n                            const coord = k.startsWith(\"x\") ? \"x\" : \"y\";\n                            const o = origShape[k];\n                            const off = opposite[coord];\n                            target[k] = off + (o - off) * (coord === \"x\" ? sx : sy);\n                        });\n                    }\n                }\n\n                redrawAll();\n                return;\n            }\n            // dragging: compute dx, dy, move shape, optionally snap to grid\n            if (activeTool === \"select\" && dragRef.current.isDragging) {\n                const { startPos, origShape, shapeIndex } = dragRef.current;\n                const target = shapesRef.current[shapeIndex];\n                \n                const dx = pos.x - startPos.x;\n                const dy = pos.y - startPos.y;\n                \n                if (origShape.points) {\n                    target.points = origShape.points.map(p => ({\n                        x: p.x + dx,\n                        y: p.y + dy\n                    }));\n                } else {\n                    target.x0 = origShape.x0 + dx;\n                    target.y0 = origShape.y0 + dy;\n                    target.x1 = origShape.x1 + dx;\n                    target.y1 = origShape.y1 + dy;\n                }\n                // snap to grid                \n                if (showGrid && e.shiftKey) {\n                    const { xMin, yMin } = getBBox(target);\n                    const { x: snapX, y: snapY } = snap({ x: xMin, y: yMin });\n                    const offX = snapX - xMin;\n                    const offY = snapY - yMin;\n\n                    if (target.points) {\n                        target.points.forEach(p => {\n                            p.x += offX;\n                            p.y += offY;\n                        });\n                    } else {\n                        target.x0 += offX; target.y0 += offY;\n                        target.x1 += offX; target.y1 += offY;\n                    }\n                }\n\n                redrawAll();\n                return;\n            }\n\n            // computes preview of poly-line after each segment\n            if (activeTool === \"poly-line\" && polyRef.current.length) {\n                ctx2.clearRect(0, 0, c2.width, c2.height);\n                ctx2.strokeStyle = lineColor; ctx2.lineWidth = strokeWidth;\n                ctx2.beginPath(); ctx2.moveTo(polyRef.current[0].x, polyRef.current[0].y);\n                for (let p of polyRef.current.slice(1)) ctx2.lineTo(p.x, p.y);\n                ctx2.lineTo(pos.x, pos.y); ctx2.stroke(); return;\n            }\n            // computes preview of curve after each segment\n            if (activeTool === \"curve\" && curveRef.current.length) {\n                ctx2.clearRect(0, 0, c2.width, c2.height);\n                const pts = [...curveRef.current, pos];\n                const shape = {\n                    tool: \"curve\",\n                    points: pts,\n                    strokeWidth,\n                    lineColor,\n                };\n                ctx2.lineWidth = shape.strokeWidth;\n                ctx2.strokeStyle = shape.lineColor;\n                drawShape(ctx2, shape, 0, 0);\n                return;\n            }\n            \n            if (!isDrawing) return;\n            // drawing a new shape: show live preview on overlay\n            ctx2.clearRect(0, 0, c2.width, c2.height);\n            const { x, y } = pos;\n\n            const shape = {\n                tool: activeTool,\n                x0: startPos.x,\n                y0: startPos.y,\n                x1: x,\n                y1: y,\n                isSquare: e.shiftKey && activeTool === \"square\",\n                isCircle: e.shiftKey && activeTool === \"circle\",\n                strokeWidth: 1,\n                lineColor: \"black\",\n                fillColor: \"transparent\"\n            }\n            ctx2.fillStyle = shape.fillColor;\n            ctx2.strokeStyle = shape.lineColor;\n            ctx2.lineWidth = shape.strokeWidth;\n\n            drawShape(ctx2, shape, 0, 0);\n        };\n\n        // mouseup: finalize rotate/resize/drag or commit new shape\n        const up = e => {\n            if (dragRef.current.isRotating) {\n                dragRef.current.isRotating = false;\n\n                redrawAll();\n                return;\n            }\n            if (dragRef.current.isResizing) {\n                dragRef.current.isResizing = false;\n                dragRef.current.handleIndex = null;\n                dragRef.current.origShape = null;\n                return;\n            }\n            if (activeTool === \"select\" && dragRef.current.isDragging) {\n                dragRef.current.isDragging = false;\n                dragRef.current.shapeIndex = null;\n                return;\n            }\n            if ([\"poly-line\", \"curve\"].includes(activeTool)) return;\n            if (!isDrawing) return;\n            const pos = getPos(e);\n            // commit new shape if mouse actually moved\n            if (pos.x === startPos.x && pos.y === startPos.y) {\n                ctx2.clearRect(0, 0, c2.width, c2.height);\n                setIsDrawing(false);\n                return;\n            }\n            const isCircle = activeTool === \"circle\" && e.shiftKey;\n            const isSquare = activeTool === \"square\" && e.shiftKey;\n\n            // construct newShape, push to shapesRef, record undo, select, redraw…\n            const newShape = {\n                tool: activeTool,\n                x0: startPos.x, y0: startPos.y,\n                x1: pos.x, y1: pos.y,\n                lineColor, fillColor, strokeWidth,\n                isCircle, isSquare,\n                rotation: 0,\n                selected: false\n            };\n\n            shapesRef.current.push(newShape);\n\n            undoStack.current.push({ type: 'add', shapes: [newShape] });\n            \n            redoStack.current = [];\n\n            shapesRef.current.forEach(s => (s.selected = false));\n            shapesRef.current[shapesRef.current.length - 1].selected = true;\n            redrawAll();\n            ctx2.clearRect(0, 0, c2.width, c2.height);\n            setIsDrawing(false);\n        };\n\n        // dblclick: finish polyline\n        const finishPoly = e => {\n            if (activeTool !== \"poly-line\" || polyRef.current.length < 2) return;\n            const newShape = {\n                tool: \"poly-line\",\n                points: polyRef.current.slice(),\n                lineColor, fillColor, strokeWidth,\n                selected: false\n            };\n            shapesRef.current.push(newShape);\n\n            undoStack.current.push({ type: 'add', shapes: [newShape] });\n            \n            redoStack.current = [];\n\n            shapesRef.current.forEach(s => (s.selected = false));\n            shapesRef.current[shapesRef.current.length - 1].selected = true;\n            redrawAll();\n            ctx2.clearRect(0, 0, c2.width, c2.height);\n            polyRef.current = [];\n        };\n\n        // dblclick: finish curve\n        const finishCurve = e => {\n            if (activeTool !== \"curve\" || curveRef.current.length < 2) return;\n\n            \n            const pos = getPos(e);\n            curveRef.current.push(pos);\n\n            \n            const newShape = {\n                tool: \"curve\",\n                points: curveRef.current.slice(),\n                lineColor, fillColor, strokeWidth,\n                selected: false\n            };\n            shapesRef.current.push(newShape);\n\n            undoStack.current.push({ type: 'add', shapes: [newShape] });\n            \n            redoStack.current = [];\n\n            \n            shapesRef.current.forEach(s => (s.selected = false));\n            shapesRef.current[shapesRef.current.length - 1].selected = true;\n            redrawAll();\n            ctx2.clearRect(0, 0, c2.width, c2.height);\n\n            \n            curveRef.current = [];\n            setIsDrawing(false);\n        };\n\n        // 10) keydown: undo/redo/delete/copy/paste shortcuts\n        const onKeyDown = e => {\n            // undo\n            if (e.ctrlKey && !e.shiftKey && e.key.toLowerCase() === 'z') {\n                const action = undoStack.current.pop();\n                if (!action) return;\n\n                if (action.type === 'add') {\n                    \n                    shapesRef.current = shapesRef.current.filter(\n                        s => !action.shapes.includes(s)\n                    );\n                } else if (action.type === 'delete') {\n                    \n                    action.shapes.forEach((shape, i) => {\n                        const idx = action.indices[i];\n                        shapesRef.current.splice(idx, 0, shape);\n                    });\n                }\n\n                redoStack.current.push(action);\n                redrawAll();\n            }\n            // redo\n            else if (e.ctrlKey && e.shiftKey && e.key.toLowerCase() === 'z') {\n                const action = redoStack.current.pop();\n                if (!action) return;\n\n                if (action.type === 'add') {\n                    \n                    shapesRef.current.push(...action.shapes);\n                } else if (action.type === 'delete') {\n                    \n                    shapesRef.current = shapesRef.current.filter(\n                        s => !action.shapes.includes(s)\n                    );\n                }\n\n                undoStack.current.push(action);\n                redrawAll();\n            }\n            // delete\n            else if (e.key === \"Delete\") {\n                const deleted = shapesRef.current.filter(s => s.selected);\n                if (deleted.length) {\n                    \n                    const indices = deleted.map(s => shapesRef.current.indexOf(s));\n                    shapesRef.current = shapesRef.current.filter(s => !s.selected);\n                    undoStack.current.push({ type: 'delete', shapes: deleted, indices });\n                    redoStack.current = [];\n                    redrawAll();\n                }\n            }\n            //copy\n            else if (e.ctrlKey && e.key.toLowerCase() === \"c\") {\n                clipboardRef.current = shapesRef.current\n                    .filter(s => s.selected)\n                    .map(s => JSON.parse(JSON.stringify(s)));\n            }\n            // paste\n            else if (e.ctrlKey && e.key.toLowerCase() === \"v\") {\n                const OFFSET = 10;\n                const pasted = clipboardRef.current.map(orig => {\n                    const copy = JSON.parse(JSON.stringify(orig));\n\n                    if (copy.points) {\n                        copy.points.forEach(p => {\n                            p.x += OFFSET; p.y += OFFSET;\n                        });\n                    } else {\n                        copy.x0 += OFFSET; copy.y0 += OFFSET;\n                        copy.x1 += OFFSET; copy.y1 += OFFSET;\n                    }\n\n                    copy.selected = true;\n                    copy.rotation = copy.rotation || 0;\n                    return copy;\n                });\n\n                if (pasted.length) {\n\n                    shapesRef.current.forEach(s => s.selected = false);\n                    shapesRef.current.push(...pasted);\n\n\n                    undoStack.current.push({ type: 'add', shapes: pasted });\n                    redoStack.current = [];\n\n                    redrawAll();\n                }\n            }\n        };\n        // attach all listener\n        c2.addEventListener(\"mousedown\", down);\n        c2.addEventListener(\"mousemove\", move);\n        c2.addEventListener(\"mouseup\", up);\n        c2.addEventListener(\"dblclick\", finishPoly);\n        c2.addEventListener(\"dblclick\", finishCurve);\n        window.addEventListener(\"keydown\", onKeyDown);\n\n        // cleanup on unmount or deps change\n        return () => {\n            c2.removeEventListener(\"mousedown\", down);\n            c2.removeEventListener(\"mousemove\", move);\n            c2.removeEventListener(\"mouseup\", up);\n            c2.removeEventListener(\"dblclick\", finishPoly);\n            c2.removeEventListener(\"dblclick\", finishCurve);\n            window.removeEventListener(\"keydown\", onKeyDown);\n        };\n    }, [activeTool, isDrawing, startPos, lineColor, fillColor, strokeWidth, showGrid, snapToGrid, redrawAll]);\n\n    return (\n        <div ref={containerRef} className=\"canvas-container\">\n            <canvas ref={c1Ref} />\n            <canvas ref={c2Ref} style={{ backgroundColor: \"transparent\" }} />\n        </div>\n    );\n});\n\nexport default Canvas;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}