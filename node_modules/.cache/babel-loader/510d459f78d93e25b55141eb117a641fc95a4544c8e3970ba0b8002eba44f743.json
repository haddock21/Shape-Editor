{"ast":null,"code":"import React,{forwardRef,useImperativeHandle,useRef,useEffect,useState,useCallback}from\"react\";import{jsPDF}from\"jspdf\";import\"../css/canvas.css\";// Draws a grid background for the canvas\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function drawGrid(ctx,width,height,cell){ctx.save();ctx.beginPath();ctx.strokeStyle=\"#ffffff3a\";ctx.lineWidth=1;// draw vertical grid lines\nfor(let x=0;x<=width;x+=cell){ctx.moveTo(x,0);ctx.lineTo(x,height);}// draw horizontal grid lines\nfor(let y=0;y<=height;y+=cell){ctx.moveTo(0,y);ctx.lineTo(width,y);}ctx.stroke();ctx.restore();}// Computes the bounding box for any shape\nfunction getBBox(shape){if(shape.points){// poly-line or curve: use all points\nconst xs=shape.points.map(p=>p.x);const ys=shape.points.map(p=>p.y);return{xMin:Math.min(...xs),yMin:Math.min(...ys),xMax:Math.max(...xs),yMax:Math.max(...ys)};}// circle or ellipse: calculate extents from center and radii\nif(shape.tool===\"circle\"){const cx=shape.x0,cy=shape.y0;if(shape.isCircle){const r=Math.hypot(shape.x1-shape.x0,shape.y1-shape.y0);return{xMin:cx-r,yMin:cy-r,xMax:cx+r,yMax:cy+r};}else{const rx=Math.abs(shape.x1-shape.x0);const ry=Math.abs(shape.y1-shape.y0);return{xMin:cx-rx,yMin:cy-ry,xMax:cx+rx,yMax:cy+ry};}}// regular pentagon: approximate by computing all vertices\nif(shape.tool===\"polygon\"){const cx=shape.x0;const cy=shape.y0;const radius=Math.hypot(shape.x1-shape.x0,shape.y1-shape.y0);const sides=5;const xs=[];const ys=[];for(let i=0;i<sides;i++){const ang=i*(2*Math.PI/sides)-Math.PI/2;xs.push(cx+radius*Math.cos(ang));ys.push(cy+radius*Math.sin(ang));}return{xMin:Math.min(...xs),yMin:Math.min(...ys),xMax:Math.max(...xs),yMax:Math.max(...ys)};}// square: enforce equal width/height then compute corners\nif(shape.tool===\"square\"&&shape.isSquare){const dx=shape.x1-shape.x0;const dy=shape.y1-shape.y0;const side=Math.min(Math.abs(dx),Math.abs(dy));const w=dx<0?-side:side;const h=dy<0?-side:side;const xA=shape.x0;const yA=shape.y0;const xB=shape.x0+w;const yB=shape.y0+h;return{xMin:Math.min(xA,xB),yMin:Math.min(yA,yB),xMax:Math.max(xA,xB),yMax:Math.max(yA,yB)};}// default rectangle: two corner points\nreturn{xMin:Math.min(shape.x0,shape.x1),yMin:Math.min(shape.y0,shape.y1),xMax:Math.max(shape.x0,shape.x1),yMax:Math.max(shape.y0,shape.y1)};}// Hit-testing: checks if point (x,y) hits the shape stroke or interior\nfunction hitTest(ctx,shape,x,y,defaultStroke){const path=new Path2D();ctx.lineWidth=(shape.strokeWidth||defaultStroke)+15;switch(shape.tool){case\"line\":path.moveTo(shape.x0,shape.y0);path.lineTo(shape.x1,shape.y1);return ctx.isPointInStroke(path,x,y);default:const{xMin,yMin,xMax,yMax}=getBBox(shape);return x>=xMin&&x<=xMax&&y>=yMin&&y<=yMax;}}// Draws the shape itself, applying any rotation and offset\nfunction drawShape(ctx,shape){let offsetX=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;let offsetY=arguments.length>3&&arguments[3]!==undefined?arguments[3]:0;const x0=shape.x0+offsetX;const y0=shape.y0+offsetY;const x1=shape.x1+offsetX;const y1=shape.y1+offsetY;// compute center of bounding box for rotation\nconst{xMin,yMin,xMax,yMax}=getBBox(shape);const cx=(xMin+xMax)/2+offsetX;const cy=(yMin+yMax)/2+offsetY;ctx.save();ctx.translate(cx,cy);ctx.rotate(shape.rotation||0);ctx.translate(-cx,-cy);switch(shape.tool){case\"square\":{const dx=shape.x1-shape.x0;const dy=shape.y1-shape.y0;let w,h;if(shape.isSquare){const side=Math.min(Math.abs(dx),Math.abs(dy));w=dx<0?-side:side;h=dy<0?-side:side;}else{w=dx;h=dy;}ctx.fillRect(shape.x0+offsetX,shape.y0+offsetY,w,h);ctx.strokeRect(shape.x0+offsetX,shape.y0+offsetY,w,h);return;}case\"line\":ctx.beginPath();ctx.moveTo(x0,y0);ctx.lineTo(x1,y1);ctx.stroke();return;case\"circle\":ctx.beginPath();if(shape.isCircle){const r=Math.hypot(shape.x1-shape.x0,shape.y1-shape.y0);ctx.arc(x0,y0,r,0,2*Math.PI);}else{ctx.ellipse(x0,y0,Math.abs(shape.x1-shape.x0),Math.abs(shape.y1-shape.y0),0,0,2*Math.PI);}ctx.fill();ctx.stroke();return;case\"triangle\":ctx.beginPath();ctx.moveTo(x0,y0);ctx.lineTo(x1,y0);ctx.lineTo((x0+x1)/2,y1);ctx.closePath();ctx.fill();ctx.stroke();return;case\"polygon\":ctx.beginPath();const sides=5;const radius=Math.hypot(shape.x1-shape.x0,shape.y1-shape.y0);for(let i=0;i<sides;i++){const ang=i*(2*Math.PI/sides)-Math.PI/2;const px=shape.x0+offsetX+radius*Math.cos(ang);const py=shape.y0+offsetY+radius*Math.sin(ang);if(i===0)ctx.moveTo(px,py);else ctx.lineTo(px,py);}ctx.closePath();ctx.fill();ctx.stroke();return;case\"poly-line\":if(shape.points&&shape.points.length){ctx.beginPath();ctx.moveTo(shape.points[0].x+offsetX,shape.points[0].y+offsetY);for(let p of shape.points.slice(1))ctx.lineTo(p.x+offsetX,p.y+offsetY);ctx.stroke();}return;case\"curve\":if(shape.points&&shape.points.length){ctx.beginPath();const pts=shape.points;ctx.moveTo(pts[0].x+offsetX,pts[0].y+offsetY);for(let i=1;i<pts.length;i++){const prev=pts[i-1];const curr=pts[i];const mx=(prev.x+curr.x)/2+offsetX;const my=(prev.y+curr.y)/2+offsetY;ctx.quadraticCurveTo(prev.x+offsetX,prev.y+offsetY,mx,my);}const last=pts[pts.length-1];ctx.lineTo(last.x+offsetX,last.y+offsetY);ctx.stroke();}return;default:ctx.save();ctx.translate(cx,cy);ctx.rotate(shape.rotation||0);ctx.translate(-cx,-cy);}}// Draws selection handles & rotation grip around the shape\nfunction drawSelection(ctx,shape){let offsetX=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;let offsetY=arguments.length>3&&arguments[3]!==undefined?arguments[3]:0;const R=5;if(shape.tool===\"line\"){// line endpoints as handles\nconst p0={x:shape.x0+offsetX,y:shape.y0+offsetY};const p1={x:shape.x1+offsetX,y:shape.y1+offsetY};ctx.fillStyle=\"white\";ctx.fill();ctx.beginPath();ctx.moveTo(p0.x,p0.y);ctx.lineTo(p1.x,p1.y);ctx.stroke();[p0,p1].forEach(pt=>{ctx.beginPath();ctx.arc(pt.x,pt.y,R,0,2*Math.PI);ctx.fill();ctx.stroke();});return;}const{xMin,yMin,xMax,yMax}=getBBox(shape);const midX=(xMin+xMax)/2;const rotY=yMin-20;ctx.beginPath();ctx.moveTo(midX,yMin);ctx.lineTo(midX,rotY);ctx.stroke();// draw rotate handle line + circle\nctx.beginPath();ctx.arc(midX,rotY,R,0,2*Math.PI);ctx.stroke();// draw bounding rect\nctx.strokeRect(xMin,yMin,xMax-xMin,yMax-yMin);// draw corner handles\nctx.fillStyle=\"white\";ctx.fill();[{x:xMin,y:yMin},{x:xMax,y:yMin},{x:xMax,y:yMax},{x:xMin,y:yMax}].forEach(pt=>{ctx.beginPath();ctx.arc(pt.x,pt.y,R,0,2*Math.PI);ctx.fill();ctx.stroke();});}const Canvas=/*#__PURE__*/forwardRef((_ref,ref)=>{let{activeTool,lineColor,fillColor,strokeWidth,showGrid,snapToGrid}=_ref;// refs for DOM and data\nconst containerRef=useRef(null);const c1Ref=useRef(null);// background canvas\nconst c2Ref=useRef(null);// top canvas for interactions\nconst shapesRef=useRef([]);// all shapes data\nconst undoStack=useRef([]);// history for undo\nconst redoStack=useRef([]);// history for redo\nconst polyRef=useRef([]);// building polyline\nconst clipboardRef=useRef([]);// copy/paste buffer\nconst curveRef=useRef([]);// building curve\nconst[isDrawing,setIsDrawing]=useState(false);const[startPos,setStartPos]=useState({x:0,y:0});const dragRef=useRef({// drag state\nisDragging:false,isResizing:false,origShape:null,origRotation:0,center:null,startAngle:0});// draws all shapes\nconst redrawAll=useCallback(function(){let context=arguments.length>0&&arguments[0]!==undefined?arguments[0]:c1Ref;let offsetX=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;let offsetY=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;let backgroundColor=arguments.length>3&&arguments[3]!==undefined?arguments[3]:\"#979797\";const c=context.current;const ctx=c.getContext(\"2d\");ctx.clearRect(0,0,c.width,c.height);ctx.fillStyle=backgroundColor;ctx.fillRect(0,0,c.width,c.height);if(showGrid)drawGrid(ctx,c.width,c.height,100);shapesRef.current.forEach(s=>{ctx.save();ctx.strokeStyle=s.lineColor||lineColor;ctx.fillStyle=s.fillColor||fillColor;ctx.lineWidth=s.strokeWidth||strokeWidth;drawShape(ctx,s,offsetX,offsetY);if(s.selected){ctx.save();ctx.strokeStyle=\"#ff7300\";ctx.lineWidth=2;drawSelection(ctx,s,offsetX,offsetY);ctx.restore();}ctx.restore();});},[fillColor,lineColor,showGrid,strokeWidth]);const gridSize=100;const snap=_ref2=>{let{x,y}=_ref2;return{x:Math.round(x/gridSize)*gridSize,y:Math.round(y/gridSize)*gridSize};};// useImperativeHandle lets parent components call these methods on our Canvas ref\nuseImperativeHandle(ref,()=>({// exportShapes: clear any selection, serialize shapes to JSON and trigger a download\nexportShapes:()=>{// Deselect all shapes\nshapesRef.current.forEach(s=>s.selected=false);// Turn shapes array into a JSON string\nconst data=JSON.stringify(shapesRef.current,null,2);// Create a Blob from the JSON\nconst blob=new Blob([data],{type:\"application/json\"});const url=URL.createObjectURL(blob);const a=document.createElement(\"a\");a.href=url;a.download=\"shapes.json\";a.click();URL.revokeObjectURL(url);},// downloadJPEG: render the shapes into an off-screen canvas, then save as JPEG\ndownloadJPEG:()=>{// Deselect all shapes\nshapesRef.current.forEach(s=>s.selected=false);const shapes=shapesRef.current;// Compute the collective bounding box of all shapes\nconst pad=20;let minX=Infinity,minY=Infinity;let maxX=-Infinity,maxY=-Infinity;shapes.forEach(s=>{if(s.tool===\"circle\"||s.tool===\"polygon\"){const r=Math.hypot(s.x1-s.x0,s.y1-s.y0);minX=Math.min(minX,s.x0-r);maxX=Math.max(maxX,s.x0+r);minY=Math.min(minY,s.y0-r);maxY=Math.max(maxY,s.y0+r);}else{minX=Math.min(minX,s.x0,s.x1);maxX=Math.max(maxX,s.x0,s.x1);minY=Math.min(minY,s.y0,s.y1);maxY=Math.max(maxY,s.y0,s.y1);}});// if no shapes, return\nif(minX===Infinity)return;// Add padding\nminX-=pad;minY-=pad;maxX+=pad;maxY+=pad;const sw=maxX-minX;const sh=maxY-minY;// Create off-screen canvas\nconst tmp=document.createElement(\"canvas\");tmp.width=sw;tmp.height=sh;// Redraw all shapes onto it with a white background\nredrawAll({current:tmp},-minX,-minY,\"#ffffff\");// Convert to JPEG data URL and download\nconst dataURL=tmp.toDataURL(\"image/jpeg\",1.0);const link=document.createElement(\"a\");link.href=dataURL;link.download=\"shapes.jpg\";link.click();},// downloadPDF: similar to JPEG but slices canvas into A4 pages with jsPDF\ndownloadPDF:()=>{shapesRef.current.forEach(s=>s.selected=false);const shapes=shapesRef.current;// Compute bounding box same as above...\nconst pad=20;let minX=Infinity,minY=Infinity;let maxX=-Infinity,maxY=-Infinity;shapes.forEach(s=>{if(s.tool===\"circle\"||s.tool===\"polygon\"){const r=Math.hypot(s.x1-s.x0,s.y1-s.y0);minX=Math.min(minX,s.x0-r);maxX=Math.max(maxX,s.x0+r);minY=Math.min(minY,s.y0-r);maxY=Math.max(maxY,s.y0+r);}else{minX=Math.min(minX,s.x0,s.x1);maxX=Math.max(maxX,s.x0,s.x1);minY=Math.min(minY,s.y0,s.y1);maxY=Math.max(maxY,s.y0,s.y1);}});if(minX===Infinity){minX=0;minY=0;maxX=c1Ref.current.width;maxY=c1Ref.current.height;}minX-=pad;minY-=pad;maxX+=pad;maxY+=pad;const sw=maxX-minX;const sh=maxY-minY;const tmp=document.createElement(\"canvas\");tmp.width=sw;tmp.height=sh;redrawAll({current:tmp},-minX,-minY,\"#ffffff\");// Setup jsPDF and scale to fit pages\nconst orientation=sw>sh?\"landscape\":\"portrait\";const pdf=new jsPDF({orientation,unit:\"px\",format:\"a4\"});const pageW=pdf.internal.pageSize.getWidth();const pageH=pdf.internal.pageSize.getHeight();const scale=Math.min(pageW/sw,pageH/sh);let yOffset=0;while(yOffset<sh){const sliceH=Math.min(sh-yOffset,pageH/scale);const slice=document.createElement(\"canvas\");slice.width=sw;slice.height=sliceH;slice.getContext(\"2d\").drawImage(tmp,0,yOffset,sw,sliceH,0,0,sw,sliceH);const imgData=slice.toDataURL(\"image/jpeg\",1.0);const imgW=sw*scale,imgH=sliceH*scale;const xPos=(pageW-imgW)/2;pdf.addImage(imgData,\"JPEG\",xPos,0,imgW,imgH);yOffset+=sliceH;if(yOffset<sh)pdf.addPage();}// Trigger PDF download\npdf.save(\"shapes.pdf\");},// loadShapes: replace the current shapes array and redraw\nloadShapes:arr=>{shapesRef.current=arr.map(s=>({...s,selected:false}));redrawAll();},// getShapeCount: returns how many shapes are currently stored\ngetShapeCount:()=>shapesRef.current.length,// clearShapes: empties all shapes and clears the canvas\nclearShapes:()=>{shapesRef.current=[];redrawAll();}}));useEffect(()=>{// resizes both canvases to fill the container\nconst resize=()=>{const{width,height}=containerRef.current.getBoundingClientRect();// Update both canvas elements to match new dimension\n[c1Ref,c2Ref].forEach(r=>{r.current.width=width;r.current.height=height;});// Redraw everything at the new size\nredrawAll();};// Call it once immediately so canvases start at correct size\nresize();// And re-run on every window resize\nwindow.addEventListener(\"resize\",resize);// Clean up listener when component unmounts or redrawAll changes\nreturn()=>window.removeEventListener(\"resize\",resize);},[redrawAll]);useEffect(()=>{let dirty=false;// If any selected shape’s strokeWidth, lineColor, or fillColor\n// no longer matches the current props, update it and mark dirty\nshapesRef.current.forEach(s=>{if(s.selected&&(s.strokeWidth!==strokeWidth||s.lineColor!==lineColor||s.fillColor!==fillColor)){s.strokeWidth=strokeWidth;s.lineColor=lineColor;s.fillColor=fillColor;dirty=true;}});// If we changed anything, trigger a redraw to apply the new styles\nif(dirty)redrawAll();},[strokeWidth,lineColor,fillColor,redrawAll]);useEffect(()=>{// Any time showGrid changes, redraw so the grid appears or disappears\nredrawAll();},[showGrid,redrawAll]);useEffect(()=>{// Grab the overlay canvas and its 2D context\nconst c2=c2Ref.current;const ctx2=c2.getContext(\"2d\");// convert a mouse event into coordinates relative to the canvas\nconst getPos=e=>{const r=c2.getBoundingClientRect();return{x:e.clientX-r.left,y:e.clientY-r.top};};// mousedown: either start a rotate/resize/drag or begin drawing a new shape\nconst down=e=>{let pos=getPos(e);if(activeTool===\"select\"){const ctx1=c1Ref.current.getContext(\"2d\");// clear any previous selection\nshapesRef.current.forEach(sh=>sh.selected=false);// walk shapes top-down to see what was clicked\nfor(let i=shapesRef.current.length-1;i>=0;i--){const s=shapesRef.current[i];const{xMin,yMin,xMax,yMax}=getBBox(s);const midX=(xMin+xMax)/2;const rotY=yMin-20;// checks if clicked on rotate handle\nif(Math.hypot(pos.x-midX,pos.y-rotY)<6){s.selected=true;dragRef.current={isRotating:true,shapeIndex:i,origRotation:s.rotation||0,center:{x:midX,y:(yMin+yMax)/2},startAngle:Math.atan2(pos.y-(yMin+yMax)/2,pos.x-midX)};redrawAll();return;}// checks if clicked inside shape. If not, continue\nif(!hitTest(ctx1,s,pos.x,pos.y,strokeWidth))continue;// if clicked on a corner handle. start resize\nconst corners=[{x:xMin,y:yMin},{x:xMax,y:yMin},{x:xMax,y:yMax},{x:xMin,y:yMax}];for(let h=0;h<corners.length;h++){const dx=pos.x-corners[h].x;const dy=pos.y-corners[h].y;if(Math.hypot(dx,dy)<6){s.selected=true;dragRef.current={isResizing:true,shapeIndex:i,handleIndex:h,origShape:JSON.parse(JSON.stringify(s))};redrawAll();return;}}// else clicked inside shape body. start drag\ns.selected=true;dragRef.current={isDragging:true,startPos:pos,origShape:JSON.parse(JSON.stringify(s)),shapeIndex:i};redrawAll();return;}// clicked empty space. clear selection\nredrawAll();return;}// polyline mode: accumulate points\nif(activeTool===\"poly-line\"){polyRef.current.push(pos);setIsDrawing(true);return;}// curve mode: accumulate points\nif(activeTool===\"curve\"){curveRef.current.push(pos);setIsDrawing(true);return;}// shape tools: record start and begin drawing preview\nif(![\"square\",\"line\",\"circle\",\"triangle\",\"polygon\"].includes(activeTool))return;setStartPos(pos);setIsDrawing(true);};// mousemove: update rotate/resize/drag or draw preview\nconst move=e=>{let pos=getPos(e);// rotating\nif(dragRef.current.isRotating){const{shapeIndex,origRotation,center,startAngle}=dragRef.current;const target=shapesRef.current[shapeIndex];const currPos=getPos(e);const currentAngle=Math.atan2(currPos.y-center.y,currPos.x-center.x);target.rotation=origRotation+(currentAngle-startAngle);redrawAll();return;}// resizing: compute scale factors, update shape dimensions\nif(dragRef.current.isResizing){const{shapeIndex,handleIndex,origShape}=dragRef.current;const target=shapesRef.current[shapeIndex];const pos=getPos(e);const{xMin,yMin,xMax,yMax}=getBBox(origShape);const corners=[{x:xMin,y:yMin},{x:xMax,y:yMin},{x:xMax,y:yMax},{x:xMin,y:yMax}];const origHandle=corners[handleIndex];const opposite=corners[(handleIndex+2)%4];if(origShape.tool===\"line\"){if(handleIndex===0){target.x0=pos.x;target.y0=pos.y;}else{target.x1=pos.x;target.y1=pos.y;}}else if(origShape.tool===\"circle\"||origShape.tool===\"polygon\"){target.x1=pos.x;target.y1=pos.y;redrawAll();return;}else{const sx=(pos.x-opposite.x)/(origHandle.x-opposite.x);const sy=(pos.y-opposite.y)/(origHandle.y-opposite.y);if(origShape.points){target.points=origShape.points.map(p=>({x:opposite.x+(p.x-opposite.x)*sx,y:opposite.y+(p.y-opposite.y)*sy}));}else{[\"x0\",\"y0\",\"x1\",\"y1\"].forEach(k=>{const coord=k.startsWith(\"x\")?\"x\":\"y\";const o=origShape[k];const off=opposite[coord];target[k]=off+(o-off)*(coord===\"x\"?sx:sy);});}}redrawAll();return;}// dragging: compute dx, dy, move shape, optionally snap to grid\nif(activeTool===\"select\"&&dragRef.current.isDragging){const{startPos,origShape,shapeIndex}=dragRef.current;const target=shapesRef.current[shapeIndex];const dx=pos.x-startPos.x;const dy=pos.y-startPos.y;if(origShape.points){target.points=origShape.points.map(p=>({x:p.x+dx,y:p.y+dy}));}else{target.x0=origShape.x0+dx;target.y0=origShape.y0+dy;target.x1=origShape.x1+dx;target.y1=origShape.y1+dy;}// snap to grid                \nif(showGrid&&e.shiftKey){const{xMin,yMin}=getBBox(target);const{x:snapX,y:snapY}=snap({x:xMin,y:yMin});const offX=snapX-xMin;const offY=snapY-yMin;if(target.points){target.points.forEach(p=>{p.x+=offX;p.y+=offY;});}else{target.x0+=offX;target.y0+=offY;target.x1+=offX;target.y1+=offY;}}redrawAll();return;}// computes preview of poly-line after each segment\nif(activeTool===\"poly-line\"&&polyRef.current.length){ctx2.clearRect(0,0,c2.width,c2.height);ctx2.strokeStyle=lineColor;ctx2.lineWidth=strokeWidth;ctx2.beginPath();ctx2.moveTo(polyRef.current[0].x,polyRef.current[0].y);for(let p of polyRef.current.slice(1))ctx2.lineTo(p.x,p.y);ctx2.lineTo(pos.x,pos.y);ctx2.stroke();return;}// computes preview of curve after each segment\nif(activeTool===\"curve\"&&curveRef.current.length){ctx2.clearRect(0,0,c2.width,c2.height);const pts=[...curveRef.current,pos];const shape={tool:\"curve\",points:pts,strokeWidth,lineColor};ctx2.lineWidth=shape.strokeWidth;ctx2.strokeStyle=shape.lineColor;drawShape(ctx2,shape,0,0);return;}if(!isDrawing)return;// drawing a new shape: show live preview on overlay\nctx2.clearRect(0,0,c2.width,c2.height);const{x,y}=pos;const shape={tool:activeTool,x0:startPos.x,y0:startPos.y,x1:x,y1:y,isSquare:e.shiftKey&&activeTool===\"square\",isCircle:e.shiftKey&&activeTool===\"circle\",strokeWidth:1,lineColor:\"black\",fillColor:\"transparent\"};ctx2.fillStyle=shape.fillColor;ctx2.strokeStyle=shape.lineColor;ctx2.lineWidth=shape.strokeWidth;drawShape(ctx2,shape,0,0);};// mouseup: finalize rotate/resize/drag or commit new shape\nconst up=e=>{if(dragRef.current.isRotating){dragRef.current.isRotating=false;redrawAll();return;}if(dragRef.current.isResizing){dragRef.current.isResizing=false;dragRef.current.handleIndex=null;dragRef.current.origShape=null;return;}if(activeTool===\"select\"&&dragRef.current.isDragging){dragRef.current.isDragging=false;dragRef.current.shapeIndex=null;return;}if([\"poly-line\",\"curve\"].includes(activeTool))return;if(!isDrawing)return;const pos=getPos(e);// commit new shape if mouse actually moved\nif(pos.x===startPos.x&&pos.y===startPos.y){ctx2.clearRect(0,0,c2.width,c2.height);setIsDrawing(false);return;}const isCircle=activeTool===\"circle\"&&e.shiftKey;const isSquare=activeTool===\"square\"&&e.shiftKey;// construct newShape, push to shapesRef, record undo, select, redraw…\nconst newShape={tool:activeTool,x0:startPos.x,y0:startPos.y,x1:pos.x,y1:pos.y,lineColor,fillColor,strokeWidth,isCircle,isSquare,rotation:0,selected:false};shapesRef.current.push(newShape);undoStack.current.push({type:'add',shapes:[newShape]});redoStack.current=[];shapesRef.current.forEach(s=>s.selected=false);shapesRef.current[shapesRef.current.length-1].selected=true;redrawAll();ctx2.clearRect(0,0,c2.width,c2.height);setIsDrawing(false);};// dblclick: finish polyline\nconst finishPoly=e=>{if(activeTool!==\"poly-line\"||polyRef.current.length<2)return;const newShape={tool:\"poly-line\",points:polyRef.current.slice(),lineColor,fillColor,strokeWidth,selected:false};shapesRef.current.push(newShape);undoStack.current.push({type:'add',shapes:[newShape]});redoStack.current=[];shapesRef.current.forEach(s=>s.selected=false);shapesRef.current[shapesRef.current.length-1].selected=true;redrawAll();ctx2.clearRect(0,0,c2.width,c2.height);polyRef.current=[];};// dblclick: finish curve\nconst finishCurve=e=>{if(activeTool!==\"curve\"||curveRef.current.length<2)return;const pos=getPos(e);curveRef.current.push(pos);const newShape={tool:\"curve\",points:curveRef.current.slice(),lineColor,fillColor,strokeWidth,selected:false};shapesRef.current.push(newShape);undoStack.current.push({type:'add',shapes:[newShape]});redoStack.current=[];shapesRef.current.forEach(s=>s.selected=false);shapesRef.current[shapesRef.current.length-1].selected=true;redrawAll();ctx2.clearRect(0,0,c2.width,c2.height);curveRef.current=[];setIsDrawing(false);};// 10) keydown: undo/redo/delete/copy/paste shortcuts\nconst onKeyDown=e=>{// undo\nif(e.ctrlKey&&!e.shiftKey&&e.key.toLowerCase()==='z'){const action=undoStack.current.pop();if(!action)return;if(action.type==='add'){shapesRef.current=shapesRef.current.filter(s=>!action.shapes.includes(s));}else if(action.type==='delete'){action.shapes.forEach((shape,i)=>{const idx=action.indices[i];shapesRef.current.splice(idx,0,shape);});}redoStack.current.push(action);redrawAll();}// redo\nelse if(e.ctrlKey&&e.shiftKey&&e.key.toLowerCase()==='z'){const action=redoStack.current.pop();if(!action)return;if(action.type==='add'){shapesRef.current.push(...action.shapes);}else if(action.type==='delete'){shapesRef.current=shapesRef.current.filter(s=>!action.shapes.includes(s));}undoStack.current.push(action);redrawAll();}// delete\nelse if(e.key===\"Delete\"){const deleted=shapesRef.current.filter(s=>s.selected);if(deleted.length){const indices=deleted.map(s=>shapesRef.current.indexOf(s));shapesRef.current=shapesRef.current.filter(s=>!s.selected);undoStack.current.push({type:'delete',shapes:deleted,indices});redoStack.current=[];redrawAll();}}//copy\nelse if(e.ctrlKey&&e.key.toLowerCase()===\"c\"){clipboardRef.current=shapesRef.current.filter(s=>s.selected).map(s=>JSON.parse(JSON.stringify(s)));}// paste\nelse if(e.ctrlKey&&e.key.toLowerCase()===\"v\"){const OFFSET=10;const pasted=clipboardRef.current.map(orig=>{const copy=JSON.parse(JSON.stringify(orig));if(copy.points){copy.points.forEach(p=>{p.x+=OFFSET;p.y+=OFFSET;});}else{copy.x0+=OFFSET;copy.y0+=OFFSET;copy.x1+=OFFSET;copy.y1+=OFFSET;}copy.selected=true;copy.rotation=copy.rotation||0;return copy;});if(pasted.length){shapesRef.current.forEach(s=>s.selected=false);shapesRef.current.push(...pasted);undoStack.current.push({type:'add',shapes:pasted});redoStack.current=[];redrawAll();}}};// attach all listener\nc2.addEventListener(\"mousedown\",down);c2.addEventListener(\"mousemove\",move);c2.addEventListener(\"mouseup\",up);c2.addEventListener(\"dblclick\",finishPoly);c2.addEventListener(\"dblclick\",finishCurve);window.addEventListener(\"keydown\",onKeyDown);// cleanup on unmount or deps change\nreturn()=>{c2.removeEventListener(\"mousedown\",down);c2.removeEventListener(\"mousemove\",move);c2.removeEventListener(\"mouseup\",up);c2.removeEventListener(\"dblclick\",finishPoly);c2.removeEventListener(\"dblclick\",finishCurve);window.removeEventListener(\"keydown\",onKeyDown);};},[activeTool,isDrawing,startPos,lineColor,fillColor,strokeWidth,showGrid,snapToGrid,redrawAll]);return/*#__PURE__*/_jsxs(\"div\",{ref:containerRef,className:\"canvas-container\",children:[/*#__PURE__*/_jsx(\"canvas\",{ref:c1Ref}),/*#__PURE__*/_jsx(\"canvas\",{ref:c2Ref,style:{backgroundColor:\"transparent\"}})]});});export default Canvas;","map":{"version":3,"names":["React","forwardRef","useImperativeHandle","useRef","useEffect","useState","useCallback","jsPDF","jsx","_jsx","jsxs","_jsxs","drawGrid","ctx","width","height","cell","save","beginPath","strokeStyle","lineWidth","x","moveTo","lineTo","y","stroke","restore","getBBox","shape","points","xs","map","p","ys","xMin","Math","min","yMin","xMax","max","yMax","tool","cx","x0","cy","y0","isCircle","r","hypot","x1","y1","rx","abs","ry","radius","sides","i","ang","PI","push","cos","sin","isSquare","dx","dy","side","w","h","xA","yA","xB","yB","hitTest","defaultStroke","path","Path2D","strokeWidth","isPointInStroke","drawShape","offsetX","arguments","length","undefined","offsetY","translate","rotate","rotation","fillRect","strokeRect","arc","ellipse","fill","closePath","px","py","slice","pts","prev","curr","mx","my","quadraticCurveTo","last","drawSelection","R","p0","p1","fillStyle","forEach","pt","midX","rotY","Canvas","_ref","ref","activeTool","lineColor","fillColor","showGrid","snapToGrid","containerRef","c1Ref","c2Ref","shapesRef","undoStack","redoStack","polyRef","clipboardRef","curveRef","isDrawing","setIsDrawing","startPos","setStartPos","dragRef","isDragging","isResizing","origShape","origRotation","center","startAngle","redrawAll","context","backgroundColor","c","current","getContext","clearRect","s","selected","gridSize","snap","_ref2","round","exportShapes","data","JSON","stringify","blob","Blob","type","url","URL","createObjectURL","a","document","createElement","href","download","click","revokeObjectURL","downloadJPEG","shapes","pad","minX","Infinity","minY","maxX","maxY","sw","sh","tmp","dataURL","toDataURL","link","downloadPDF","orientation","pdf","unit","format","pageW","internal","pageSize","getWidth","pageH","getHeight","scale","yOffset","sliceH","drawImage","imgData","imgW","imgH","xPos","addImage","addPage","loadShapes","arr","getShapeCount","clearShapes","resize","getBoundingClientRect","window","addEventListener","removeEventListener","dirty","c2","ctx2","getPos","e","clientX","left","clientY","top","down","pos","ctx1","isRotating","shapeIndex","atan2","corners","handleIndex","parse","includes","move","target","currPos","currentAngle","origHandle","opposite","sx","sy","k","coord","startsWith","o","off","shiftKey","snapX","snapY","offX","offY","up","newShape","finishPoly","finishCurve","onKeyDown","ctrlKey","key","toLowerCase","action","pop","filter","idx","indices","splice","deleted","indexOf","OFFSET","pasted","orig","copy","className","children","style"],"sources":["/home/nightsquid/Desktop/Graphics 1/Shape-Editor/src/components/Canvas.js"],"sourcesContent":["import React, { forwardRef, useImperativeHandle, useRef, useEffect, useState, useCallback } from \"react\";\nimport { jsPDF } from \"jspdf\";\nimport \"../css/canvas.css\";\n\n\n// Draws a grid background for the canvas\nfunction drawGrid(ctx, width, height, cell) {\n    ctx.save();\n    ctx.beginPath();\n    ctx.strokeStyle = \"#ffffff3a\";    \n    ctx.lineWidth = 1;\n    \n    // draw vertical grid lines\n    for (let x = 0; x <= width; x += cell) {\n        ctx.moveTo(x, 0);\n        ctx.lineTo(x, height);\n    }\n\n    // draw horizontal grid lines\n    for (let y = 0; y <= height; y += cell) {\n        ctx.moveTo(0, y);\n        ctx.lineTo(width, y);\n    }\n    ctx.stroke();\n    ctx.restore();\n}\n\n// Computes the bounding box for any shape\nfunction getBBox(shape) {\n    if (shape.points) {\n        // poly-line or curve: use all points\n        const xs = shape.points.map(p => p.x);\n        const ys = shape.points.map(p => p.y);\n        return {\n            xMin: Math.min(...xs),\n            yMin: Math.min(...ys),\n            xMax: Math.max(...xs),\n            yMax: Math.max(...ys)\n        };\n    }\n    // circle or ellipse: calculate extents from center and radii\n    if (shape.tool === \"circle\") {\n        const cx = shape.x0, cy = shape.y0;\n        if (shape.isCircle) {\n            const r = Math.hypot(shape.x1 - shape.x0, shape.y1 - shape.y0);\n            return { xMin: cx - r, yMin: cy - r, xMax: cx + r, yMax: cy + r };\n        } else {\n            const rx = Math.abs(shape.x1 - shape.x0);\n            const ry = Math.abs(shape.y1 - shape.y0);\n            return { xMin: cx - rx, yMin: cy - ry, xMax: cx + rx, yMax: cy + ry };\n        }\n    }\n    // regular pentagon: approximate by computing all vertices\n    if (shape.tool === \"polygon\") {\n        const cx = shape.x0;\n        const cy = shape.y0;\n        const radius = Math.hypot(shape.x1 - shape.x0, shape.y1 - shape.y0);\n        const sides = 5;  \n        const xs = [];\n        const ys = [];\n        for (let i = 0; i < sides; i++) {\n            const ang = i * (2 * Math.PI / sides) - Math.PI / 2;\n            xs.push(cx + radius * Math.cos(ang));\n            ys.push(cy + radius * Math.sin(ang));\n        }\n        return {\n            xMin: Math.min(...xs),\n            yMin: Math.min(...ys),\n            xMax: Math.max(...xs),\n            yMax: Math.max(...ys)\n        };\n    }\n    // square: enforce equal width/height then compute corners\n    if (shape.tool === \"square\" && shape.isSquare) {\n        const dx = shape.x1 - shape.x0;\n        const dy = shape.y1 - shape.y0;\n        const side = Math.min(Math.abs(dx), Math.abs(dy));\n        const w = dx < 0 ? -side : side;\n        const h = dy < 0 ? -side : side;\n\n        const xA = shape.x0;\n        const yA = shape.y0;\n        const xB = shape.x0 + w;\n        const yB = shape.y0 + h;\n\n        return {\n            xMin: Math.min(xA, xB),\n            yMin: Math.min(yA, yB),\n            xMax: Math.max(xA, xB),\n            yMax: Math.max(yA, yB)\n        };\n    }\n    // default rectangle: two corner points\n    return {\n        xMin: Math.min(shape.x0, shape.x1),\n        yMin: Math.min(shape.y0, shape.y1),\n        xMax: Math.max(shape.x0, shape.x1),\n        yMax: Math.max(shape.y0, shape.y1)\n    };\n}\n\n// Hit-testing: checks if point (x,y) hits the shape stroke or interior\nfunction hitTest(ctx, shape, x, y, defaultStroke) {\n    const path = new Path2D();\n    ctx.lineWidth = (shape.strokeWidth || defaultStroke) + 15;\n    switch (shape.tool) {\n        case \"line\":\n            path.moveTo(shape.x0, shape.y0);\n            path.lineTo(shape.x1, shape.y1);\n            return ctx.isPointInStroke(path, x, y);\n        default:\n            const { xMin, yMin, xMax, yMax } = getBBox(shape);\n            return x >= xMin && x <= xMax && y >= yMin && y <= yMax;\n    }\n}\n\n// Draws the shape itself, applying any rotation and offset\nfunction drawShape(ctx, shape, offsetX = 0, offsetY = 0) {\n    const x0 = shape.x0 + offsetX;\n    const y0 = shape.y0 + offsetY;\n    const x1 = shape.x1 + offsetX;\n    const y1 = shape.y1 + offsetY;\n    // compute center of bounding box for rotation\n    const { xMin, yMin, xMax, yMax } = getBBox(shape);\n    const cx = (xMin + xMax) / 2 + offsetX;\n    const cy = (yMin + yMax) / 2 + offsetY;\n\n    ctx.save();\n    ctx.translate(cx, cy);\n    ctx.rotate(shape.rotation || 0);\n    ctx.translate(-cx, -cy);\n\n    switch (shape.tool) {\n        case \"square\": {\n            const dx = shape.x1 - shape.x0;\n            const dy = shape.y1 - shape.y0;\n            let w, h;\n            if (shape.isSquare) {\n                const side = Math.min(Math.abs(dx), Math.abs(dy));\n                w = dx < 0 ? -side : side;\n                h = dy < 0 ? -side : side;\n            } else {\n                w = dx;\n                h = dy;\n            }\n            ctx.fillRect(shape.x0 + offsetX, shape.y0 + offsetY, w, h);\n            ctx.strokeRect(shape.x0 + offsetX, shape.y0 + offsetY, w, h);\n            return;\n        }\n        case \"line\":\n            ctx.beginPath();\n            ctx.moveTo(x0, y0);\n            ctx.lineTo(x1, y1);\n            ctx.stroke();\n            return;\n        case \"circle\":\n            ctx.beginPath();\n            if (shape.isCircle) {\n                const r = Math.hypot(shape.x1 - shape.x0, shape.y1 - shape.y0);\n                ctx.arc(x0, y0, r, 0, 2 * Math.PI);\n            } else {\n                ctx.ellipse(x0, y0, Math.abs(shape.x1 - shape.x0), Math.abs(shape.y1 - shape.y0), 0, 0, 2 * Math.PI);\n            }\n            ctx.fill();\n            ctx.stroke();\n            return;\n        case \"triangle\":\n            ctx.beginPath();\n            ctx.moveTo(x0, y0);\n            ctx.lineTo(x1, y0);\n            ctx.lineTo((x0 + x1) / 2, y1);\n            ctx.closePath();\n            ctx.fill();\n            ctx.stroke();\n            return;\n        case \"polygon\":\n            ctx.beginPath();\n            const sides = 5;\n            const radius = Math.hypot(shape.x1 - shape.x0, shape.y1 - shape.y0);\n            for (let i = 0; i < sides; i++) {\n                const ang = i * (2 * Math.PI / sides) - Math.PI / 2;\n                const px = shape.x0 + offsetX + radius * Math.cos(ang);\n                const py = shape.y0 + offsetY + radius * Math.sin(ang);\n                if (i === 0) ctx.moveTo(px, py);\n                else ctx.lineTo(px, py);\n            }\n            ctx.closePath();\n            ctx.fill();\n            ctx.stroke();\n            return;\n        case \"poly-line\":\n            if (shape.points && shape.points.length) {\n                ctx.beginPath();\n                ctx.moveTo(shape.points[0].x + offsetX, shape.points[0].y + offsetY);\n                for (let p of shape.points.slice(1)) ctx.lineTo(p.x + offsetX, p.y + offsetY);\n                ctx.stroke();\n            }\n            return;\n        case \"curve\":\n            if (shape.points && shape.points.length) {\n                ctx.beginPath();\n                const pts = shape.points;\n                ctx.moveTo(pts[0].x + offsetX, pts[0].y + offsetY);\n                for (let i = 1; i < pts.length; i++) {\n                    const prev = pts[i - 1];\n                    const curr = pts[i];\n                    const mx = (prev.x + curr.x) / 2 + offsetX;\n                    const my = (prev.y + curr.y) / 2 + offsetY;\n                    ctx.quadraticCurveTo(prev.x + offsetX, prev.y + offsetY, mx, my);\n                }\n\n                const last = pts[pts.length - 1];\n                ctx.lineTo(last.x + offsetX, last.y + offsetY);\n\n                ctx.stroke();\n            }\n            return;\n        default:\n            ctx.save();\n            ctx.translate(cx, cy);\n            ctx.rotate(shape.rotation || 0);\n            ctx.translate(-cx, -cy);\n\n    }\n}\n\n// Draws selection handles & rotation grip around the shape\nfunction drawSelection(ctx, shape, offsetX = 0, offsetY = 0) {\n    const R = 5;\n    if (shape.tool === \"line\") {\n        // line endpoints as handles\n        const p0 = { x: shape.x0 + offsetX, y: shape.y0 + offsetY };\n        const p1 = { x: shape.x1 + offsetX, y: shape.y1 + offsetY };\n        ctx.fillStyle = \"white\";\n        ctx.fill();\n        ctx.beginPath(); ctx.moveTo(p0.x, p0.y); ctx.lineTo(p1.x, p1.y); ctx.stroke();\n        [p0, p1].forEach(pt => {\n            ctx.beginPath(); ctx.arc(pt.x, pt.y, R, 0, 2 * Math.PI); ctx.fill(); ctx.stroke();\n        });\n        return;\n    }\n    const { xMin, yMin, xMax, yMax } = getBBox(shape);\n    const midX = (xMin + xMax) / 2;\n    const rotY = yMin - 20;\n    ctx.beginPath();\n    ctx.moveTo(midX, yMin);\n    ctx.lineTo(midX, rotY);\n    ctx.stroke();\n\n    // draw rotate handle line + circle\n    ctx.beginPath();\n    ctx.arc(midX, rotY, R, 0, 2 * Math.PI);\n\n    ctx.stroke();\n\n    // draw bounding rect\n    ctx.strokeRect(xMin, yMin, xMax - xMin, yMax - yMin);\n\n    // draw corner handles\n    ctx.fillStyle = \"white\";\n    ctx.fill();\n    [\n        { x: xMin, y: yMin },\n        { x: xMax, y: yMin },\n        { x: xMax, y: yMax },\n        { x: xMin, y: yMax }\n    ].forEach(pt => {\n        ctx.beginPath(); ctx.arc(pt.x, pt.y, R, 0, 2 * Math.PI); ctx.fill(); ctx.stroke();\n    });\n}\n\nconst Canvas = forwardRef(({ activeTool, lineColor, fillColor, strokeWidth, showGrid, snapToGrid }, ref) => {\n    // refs for DOM and data\n    const containerRef = useRef(null);\n    const c1Ref = useRef(null);        // background canvas\n    const c2Ref = useRef(null);        // top canvas for interactions\n    const shapesRef = useRef([]);      // all shapes data\n    const undoStack = useRef([]);      // history for undo\n    const redoStack = useRef([]);      // history for redo\n    const polyRef = useRef([]);        // building polyline\n    const clipboardRef = useRef([]);   // copy/paste buffer\n    const curveRef = useRef([]);       // building curve\n    const [isDrawing, setIsDrawing] = useState(false);\n    const [startPos, setStartPos] = useState({ x: 0, y: 0 });\n    const dragRef = useRef({       // drag state\n        isDragging: false,\n        isResizing: false,\n        origShape: null,\n        origRotation: 0,\n        center: null,\n        startAngle: 0\n    });\n\n    // draws all shapes\n    const redrawAll = useCallback((context = c1Ref, offsetX = 0, offsetY = 0, backgroundColor = \"#979797\") => {\n        const c = context.current;\n        const ctx = c.getContext(\"2d\");\n        ctx.clearRect(0, 0, c.width, c.height);\n        \n        ctx.fillStyle = backgroundColor;\n        ctx.fillRect(0, 0, c.width, c.height);\n        \n        if (showGrid) drawGrid(ctx, c.width, c.height, 100);   \n        shapesRef.current.forEach(s => {\n            ctx.save();\n            ctx.strokeStyle = s.lineColor || lineColor;\n            ctx.fillStyle = s.fillColor || fillColor;\n            ctx.lineWidth = s.strokeWidth || strokeWidth;\n            drawShape(ctx, s, offsetX, offsetY);\n            if (s.selected) {\n                ctx.save(); ctx.strokeStyle = \"#ff7300\"; ctx.lineWidth = 2;\n                drawSelection(ctx, s, offsetX, offsetY);\n                ctx.restore();\n            }\n            ctx.restore();\n        });\n    }, [fillColor, lineColor, showGrid, strokeWidth]);\n\n    const gridSize = 100; \n    const snap = ({ x, y }) => ({\n        x: Math.round(x / gridSize) * gridSize,\n        y: Math.round(y / gridSize) * gridSize\n    });\n\n    // useImperativeHandle lets parent components call these methods on our Canvas ref\n    useImperativeHandle(ref, () => ({\n        // exportShapes: clear any selection, serialize shapes to JSON and trigger a download\n        exportShapes: () => {\n            // Deselect all shapes\n            shapesRef.current.forEach(s => (s.selected = false));\n            // Turn shapes array into a JSON string\n            const data = JSON.stringify(shapesRef.current, null, 2);\n            // Create a Blob from the JSON\n            const blob = new Blob([data], { type: \"application/json\" });\n            const url = URL.createObjectURL(blob);\n            const a = document.createElement(\"a\");\n            a.href = url; a.download = \"shapes.json\"; a.click();\n            URL.revokeObjectURL(url);\n        },\n        // downloadJPEG: render the shapes into an off-screen canvas, then save as JPEG\n        downloadJPEG: () => {\n            // Deselect all shapes\n            shapesRef.current.forEach(s => (s.selected = false));\n            const shapes = shapesRef.current;\n            // Compute the collective bounding box of all shapes\n            const pad = 20;\n            let minX = Infinity, minY = Infinity;\n            let maxX = -Infinity, maxY = -Infinity;\n            shapes.forEach(s => {\n                if (s.tool === \"circle\" || s.tool === \"polygon\") {\n                    const r = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n                    minX = Math.min(minX, s.x0 - r);\n                    maxX = Math.max(maxX, s.x0 + r);\n                    minY = Math.min(minY, s.y0 - r);\n                    maxY = Math.max(maxY, s.y0 + r);\n                } else {\n                    minX = Math.min(minX, s.x0, s.x1);\n                    maxX = Math.max(maxX, s.x0, s.x1);\n                    minY = Math.min(minY, s.y0, s.y1);\n                    maxY = Math.max(maxY, s.y0, s.y1);\n                }\n            });\n            // if no shapes, return\n            if (minX === Infinity) return;\n\n            // Add padding\n            minX -= pad; minY -= pad; \n            maxX += pad; maxY += pad;\n\n            const sw = maxX - minX;\n            const sh = maxY - minY;\n\n            // Create off-screen canvas\n            const tmp = document.createElement(\"canvas\");\n            tmp.width = sw; tmp.height = sh;\n\n            // Redraw all shapes onto it with a white background\n            redrawAll({ current: tmp }, -minX, -minY, \"#ffffff\");\n            // Convert to JPEG data URL and download\n            const dataURL = tmp.toDataURL(\"image/jpeg\", 1.0);\n            const link = document.createElement(\"a\");\n            link.href = dataURL;\n            link.download = \"shapes.jpg\";\n            link.click();\n        },\n        // downloadPDF: similar to JPEG but slices canvas into A4 pages with jsPDF\n        downloadPDF: () => {\n            shapesRef.current.forEach(s => (s.selected = false));\n            const shapes = shapesRef.current;\n            // Compute bounding box same as above...\n            const pad = 20;\n            let minX = Infinity, minY = Infinity;\n            let maxX = -Infinity, maxY = -Infinity;\n            shapes.forEach(s => {\n                if (s.tool === \"circle\" || s.tool === \"polygon\") {\n                    const r = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n                    minX = Math.min(minX, s.x0 - r);\n                    maxX = Math.max(maxX, s.x0 + r);\n                    minY = Math.min(minY, s.y0 - r);\n                    maxY = Math.max(maxY, s.y0 + r);\n                } else {\n                    minX = Math.min(minX, s.x0, s.x1);\n                    maxX = Math.max(maxX, s.x0, s.x1);\n                    minY = Math.min(minY, s.y0, s.y1);\n                    maxY = Math.max(maxY, s.y0, s.y1);\n                }\n            });\n            if (minX === Infinity) {\n                minX = 0; minY = 0;\n                maxX = c1Ref.current.width;\n                maxY = c1Ref.current.height;\n            }\n            minX -= pad; \n            minY -= pad; \n            maxX += pad; \n            maxY += pad;\n\n            const sw = maxX - minX;\n            const sh = maxY - minY;\n\n            const tmp = document.createElement(\"canvas\");\n            tmp.width = sw; tmp.height = sh;\n            redrawAll({ current: tmp }, -minX, -minY, \"#ffffff\");\n            \n            // Setup jsPDF and scale to fit pages\n            const orientation = sw > sh ? \"landscape\" : \"portrait\";\n            const pdf = new jsPDF({ orientation, unit: \"px\", format: \"a4\" });\n            const pageW = pdf.internal.pageSize.getWidth();\n            const pageH = pdf.internal.pageSize.getHeight();\n            const scale = Math.min(pageW / sw, pageH / sh);\n\n            let yOffset = 0;\n            while (yOffset < sh) {\n                const sliceH = Math.min(sh - yOffset, pageH / scale);\n                const slice = document.createElement(\"canvas\");\n                slice.width = sw; slice.height = sliceH;\n                slice.getContext(\"2d\").drawImage(\n                    tmp,\n                    0, yOffset, sw, sliceH,\n                    0, 0, sw, sliceH\n                );\n                const imgData = slice.toDataURL(\"image/jpeg\", 1.0);\n                const imgW = sw * scale, imgH = sliceH * scale;\n                const xPos = (pageW - imgW) / 2;\n                pdf.addImage(imgData, \"JPEG\", xPos, 0, imgW, imgH);\n                yOffset += sliceH;\n                if (yOffset < sh) pdf.addPage();\n            }\n            // Trigger PDF download\n            pdf.save(\"shapes.pdf\");\n        },\n        // loadShapes: replace the current shapes array and redraw\n        loadShapes: (arr) => { shapesRef.current = arr.map(s => ({ ...s, selected: false })); redrawAll(); },\n        // getShapeCount: returns how many shapes are currently stored\n        getShapeCount: () => shapesRef.current.length,\n        // clearShapes: empties all shapes and clears the canvas\n        clearShapes: () => { shapesRef.current = []; redrawAll(); }\n    }));\n\n    useEffect(() => {\n        // resizes both canvases to fill the container\n        const resize = () => {\n            const { width, height } = containerRef.current.getBoundingClientRect();\n            // Update both canvas elements to match new dimension\n            [c1Ref, c2Ref].forEach(r => { r.current.width = width; r.current.height = height; });\n            // Redraw everything at the new size\n            redrawAll();\n        };\n        // Call it once immediately so canvases start at correct size\n        resize();\n        // And re-run on every window resize\n        window.addEventListener(\"resize\", resize);\n        // Clean up listener when component unmounts or redrawAll changes\n        return () => window.removeEventListener(\"resize\", resize);\n    }, [redrawAll]);\n\n    useEffect(() => {\n        let dirty = false;\n        // If any selected shape’s strokeWidth, lineColor, or fillColor\n        // no longer matches the current props, update it and mark dirty\n        shapesRef.current.forEach(s => {\n            if (s.selected && (s.strokeWidth !== strokeWidth || s.lineColor !== lineColor || s.fillColor !== fillColor)) {\n                s.strokeWidth = strokeWidth;\n                s.lineColor = lineColor;\n                s.fillColor = fillColor;\n                dirty = true;\n            }\n        });\n        // If we changed anything, trigger a redraw to apply the new styles\n        if (dirty) redrawAll();\n    }, [strokeWidth, lineColor, fillColor, redrawAll]);\n\n    useEffect(() => {\n        // Any time showGrid changes, redraw so the grid appears or disappears\n        redrawAll();\n    }, [showGrid, redrawAll]);\n\n    useEffect(() => {\n        // Grab the overlay canvas and its 2D context\n        const c2 = c2Ref.current;\n        const ctx2 = c2.getContext(\"2d\");\n        // convert a mouse event into coordinates relative to the canvas\n        const getPos = e => {\n            const r = c2.getBoundingClientRect();\n            return { x: e.clientX - r.left, y: e.clientY - r.top };\n        };\n        // mousedown: either start a rotate/resize/drag or begin drawing a new shape\n        const down = e => {\n            let pos = getPos(e);\n            if (activeTool === \"select\") {\n                const ctx1 = c1Ref.current.getContext(\"2d\");\n                // clear any previous selection\n                shapesRef.current.forEach(sh => sh.selected = false);\n\n                // walk shapes top-down to see what was clicked\n                for (let i = shapesRef.current.length - 1; i >= 0; i--) {\n                    const s = shapesRef.current[i];\n\n                    const { xMin, yMin, xMax, yMax } = getBBox(s);\n                    const midX = (xMin + xMax) / 2;\n                    const rotY = yMin - 20;\n\n                    // checks if clicked on rotate handle\n                    if (Math.hypot(pos.x - midX, pos.y - rotY) < 6) {\n                        s.selected = true;\n                        \n                        dragRef.current = {\n                            isRotating: true,\n                            shapeIndex: i,\n                            origRotation: s.rotation || 0,\n                            \n                            center: { x: midX, y: (yMin + yMax) / 2 },\n                            startAngle: Math.atan2(\n                                pos.y - ((yMin + yMax) / 2),\n                                pos.x - midX\n                            )\n                        };\n\n                        redrawAll();\n                        return;    \n                    }\n\n                    // checks if clicked inside shape. If not, continue\n                    if (!hitTest(ctx1, s, pos.x, pos.y, strokeWidth)) continue;\n\n                    // if clicked on a corner handle. start resize\n                    const corners = [\n                        { x: xMin, y: yMin },\n                        { x: xMax, y: yMin },\n                        { x: xMax, y: yMax },\n                        { x: xMin, y: yMax }\n                    ];\n                    for (let h = 0; h < corners.length; h++) {\n                        const dx = pos.x - corners[h].x;\n                        const dy = pos.y - corners[h].y;\n                        if (Math.hypot(dx, dy) < 6) {        \n                            s.selected = true;\n                            dragRef.current = {\n                                isResizing: true,\n                                shapeIndex: i,\n                                handleIndex: h,\n                                origShape: JSON.parse(JSON.stringify(s))\n                            };\n                            redrawAll();\n                            return;  \n                        }\n                    }\n\n                    // else clicked inside shape body. start drag\n                    s.selected = true;\n                    dragRef.current = {\n                        isDragging: true,\n                        startPos: pos,                                \n                        origShape: JSON.parse(JSON.stringify(s)),     \n                        shapeIndex: i\n                    };\n                    redrawAll();\n                    return;\n                }\n\n                // clicked empty space. clear selection\n                redrawAll();\n                return;\n            }\n            // polyline mode: accumulate points\n            if (activeTool === \"poly-line\") { polyRef.current.push(pos); setIsDrawing(true); return; }\n            // curve mode: accumulate points\n            if (activeTool === \"curve\") { curveRef.current.push(pos); setIsDrawing(true); return; }\n            // shape tools: record start and begin drawing preview\n            if (![\"square\", \"line\", \"circle\", \"triangle\", \"polygon\"].includes(activeTool)) return;\n            setStartPos(pos);\n            setIsDrawing(true);\n        };\n\n        // mousemove: update rotate/resize/drag or draw preview\n        const move = e => {\n            let pos = getPos(e);\n            // rotating\n            if (dragRef.current.isRotating) {\n                const { shapeIndex, origRotation, center, startAngle } = dragRef.current;\n                const target = shapesRef.current[shapeIndex];\n                const currPos = getPos(e);\n\n                \n                const currentAngle = Math.atan2(currPos.y - center.y, currPos.x - center.x);\n                target.rotation = origRotation + (currentAngle - startAngle);\n\n                redrawAll();\n                return;\n            }\n            // resizing: compute scale factors, update shape dimensions\n            if (dragRef.current.isResizing) {\n                const { shapeIndex, handleIndex, origShape } = dragRef.current;\n                const target = shapesRef.current[shapeIndex];\n                const pos = getPos(e);             \n                const { xMin, yMin, xMax, yMax } = getBBox(origShape);\n                const corners = [\n                    { x: xMin, y: yMin },\n                    { x: xMax, y: yMin },\n                    { x: xMax, y: yMax },\n                    { x: xMin, y: yMax }\n                ];\n                const origHandle = corners[handleIndex];\n                const opposite = corners[(handleIndex + 2) % 4];\n\n                if (origShape.tool === \"line\") {\n                    \n                    if (handleIndex === 0) {\n                        target.x0 = pos.x; target.y0 = pos.y;\n                    } else {\n                        target.x1 = pos.x; target.y1 = pos.y;\n                    }\n                } else if (origShape.tool === \"circle\" || origShape.tool === \"polygon\") {\n                    \n                    \n                    target.x1 = pos.x;\n                    target.y1 = pos.y;\n                    redrawAll();\n                    return;\n                } else {\n                    \n                    const sx = (pos.x - opposite.x) / (origHandle.x - opposite.x);\n                    const sy = (pos.y - opposite.y) / (origHandle.y - opposite.y);\n\n                    if (origShape.points) {\n                        \n                        target.points = origShape.points.map(p => ({\n                            x: opposite.x + (p.x - opposite.x) * sx,\n                            y: opposite.y + (p.y - opposite.y) * sy\n                        }));\n                    } else {\n                        \n                        [\"x0\", \"y0\", \"x1\", \"y1\"].forEach(k => {\n                            const coord = k.startsWith(\"x\") ? \"x\" : \"y\";\n                            const o = origShape[k];\n                            const off = opposite[coord];\n                            target[k] = off + (o - off) * (coord === \"x\" ? sx : sy);\n                        });\n                    }\n                }\n\n                redrawAll();\n                return;\n            }\n            // dragging: compute dx, dy, move shape, optionally snap to grid\n            if (activeTool === \"select\" && dragRef.current.isDragging) {\n                const { startPos, origShape, shapeIndex } = dragRef.current;\n                const target = shapesRef.current[shapeIndex];\n                \n                const dx = pos.x - startPos.x;\n                const dy = pos.y - startPos.y;\n                \n                if (origShape.points) {\n                    target.points = origShape.points.map(p => ({\n                        x: p.x + dx,\n                        y: p.y + dy\n                    }));\n                } else {\n                    target.x0 = origShape.x0 + dx;\n                    target.y0 = origShape.y0 + dy;\n                    target.x1 = origShape.x1 + dx;\n                    target.y1 = origShape.y1 + dy;\n                }\n                // snap to grid                \n                if (showGrid && e.shiftKey) {\n                    const { xMin, yMin } = getBBox(target);\n                    const { x: snapX, y: snapY } = snap({ x: xMin, y: yMin });\n                    const offX = snapX - xMin;\n                    const offY = snapY - yMin;\n\n                    if (target.points) {\n                        target.points.forEach(p => {\n                            p.x += offX;\n                            p.y += offY;\n                        });\n                    } else {\n                        target.x0 += offX; target.y0 += offY;\n                        target.x1 += offX; target.y1 += offY;\n                    }\n                }\n\n                redrawAll();\n                return;\n            }\n\n            // computes preview of poly-line after each segment\n            if (activeTool === \"poly-line\" && polyRef.current.length) {\n                ctx2.clearRect(0, 0, c2.width, c2.height);\n                ctx2.strokeStyle = lineColor; ctx2.lineWidth = strokeWidth;\n                ctx2.beginPath(); ctx2.moveTo(polyRef.current[0].x, polyRef.current[0].y);\n                for (let p of polyRef.current.slice(1)) ctx2.lineTo(p.x, p.y);\n                ctx2.lineTo(pos.x, pos.y); ctx2.stroke(); return;\n            }\n            // computes preview of curve after each segment\n            if (activeTool === \"curve\" && curveRef.current.length) {\n                ctx2.clearRect(0, 0, c2.width, c2.height);\n                const pts = [...curveRef.current, pos];\n                const shape = {\n                    tool: \"curve\",\n                    points: pts,\n                    strokeWidth,\n                    lineColor,\n                };\n                ctx2.lineWidth = shape.strokeWidth;\n                ctx2.strokeStyle = shape.lineColor;\n                drawShape(ctx2, shape, 0, 0);\n                return;\n            }\n            \n            if (!isDrawing) return;\n            // drawing a new shape: show live preview on overlay\n            ctx2.clearRect(0, 0, c2.width, c2.height);\n            const { x, y } = pos;\n\n            const shape = {\n                tool: activeTool,\n                x0: startPos.x,\n                y0: startPos.y,\n                x1: x,\n                y1: y,\n                isSquare: e.shiftKey && activeTool === \"square\",\n                isCircle: e.shiftKey && activeTool === \"circle\",\n                strokeWidth: 1,\n                lineColor: \"black\",\n                fillColor: \"transparent\"\n            }\n            ctx2.fillStyle = shape.fillColor;\n            ctx2.strokeStyle = shape.lineColor;\n            ctx2.lineWidth = shape.strokeWidth;\n\n            drawShape(ctx2, shape, 0, 0);\n        };\n\n        // mouseup: finalize rotate/resize/drag or commit new shape\n        const up = e => {\n            if (dragRef.current.isRotating) {\n                dragRef.current.isRotating = false;\n\n                redrawAll();\n                return;\n            }\n            if (dragRef.current.isResizing) {\n                dragRef.current.isResizing = false;\n                dragRef.current.handleIndex = null;\n                dragRef.current.origShape = null;\n                return;\n            }\n            if (activeTool === \"select\" && dragRef.current.isDragging) {\n                dragRef.current.isDragging = false;\n                dragRef.current.shapeIndex = null;\n                return;\n            }\n            if ([\"poly-line\", \"curve\"].includes(activeTool)) return;\n            if (!isDrawing) return;\n            const pos = getPos(e);\n            // commit new shape if mouse actually moved\n            if (pos.x === startPos.x && pos.y === startPos.y) {\n                ctx2.clearRect(0, 0, c2.width, c2.height);\n                setIsDrawing(false);\n                return;\n            }\n            const isCircle = activeTool === \"circle\" && e.shiftKey;\n            const isSquare = activeTool === \"square\" && e.shiftKey;\n\n            // construct newShape, push to shapesRef, record undo, select, redraw…\n            const newShape = {\n                tool: activeTool,\n                x0: startPos.x, y0: startPos.y,\n                x1: pos.x, y1: pos.y,\n                lineColor, fillColor, strokeWidth,\n                isCircle, isSquare,\n                rotation: 0,\n                selected: false\n            };\n\n            shapesRef.current.push(newShape);\n\n            undoStack.current.push({ type: 'add', shapes: [newShape] });\n            \n            redoStack.current = [];\n\n            shapesRef.current.forEach(s => (s.selected = false));\n            shapesRef.current[shapesRef.current.length - 1].selected = true;\n            redrawAll();\n            ctx2.clearRect(0, 0, c2.width, c2.height);\n            setIsDrawing(false);\n        };\n\n        // dblclick: finish polyline\n        const finishPoly = e => {\n            if (activeTool !== \"poly-line\" || polyRef.current.length < 2) return;\n            const newShape = {\n                tool: \"poly-line\",\n                points: polyRef.current.slice(),\n                lineColor, fillColor, strokeWidth,\n                selected: false\n            };\n            shapesRef.current.push(newShape);\n\n            undoStack.current.push({ type: 'add', shapes: [newShape] });\n            \n            redoStack.current = [];\n\n            shapesRef.current.forEach(s => (s.selected = false));\n            shapesRef.current[shapesRef.current.length - 1].selected = true;\n            redrawAll();\n            ctx2.clearRect(0, 0, c2.width, c2.height);\n            polyRef.current = [];\n        };\n\n        // dblclick: finish curve\n        const finishCurve = e => {\n            if (activeTool !== \"curve\" || curveRef.current.length < 2) return;\n\n            \n            const pos = getPos(e);\n            curveRef.current.push(pos);\n\n            \n            const newShape = {\n                tool: \"curve\",\n                points: curveRef.current.slice(),\n                lineColor, fillColor, strokeWidth,\n                selected: false\n            };\n            shapesRef.current.push(newShape);\n\n            undoStack.current.push({ type: 'add', shapes: [newShape] });\n            \n            redoStack.current = [];\n\n            \n            shapesRef.current.forEach(s => (s.selected = false));\n            shapesRef.current[shapesRef.current.length - 1].selected = true;\n            redrawAll();\n            ctx2.clearRect(0, 0, c2.width, c2.height);\n\n            \n            curveRef.current = [];\n            setIsDrawing(false);\n        };\n\n        // 10) keydown: undo/redo/delete/copy/paste shortcuts\n        const onKeyDown = e => {\n            // undo\n            if (e.ctrlKey && !e.shiftKey && e.key.toLowerCase() === 'z') {\n                const action = undoStack.current.pop();\n                if (!action) return;\n\n                if (action.type === 'add') {\n                    \n                    shapesRef.current = shapesRef.current.filter(\n                        s => !action.shapes.includes(s)\n                    );\n                } else if (action.type === 'delete') {\n                    \n                    action.shapes.forEach((shape, i) => {\n                        const idx = action.indices[i];\n                        shapesRef.current.splice(idx, 0, shape);\n                    });\n                }\n\n                redoStack.current.push(action);\n                redrawAll();\n            }\n            // redo\n            else if (e.ctrlKey && e.shiftKey && e.key.toLowerCase() === 'z') {\n                const action = redoStack.current.pop();\n                if (!action) return;\n\n                if (action.type === 'add') {\n                    \n                    shapesRef.current.push(...action.shapes);\n                } else if (action.type === 'delete') {\n                    \n                    shapesRef.current = shapesRef.current.filter(\n                        s => !action.shapes.includes(s)\n                    );\n                }\n\n                undoStack.current.push(action);\n                redrawAll();\n            }\n            // delete\n            else if (e.key === \"Delete\") {\n                const deleted = shapesRef.current.filter(s => s.selected);\n                if (deleted.length) {\n                    \n                    const indices = deleted.map(s => shapesRef.current.indexOf(s));\n                    shapesRef.current = shapesRef.current.filter(s => !s.selected);\n                    undoStack.current.push({ type: 'delete', shapes: deleted, indices });\n                    redoStack.current = [];\n                    redrawAll();\n                }\n            }\n            //copy\n            else if (e.ctrlKey && e.key.toLowerCase() === \"c\") {\n                clipboardRef.current = shapesRef.current\n                    .filter(s => s.selected)\n                    .map(s => JSON.parse(JSON.stringify(s)));\n            }\n            // paste\n            else if (e.ctrlKey && e.key.toLowerCase() === \"v\") {\n                const OFFSET = 10;\n                const pasted = clipboardRef.current.map(orig => {\n                    const copy = JSON.parse(JSON.stringify(orig));\n\n                    if (copy.points) {\n                        copy.points.forEach(p => {\n                            p.x += OFFSET; p.y += OFFSET;\n                        });\n                    } else {\n                        copy.x0 += OFFSET; copy.y0 += OFFSET;\n                        copy.x1 += OFFSET; copy.y1 += OFFSET;\n                    }\n\n                    copy.selected = true;\n                    copy.rotation = copy.rotation || 0;\n                    return copy;\n                });\n\n                if (pasted.length) {\n\n                    shapesRef.current.forEach(s => s.selected = false);\n                    shapesRef.current.push(...pasted);\n\n\n                    undoStack.current.push({ type: 'add', shapes: pasted });\n                    redoStack.current = [];\n\n                    redrawAll();\n                }\n            }\n        };\n        // attach all listener\n        c2.addEventListener(\"mousedown\", down);\n        c2.addEventListener(\"mousemove\", move);\n        c2.addEventListener(\"mouseup\", up);\n        c2.addEventListener(\"dblclick\", finishPoly);\n        c2.addEventListener(\"dblclick\", finishCurve);\n        window.addEventListener(\"keydown\", onKeyDown);\n\n        // cleanup on unmount or deps change\n        return () => {\n            c2.removeEventListener(\"mousedown\", down);\n            c2.removeEventListener(\"mousemove\", move);\n            c2.removeEventListener(\"mouseup\", up);\n            c2.removeEventListener(\"dblclick\", finishPoly);\n            c2.removeEventListener(\"dblclick\", finishCurve);\n            window.removeEventListener(\"keydown\", onKeyDown);\n        };\n    }, [activeTool, isDrawing, startPos, lineColor, fillColor, strokeWidth, showGrid, snapToGrid, redrawAll]);\n\n    return (\n        <div ref={containerRef} className=\"canvas-container\">\n            <canvas ref={c1Ref} />\n            <canvas ref={c2Ref} style={{ backgroundColor: \"transparent\" }} />\n        </div>\n    );\n});\n\nexport default Canvas;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}