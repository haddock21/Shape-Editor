{"ast":null,"code":"var _jsxFileName = \"/home/nightsquid/Desktop/GUI II/studyspace/src/components/Canvas.js\",\n  _s = $RefreshSig$();\n// src/components/Canvas.js\nimport React, { forwardRef, useImperativeHandle, useRef, useEffect, useState } from \"react\";\nimport { jsPDF } from \"jspdf\";\nimport \"../css/canvas.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Canvas = /*#__PURE__*/_s(/*#__PURE__*/forwardRef(_c = _s(({\n  activeTool,\n  lineColor,\n  fillColor,\n  strokeWidth\n}, ref) => {\n  _s();\n  const containerRef = useRef(null);\n  const c1Ref = useRef(null);\n  const c2Ref = useRef(null);\n  const shapesRef = useRef([]);\n  const redoRef = useRef([]);\n  const polyRef = useRef([]);\n  const curveRef = useRef([]);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [startPos, setStartPos] = useState({\n    x: 0,\n    y: 0\n  });\n  const dragRef = useRef({\n    isDragging: false,\n    startPos: {\n      x: 0,\n      y: 0\n    },\n    shapeIndex: null,\n    origShape: null\n  });\n\n  // 1) Expose export/load/download handlers\n  useImperativeHandle(ref, () => ({\n    exportShapes: () => {\n      const data = JSON.stringify(shapesRef.current, null, 2);\n      const blob = new Blob([data], {\n        type: \"application/json\"\n      });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement(\"a\");\n      a.href = url;\n      a.download = \"shapes.json\";\n      a.click();\n      URL.revokeObjectURL(url);\n    },\n    downloadJPEG: () => {\n      const shapes = shapesRef.current;\n      const pad = 20;\n\n      // 1) Compute the tight bounds for all shapes (including circles/polygons)\n      let minX = Infinity,\n        minY = Infinity;\n      let maxX = -Infinity,\n        maxY = -Infinity;\n      shapes.forEach(s => {\n        if (s.tool === \"circle\" || s.tool === \"polygon\") {\n          const r = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n          minX = Math.min(minX, s.x0 - r);\n          maxX = Math.max(maxX, s.x0 + r);\n          minY = Math.min(minY, s.y0 - r);\n          maxY = Math.max(maxY, s.y0 + r);\n        } else {\n          minX = Math.min(minX, s.x0, s.x1);\n          maxX = Math.max(maxX, s.x0, s.x1);\n          minY = Math.min(minY, s.y0, s.y1);\n          maxY = Math.max(maxY, s.y0, s.y1);\n        }\n      });\n\n      // If no shapes, default to entire canvas\n      if (minX === Infinity) {\n        minX = 0;\n        minY = 0;\n        maxX = c1Ref.current.width;\n        maxY = c1Ref.current.height;\n      }\n\n      // 2) Add padding and clamp to canvas size\n      minX = minX - pad;\n      minY = minY - pad;\n      maxX = maxX + pad;\n      maxY = maxY + pad;\n      const sw = maxX - minX;\n      const sh = maxY - minY;\n\n      // 3) Create offscreen canvas exactly sw×sh\n      const tmp = document.createElement(\"canvas\");\n      tmp.width = sw;\n      tmp.height = sh;\n\n      // 4) Replay your redrawAll INTO that offscreen canvas,\n      //    offsetting every shape by (-minX, -minY)\n      redrawAll({\n        current: tmp\n      }, -minX, -minY, \"#ffffff\");\n\n      // 5) Export the offscreen canvas as JPEG\n      const dataURL = tmp.toDataURL(\"image/jpeg\", 1.0);\n      const link = document.createElement(\"a\");\n      link.href = dataURL;\n      link.download = \"shapes.jpg\";\n      link.click();\n    },\n    downloadPDF: () => {\n      const shapes = shapesRef.current;\n      const pad = 20;\n\n      // 1) compute tight bounds (incl. full circles/polygons)\n      let minX = Infinity,\n        minY = Infinity;\n      let maxX = -Infinity,\n        maxY = -Infinity;\n      shapes.forEach(s => {\n        if (s.tool === \"circle\" || s.tool === \"polygon\") {\n          const r = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n          minX = Math.min(minX, s.x0 - r);\n          maxX = Math.max(maxX, s.x0 + r);\n          minY = Math.min(minY, s.y0 - r);\n          maxY = Math.max(maxY, s.y0 + r);\n        } else {\n          minX = Math.min(minX, s.x0, s.x1);\n          maxX = Math.max(maxX, s.x0, s.x1);\n          minY = Math.min(minY, s.y0, s.y1);\n          maxY = Math.max(maxY, s.y0, s.y1);\n        }\n      });\n\n      // fallback to full canvas if no shapes\n      if (minX === Infinity) {\n        minX = 0;\n        minY = 0;\n        maxX = c1Ref.current.width;\n        maxY = c1Ref.current.height;\n      }\n\n      // 2) apply padding (no clamping)\n      minX -= pad;\n      minY -= pad;\n      maxX += pad;\n      maxY += pad;\n      const sw = maxX - minX;\n      const sh = maxY - minY;\n\n      // 3) offscreen canvas exactly sw×sh\n      const tmp = document.createElement(\"canvas\");\n      tmp.width = sw;\n      tmp.height = sh;\n\n      // replay draw\n      redrawAll({\n        current: tmp\n      }, -minX, -minY, \"#ffffff\");\n\n      // 4) setup jsPDF\n      const orientation = sw > sh ? \"landscape\" : \"portrait\";\n      const pdf = new jsPDF({\n        orientation,\n        unit: \"px\",\n        format: \"a4\"\n      });\n      const pageW = pdf.internal.pageSize.getWidth();\n      const pageH = pdf.internal.pageSize.getHeight();\n\n      // 5) compute scale to fit\n      const scale = Math.min(pageW / sw, pageH / sh);\n\n      // 6) split vertically into pages if needed\n      let yOffset = 0;\n      while (yOffset < sh) {\n        // slice height in source pixels\n        const sliceH = Math.min(sh - yOffset, pageH / scale);\n\n        // draw slice to a tiny canvas\n        const slice = document.createElement(\"canvas\");\n        slice.width = sw;\n        slice.height = sliceH;\n        slice.getContext(\"2d\").drawImage(tmp, 0, yOffset, sw, sliceH, 0, 0, sw, sliceH);\n\n        // add slice image to PDF\n        const imgData = slice.toDataURL(\"image/jpeg\", 1.0);\n        const imgW = sw * scale,\n          imgH = sliceH * scale;\n        const xPos = (pageW - imgW) / 2;\n        pdf.addImage(imgData, \"JPEG\", xPos, 0, imgW, imgH);\n        yOffset += sliceH;\n        if (yOffset < sh) pdf.addPage();\n      }\n\n      // 7) save\n      pdf.save(\"shapes.pdf\");\n    },\n    loadShapes: arr => {\n      shapesRef.current = arr.map(s => ({\n        ...s,\n        selected: false\n      }));\n      redrawAll();\n    },\n    getShapeCount: () => shapesRef.current.length,\n    clearShapes: () => {\n      shapesRef.current = [];\n      redrawAll();\n    }\n  }));\n\n  // 2) Resize loop: keep canvas internal size in sync with CSS size\n  useEffect(() => {\n    const resize = () => {\n      const {\n        width,\n        height\n      } = containerRef.current.getBoundingClientRect();\n      c1Ref.current.width = width;\n      c1Ref.current.height = height;\n      c2Ref.current.width = width;\n      c2Ref.current.height = height;\n      redrawAll();\n    };\n    resize();\n    window.addEventListener(\"resize\", resize);\n    return () => window.removeEventListener(\"resize\", resize);\n  }, []);\n  useEffect(() => {\n    let dirty = false;\n\n    // update all selected shapes\n    shapesRef.current.forEach(s => {\n      if (s.selected) {\n        // only mark dirty if something actually changed\n        if (s.strokeWidth !== strokeWidth || s.lineColor !== lineColor || s.fillColor !== fillColor) {\n          s.strokeWidth = strokeWidth;\n          s.lineColor = lineColor;\n          s.fillColor = fillColor;\n          dirty = true;\n        }\n      }\n    });\n\n    // if we changed anything, repaint\n    if (dirty) redrawAll();\n  }, [strokeWidth, lineColor, fillColor]);\n\n  // 3) Redraw everything (with baked-in background)\n  function redrawAll(context = c1Ref, offsetX = 0, offsetY = 0, backgroundColor = \"#979797\") {\n    const c = context.current;\n    const ctx = c.getContext(\"2d\");\n    const w = ctx.canvas.width;\n    const h = ctx.canvas.height;\n\n    // 1) clear & paint background\n    ctx.clearRect(0, 0, w, h);\n    ctx.fillStyle = backgroundColor;\n    ctx.fillRect(0, 0, w, h);\n\n    // 2) draw each shape, offset by offsetX/offsetY\n    shapesRef.current.forEach(s => {\n      const lc = s.lineColor || lineColor;\n      const fc = s.fillColor || fillColor;\n      const sw = s.strokeWidth || strokeWidth;\n      ctx.save();\n      ctx.strokeStyle = lc;\n      ctx.fillStyle = fc;\n      ctx.lineWidth = sw;\n      ctx.beginPath();\n      const x0 = s.x0 + offsetX;\n      const y0 = s.y0 + offsetY;\n      const x1 = s.x1 + offsetX;\n      const y1 = s.y1 + offsetY;\n      switch (s.tool) {\n        case \"square\":\n          // compute raw delta\n          const dx = s.x1 - s.x0;\n          const dy = s.y1 - s.y0;\n          let w, h;\n          if (s.isSquare) {\n            // lock into a square: choose the smaller side\n            const side = Math.min(Math.abs(dx), Math.abs(dy));\n            w = dx < 0 ? -side : side;\n            h = dy < 0 ? -side : side;\n          } else {\n            // free‐form rectangle\n            w = dx;\n            h = dy;\n          }\n          ctx.fillRect(s.x0 + offsetX, s.y0 + offsetY, w, h);\n          ctx.strokeRect(s.x0 + offsetX, s.y0 + offsetY, w, h);\n          break;\n        case \"line\":\n          ctx.moveTo(x0, y0);\n          ctx.lineTo(x1, y1);\n          ctx.stroke();\n          break;\n        case \"circle\":\n          console.log(\"final circle draw; isCircle=\", s.isCircle);\n          if (s.isCircle) {\n            // perfect circle\n            const r = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n            ctx.arc(x0, y0, r, 0, 2 * Math.PI);\n          } else {\n            // free‐form ellipse\n            const rx = Math.abs(s.x1 - s.x0);\n            const ry = Math.abs(s.y1 - s.y0);\n            ctx.ellipse(x0, y0, rx, ry, 0, 0, 2 * Math.PI);\n          }\n          ctx.fill();\n          ctx.stroke();\n          break;\n        case \"triangle\":\n          ctx.moveTo(x0, y0);\n          ctx.lineTo(x1, y0);\n          ctx.lineTo((x0 + x1) / 2, y1);\n          ctx.closePath();\n          ctx.fill();\n          ctx.stroke();\n          break;\n        case \"polygon\":\n          const sides = 5;\n          const radius = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n          const step = 2 * Math.PI / sides;\n          for (let i = 0; i < sides; i++) {\n            const ang = i * step - Math.PI / 2;\n            const px = s.x0 + radius * Math.cos(ang) + offsetX;\n            const py = s.y0 + radius * Math.sin(ang) + offsetY;\n            i === 0 ? ctx.moveTo(px, py) : ctx.lineTo(px, py);\n          }\n          ctx.closePath();\n          ctx.fill();\n          ctx.stroke();\n          break;\n        case \"poly-line\":\n          ctx.beginPath();\n          const pts = s.points;\n          ctx.moveTo(pts[0].x + offsetX, pts[0].y + offsetY);\n          for (let i = 1; i < pts.length; i++) {\n            ctx.lineTo(pts[i].x + offsetX, pts[i].y + offsetY);\n          }\n          ctx.stroke();\n          break;\n        case \"curve\":\n          ctx.beginPath();\n          const pts2 = s.points;\n          ctx.moveTo(pts2[0].x + offsetX, pts2[0].y + offsetY);\n          for (let i = 1; i < pts2.length; i++) {\n            const prev = pts2[i - 1],\n              curr = pts2[i];\n            const mx = (prev.x + curr.x) / 2 + offsetX,\n              my = (prev.y + curr.y) / 2 + offsetY;\n            ctx.quadraticCurveTo(prev.x + offsetX, prev.y + offsetY, mx, my);\n          }\n\n          // finish at last point\n          const last = pts2[pts2.length - 1];\n          ctx.lineTo(last.x + offsetX, last.y + offsetY);\n          ctx.stroke();\n          ctx.restore();\n          break;\n      }\n\n      // 3) if shape is selected, draw red bounding box\n      if (s.selected) {\n        ctx.save();\n        ctx.strokeStyle = \"#ff7300\";\n        ctx.lineWidth = 2;\n        const x0 = s.x0 + offsetX,\n          y0 = s.y0 + offsetY;\n        const x1 = s.x1 + offsetX,\n          y1 = s.y1 + offsetY;\n        const R = 5; // handle radius\n\n        if (s.tool === \"line\") {\n          // 1) stroke the line itself\n          ctx.beginPath();\n          ctx.moveTo(x0, y0);\n          ctx.lineTo(x1, y1);\n          ctx.stroke();\n\n          // 2) draw endpoint handles\n          [{\n            x: x0,\n            y: y0\n          }, {\n            x: x1,\n            y: y1\n          }].forEach(pt => {\n            ctx.beginPath();\n            ctx.arc(pt.x, pt.y, R, 0, 2 * Math.PI);\n            ctx.fillStyle = \"white\";\n            ctx.fill();\n            ctx.stroke();\n          });\n        } else if (s.tool === \"polygon\") {\n          // 1) Compute min/max over the 5 polygon vertices\n          const cx = s.x0 + offsetX;\n          const cy = s.y0 + offsetY;\n          const radius = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n          const sides = 5;\n          let xMin = Infinity,\n            yMin = Infinity,\n            xMax = -Infinity,\n            yMax = -Infinity;\n          for (let i = 0; i < sides; i++) {\n            const ang = i * (2 * Math.PI / sides) - Math.PI / 2;\n            const px = cx + radius * Math.cos(ang);\n            const py = cy + radius * Math.sin(ang);\n            xMin = Math.min(xMin, px);\n            yMin = Math.min(yMin, py);\n            xMax = Math.max(xMax, px);\n            yMax = Math.max(yMax, py);\n          }\n\n          // 2) Draw the bounding square\n          ctx.strokeRect(xMin, yMin, xMax - xMin, yMax - yMin);\n\n          // 3) Draw 4 corner handles\n          const R = 5;\n          [{\n            x: xMin,\n            y: yMin\n          }, {\n            x: xMax,\n            y: yMin\n          }, {\n            x: xMax,\n            y: yMax\n          }, {\n            x: xMin,\n            y: yMax\n          }].forEach(pt => {\n            ctx.beginPath();\n            ctx.arc(pt.x, pt.y, R, 0, 2 * Math.PI);\n            ctx.fillStyle = \"white\";\n            ctx.fill();\n            ctx.stroke();\n          });\n        } else {\n          // compute box for any other shape (rect, polyline, curve, circle, ellipse, polygon, etc.)\n          let xMin = Infinity,\n            yMin = Infinity,\n            xMax = -Infinity,\n            yMax = -Infinity;\n          if (s.points) {\n            // poly-line or curve\n            s.points.forEach(pt => {\n              xMin = Math.min(xMin, pt.x + offsetX);\n              yMin = Math.min(yMin, pt.y + offsetY);\n              xMax = Math.max(xMax, pt.x + offsetX);\n              yMax = Math.max(yMax, pt.y + offsetY);\n            });\n          } else if (s.tool === \"circle\") {\n            // circle/ellipse\n            const cx = s.x0 + offsetX,\n              cy = s.y0 + offsetY;\n            if (s.isCircle) {\n              const r = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n              xMin = cx - r;\n              yMin = cy - r;\n              xMax = cx + r;\n              yMax = cy + r;\n            } else {\n              const rx = Math.abs(s.x1 - s.x0),\n                ry = Math.abs(s.y1 - s.y0);\n              xMin = cx - rx;\n              yMin = cy - ry;\n              xMax = cx + rx;\n              yMax = cy + ry;\n            }\n          } else {\n            // rectangle, triangle, polygon — any shape defined by x0,y0,x1,y1\n            xMin = Math.min(x0, x1);\n            yMin = Math.min(y0, y1);\n            xMax = Math.max(x0, x1);\n            yMax = Math.max(y0, y1);\n          }\n\n          // 1) draw the bounding box\n          ctx.strokeRect(xMin, yMin, xMax - xMin, yMax - yMin);\n\n          // 2) draw four corner handles\n          [{\n            x: xMin,\n            y: yMin\n          }, {\n            x: xMax,\n            y: yMin\n          }, {\n            x: xMax,\n            y: yMax\n          }, {\n            x: xMin,\n            y: yMax\n          }].forEach(pt => {\n            ctx.beginPath();\n            ctx.arc(pt.x, pt.y, R, 0, 2 * Math.PI);\n            ctx.fillStyle = \"white\";\n            ctx.fill();\n            ctx.stroke();\n          });\n        }\n        ctx.restore();\n      }\n      ctx.restore();\n    });\n  }\n\n  // 4) Drawing & selection logic\n  useEffect(() => {\n    const c2 = c2Ref.current;\n    const ctx2 = c2.getContext(\"2d\");\n    const getPos = e => {\n      const r = c2.getBoundingClientRect();\n      return {\n        x: e.clientX - r.left,\n        y: e.clientY - r.top\n      };\n    };\n    const down = e => {\n      if (activeTool === \"cursor\") {\n        const pos = getPos(e);\n        const ctx1 = c1Ref.current.getContext(\"2d\");\n\n        // clear prior selection\n        shapesRef.current.forEach(s => s.selected = false);\n\n        // iterate top-down\n        for (let i = shapesRef.current.length - 1; i >= 0; i--) {\n          const s = shapesRef.current[i];\n          const path = new Path2D();\n\n          // bump the stroke width for hit detection\n          ctx1.lineWidth = (s.strokeWidth || strokeWidth) + 8;\n          switch (s.tool) {\n            case \"line\":\n              path.moveTo(s.x0, s.y0);\n              path.lineTo(s.x1, s.y1);\n              if (ctx1.isPointInStroke(path, pos.x, pos.y)) {\n                s.selected = true;\n              }\n              break;\n            case \"poly-line\":\n            case \"curve\":\n              const pts = s.points || [];\n              if (pts.length > 1) {\n                path.moveTo(pts[0].x, pts[0].y);\n                for (let j = 1; j < pts.length; j++) {\n                  path.lineTo(pts[j].x, pts[j].y);\n                }\n                if (ctx1.isPointInStroke(path, pos.x, pos.y)) {\n                  s.selected = true;\n                }\n              }\n              break;\n            case \"triangle\":\n              // same vertices you draw with\n              path.moveTo(s.x0, s.y0);\n              path.lineTo(s.x1, s.y0);\n              path.lineTo((s.x0 + s.x1) / 2, s.y1);\n              path.closePath();\n              if (ctx1.isPointInPath(path, pos.x, pos.y)) {\n                s.selected = true;\n              }\n              break;\n            case \"square\":\n            case \"rectangle\":\n              const rx = Math.min(s.x0, s.x1),\n                ry = Math.min(s.y0, s.y1),\n                rw = Math.abs(s.x1 - s.x0),\n                rh = Math.abs(s.y1 - s.y0);\n              path.rect(rx, ry, rw, rh);\n              if (ctx1.isPointInPath(path, pos.x, pos.y)) {\n                s.selected = true;\n              }\n              break;\n            case \"circle\":\n              const cx = s.x0,\n                cy = s.y0;\n              if (s.isCircle) {\n                const r = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n                path.arc(cx, cy, r, 0, 2 * Math.PI);\n              } else {\n                const rx2 = Math.abs(s.x1 - s.x0),\n                  ry2 = Math.abs(s.y1 - s.y0);\n                path.ellipse(cx, cy, rx2, ry2, 0, 0, 2 * Math.PI);\n              }\n              if (ctx1.isPointInPath(path, pos.x, pos.y)) {\n                s.selected = true;\n              }\n              break;\n            case \"polygon\":\n              const sides = 5,\n                pcx = s.x0,\n                pcy = s.y0,\n                rad = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n              for (let k = 0; k < sides; k++) {\n                const ang = k * (2 * Math.PI / sides) - Math.PI / 2,\n                  px = pcx + rad * Math.cos(ang),\n                  py = pcy + rad * Math.sin(ang);\n                k === 0 ? path.moveTo(px, py) : path.lineTo(px, py);\n              }\n              path.closePath();\n              if (ctx1.isPointInPath(path, pos.x, pos.y)) {\n                s.selected = true;\n              }\n              break;\n            default:\n              break;\n          }\n          if (s.selected) {\n            dragRef.current = {\n              isDragging: true,\n              startPos: pos,\n              shapeIndex: i,\n              origShape: JSON.parse(JSON.stringify(s))\n            };\n            redrawAll();\n            return; // stop at the topmost hit\n          }\n        }\n\n        // nothing hit\n        redrawAll();\n        return;\n      }\n      if (activeTool === \"poly-line\") {\n        polyRef.current.push(getPos(e));\n        setIsDrawing(true);\n        return;\n      }\n      if (activeTool === \"curve\") {\n        // add a new control-point\n        curveRef.current.push(getPos(e));\n        setIsDrawing(true);\n        return;\n      }\n      if (![\"square\", \"line\", \"circle\", \"triangle\", \"polygon\"].includes(activeTool)) return;\n      setStartPos(getPos(e));\n      setIsDrawing(true);\n    };\n    const move = e => {\n      if (activeTool === \"cursor\" && dragRef.current.isDragging) {\n        const pos = getPos(e);\n        const dx = pos.x - dragRef.current.startPos.x;\n        const dy = pos.y - dragRef.current.startPos.y;\n        const idx = dragRef.current.shapeIndex;\n        const s = shapesRef.current[idx];\n        const o = dragRef.current.origShape;\n\n        // shift every kind of shape\n        if (s.points) {\n          // poly-line or curve\n          s.points = o.points.map(p => ({\n            x: p.x + dx,\n            y: p.y + dy\n          }));\n        } else {\n          // rect, line, circle, polygon all store x0,y0,x1,y1\n          s.x0 = o.x0 + dx;\n          s.y0 = o.y0 + dy;\n          s.x1 = o.x1 + dx;\n          s.y1 = o.y1 + dy;\n        }\n        redrawAll();\n        return;\n      }\n      const pos = getPos(e);\n      // — Poly-line preview (draw all saved verts + the rubber-band) —\n      if (activeTool === \"poly-line\" && polyRef.current.length) {\n        ctx2.clearRect(0, 0, c2.width, c2.height);\n        ctx2.strokeStyle = lineColor;\n        ctx2.lineWidth = strokeWidth;\n        ctx2.beginPath();\n\n        // 1) move to first vertex\n        ctx2.moveTo(polyRef.current[0].x, polyRef.current[0].y);\n\n        // 2) draw each existing segment\n        for (let i = 1; i < polyRef.current.length; i++) {\n          const pt = polyRef.current[i];\n          ctx2.lineTo(pt.x, pt.y);\n        }\n\n        // 3) rubber-band from last vertex to cursor\n        ctx2.lineTo(pos.x, pos.y);\n        ctx2.stroke();\n        return;\n      }\n      if (activeTool === \"curve\" && curveRef.current.length) {\n        ctx2.clearRect(0, 0, c2.width, c2.height);\n        ctx2.strokeStyle = lineColor;\n        ctx2.lineWidth = strokeWidth;\n        ctx2.beginPath();\n\n        // start at first point\n        const pts = curveRef.current;\n        ctx2.moveTo(pts[0].x, pts[0].y);\n\n        // for each segment, do quadratic through midpoint\n        for (let i = 1; i < pts.length; i++) {\n          const prev = pts[i - 1],\n            curr = pts[i];\n          const mx = (prev.x + curr.x) / 2,\n            my = (prev.y + curr.y) / 2;\n          ctx2.quadraticCurveTo(prev.x, prev.y, mx, my);\n        }\n\n        // final “rubber band” from last control-point to cursor\n        const last = pts[pts.length - 1];\n        const mx2 = (last.x + pos.x) / 2,\n          my2 = (last.y + pos.y) / 2;\n        ctx2.quadraticCurveTo(last.x, last.y, mx2, my2);\n        ctx2.lineTo(pos.x, pos.y);\n        ctx2.stroke();\n        return;\n      }\n      if (!isDrawing) return;\n      const {\n        x,\n        y\n      } = getPos(e);\n      const dx = x - startPos.x,\n        dy = y - startPos.y;\n      ctx2.clearRect(0, 0, c2.width, c2.height);\n      ctx2.strokeStyle = lineColor;\n      ctx2.lineWidth = strokeWidth;\n      ctx2.beginPath();\n      switch (activeTool) {\n        case \"square\":\n          const isSquare = e.shiftKey;\n          if (isSquare) {\n            const side = Math.min(Math.abs(dx), Math.abs(dy));\n            const w = dx < 0 ? -side : side;\n            const h = dy < 0 ? -side : side;\n            ctx2.strokeRect(startPos.x, startPos.y, w, h);\n          } else {\n            ctx2.strokeRect(startPos.x, startPos.y, dx, dy);\n          }\n          break;\n        case \"line\":\n          ctx2.moveTo(startPos.x, startPos.y);\n          ctx2.lineTo(x, y);\n          ctx2.stroke();\n          break;\n        case \"circle\":\n          const isCircle = e.shiftKey;\n          if (isCircle) {\n            // perfect circle\n            const r = Math.hypot(x - startPos.x, y - startPos.y);\n            ctx2.arc(startPos.x, startPos.y, r, 0, 2 * Math.PI);\n          } else {\n            // free‐form ellipse\n            ctx2.ellipse(startPos.x, startPos.y, Math.abs(dx), Math.abs(dy), 0, 0, 2 * Math.PI);\n          }\n          ctx2.stroke();\n          break;\n        case \"triangle\":\n          ctx2.moveTo(startPos.x, startPos.y);\n          ctx2.lineTo(startPos.x + dx, startPos.y);\n          ctx2.lineTo(startPos.x + dx / 2, startPos.y + dy);\n          ctx2.closePath();\n          ctx2.stroke();\n          break;\n        case \"polygon\":\n          const sides2 = 5,\n            rad2 = Math.hypot(dx, dy),\n            step2 = 2 * Math.PI / sides2;\n          for (let i = 0; i < sides2; i++) {\n            const ang = i * step2 - Math.PI / 2,\n              px = startPos.x + rad2 * Math.cos(ang),\n              py = startPos.y + rad2 * Math.sin(ang);\n            i === 0 ? ctx2.moveTo(px, py) : ctx2.lineTo(px, py);\n          }\n          ctx2.closePath();\n          ctx2.stroke();\n          break;\n      }\n    };\n    const up = e => {\n      if (activeTool === \"cursor\" && dragRef.current.isDragging) {\n        dragRef.current.isDragging = false;\n        dragRef.current.shapeIndex = null;\n        dragRef.current.origShape = null;\n        return;\n      }\n      if (activeTool === \"poly-line\" || activeTool === \"curve\") return;\n      if (!isDrawing) return;\n      const {\n        x,\n        y\n      } = getPos(e);\n      // avoids weird extra selection\n      if (startPos.x === x && startPos.y === y && activeTool) {\n        ctx2.clearRect(0, 0, c2.width, c2.height);\n        setIsDrawing(false);\n        return;\n      }\n      const isCircle = activeTool === \"circle\" && e.shiftKey;\n      const isSquare = activeTool === \"square\" && e.shiftKey;\n      shapesRef.current.push({\n        tool: activeTool,\n        x0: startPos.x,\n        y0: startPos.y,\n        x1: x,\n        y1: y,\n        lineColor,\n        fillColor,\n        strokeWidth,\n        isCircle,\n        isSquare,\n        selected: false\n      });\n      shapesRef.current.forEach(s => s.selected = false);\n      shapesRef.current[shapesRef.current.length - 1].selected = true;\n      redrawAll();\n      ctx2.clearRect(0, 0, c2.width, c2.height);\n      setIsDrawing(false);\n    };\n    const finishPoly = e => {\n      if (activeTool !== \"poly-line\" || polyRef.current.length < 2) return;\n      shapesRef.current.push({\n        tool: \"poly-line\",\n        points: polyRef.current.slice(),\n        lineColor,\n        fillColor,\n        strokeWidth,\n        selected: false\n      });\n      shapesRef.current.forEach(s => s.selected = false);\n      shapesRef.current[shapesRef.current.length - 1].selected = true;\n      redrawAll();\n      ctx2.clearRect(0, 0, c2.width, c2.height);\n      polyRef.current = [];\n    };\n    const finishCurve = e => {\n      if (activeTool !== \"curve\" || curveRef.current.length < 2) return;\n      shapesRef.current.push({\n        tool: \"curve\",\n        points: curveRef.current.slice(),\n        lineColor,\n        fillColor,\n        strokeWidth,\n        selected: false\n      });\n      shapesRef.current.forEach(s => s.selected = false);\n      shapesRef.current[shapesRef.current.length - 1].selected = true;\n      redrawAll();\n      ctx2.clearRect(0, 0, c2.width, c2.height);\n      curveRef.current = [];\n      setIsDrawing(false);\n    };\n    const onKeyDown = e => {\n      if (e.ctrlKey && e.key === \"z\" && shapesRef.current.length) {\n        redoRef.current.push(shapesRef.current.pop());\n        redrawAll();\n      } else if (e.ctrlKey && e.shiftKey && e.key.toLowerCase() === \"z\" && redoRef.current.length) {\n        shapesRef.current.push(redoRef.current.pop());\n        redrawAll();\n      }\n    };\n    c2.addEventListener(\"mousedown\", down);\n    c2.addEventListener(\"mousemove\", move);\n    c2.addEventListener(\"mouseup\", up);\n    c2.addEventListener(\"dblclick\", finishPoly);\n    c2.addEventListener(\"dblclick\", finishCurve);\n    window.addEventListener(\"keydown\", onKeyDown);\n    return () => {\n      c2.removeEventListener(\"mousedown\", down);\n      c2.removeEventListener(\"mousemove\", move);\n      c2.removeEventListener(\"mouseup\", up);\n      c2.removeEventListener(\"dblclick\", finishPoly);\n      c2.removeEventListener(\"dblclick\", finishCurve);\n      window.removeEventListener(\"keydown\", onKeyDown);\n    };\n  }, [activeTool, isDrawing, startPos, lineColor, fillColor, strokeWidth]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    className: \"canvas-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: c1Ref\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 858,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: c2Ref,\n      style: {\n        backgroundColor: \"transparent\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 859,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 857,\n    columnNumber: 9\n  }, this);\n}, \"86sus16Kf9AwovcVSxM5ZVzUL9M=\")), \"86sus16Kf9AwovcVSxM5ZVzUL9M=\");\n_c2 = Canvas;\nexport default Canvas;\nvar _c, _c2;\n$RefreshReg$(_c, \"Canvas$forwardRef\");\n$RefreshReg$(_c2, \"Canvas\");","map":{"version":3,"names":["React","forwardRef","useImperativeHandle","useRef","useEffect","useState","jsPDF","jsxDEV","_jsxDEV","Canvas","_s","_c","activeTool","lineColor","fillColor","strokeWidth","ref","containerRef","c1Ref","c2Ref","shapesRef","redoRef","polyRef","curveRef","isDrawing","setIsDrawing","startPos","setStartPos","x","y","dragRef","isDragging","shapeIndex","origShape","exportShapes","data","JSON","stringify","current","blob","Blob","type","url","URL","createObjectURL","a","document","createElement","href","download","click","revokeObjectURL","downloadJPEG","shapes","pad","minX","Infinity","minY","maxX","maxY","forEach","s","tool","r","Math","hypot","x1","x0","y1","y0","min","max","width","height","sw","sh","tmp","redrawAll","dataURL","toDataURL","link","downloadPDF","orientation","pdf","unit","format","pageW","internal","pageSize","getWidth","pageH","getHeight","scale","yOffset","sliceH","slice","getContext","drawImage","imgData","imgW","imgH","xPos","addImage","addPage","save","loadShapes","arr","map","selected","getShapeCount","length","clearShapes","resize","getBoundingClientRect","window","addEventListener","removeEventListener","dirty","context","offsetX","offsetY","backgroundColor","c","ctx","w","canvas","h","clearRect","fillStyle","fillRect","lc","fc","strokeStyle","lineWidth","beginPath","dx","dy","isSquare","side","abs","strokeRect","moveTo","lineTo","stroke","console","log","isCircle","arc","PI","rx","ry","ellipse","fill","closePath","sides","radius","step","i","ang","px","cos","py","sin","pts","points","pts2","prev","curr","mx","my","quadraticCurveTo","last","restore","R","pt","cx","cy","xMin","yMin","xMax","yMax","c2","ctx2","getPos","e","clientX","left","clientY","top","down","pos","ctx1","path","Path2D","isPointInStroke","j","isPointInPath","rw","rh","rect","rx2","ry2","pcx","pcy","rad","k","parse","push","includes","move","idx","o","p","mx2","my2","shiftKey","sides2","rad2","step2","up","finishPoly","finishCurve","onKeyDown","ctrlKey","key","pop","toLowerCase","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","_c2","$RefreshReg$"],"sources":["/home/nightsquid/Desktop/GUI II/studyspace/src/components/Canvas.js"],"sourcesContent":["// src/components/Canvas.js\nimport React, {\n    forwardRef,\n    useImperativeHandle,\n    useRef,\n    useEffect,\n    useState\n} from \"react\";\nimport { jsPDF } from \"jspdf\";\nimport \"../css/canvas.css\";\n\nconst Canvas = forwardRef(({ activeTool, lineColor, fillColor, strokeWidth }, ref) => {\n    const containerRef = useRef(null);\n    const c1Ref = useRef(null);\n    const c2Ref = useRef(null);\n\n    const shapesRef = useRef([]);\n    const redoRef = useRef([]);\n\n    const polyRef = useRef([]);\n    const curveRef = useRef([]);\n\n    const [isDrawing, setIsDrawing] = useState(false);\n    const [startPos, setStartPos] = useState({ x: 0, y: 0 });\n\n    const dragRef = useRef({\n        isDragging: false,\n        startPos: { x: 0, y: 0 },\n        shapeIndex: null,\n        origShape: null\n    });\n\n    // 1) Expose export/load/download handlers\n    useImperativeHandle(ref, () => ({\n        exportShapes: () => {\n            const data = JSON.stringify(shapesRef.current, null, 2);\n            const blob = new Blob([data], { type: \"application/json\" });\n            const url = URL.createObjectURL(blob);\n            const a = document.createElement(\"a\");\n            a.href = url; a.download = \"shapes.json\"; a.click();\n            URL.revokeObjectURL(url);\n        },\n        downloadJPEG: () => {\n            const shapes = shapesRef.current;\n            const pad = 20;\n\n            // 1) Compute the tight bounds for all shapes (including circles/polygons)\n            let minX = Infinity, minY = Infinity;\n            let maxX = -Infinity, maxY = -Infinity;\n\n            shapes.forEach(s => {\n                if (s.tool === \"circle\" || s.tool === \"polygon\") {\n                    const r = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n                    minX = Math.min(minX, s.x0 - r);\n                    maxX = Math.max(maxX, s.x0 + r);\n                    minY = Math.min(minY, s.y0 - r);\n                    maxY = Math.max(maxY, s.y0 + r);\n                } else {\n                    minX = Math.min(minX, s.x0, s.x1);\n                    maxX = Math.max(maxX, s.x0, s.x1);\n                    minY = Math.min(minY, s.y0, s.y1);\n                    maxY = Math.max(maxY, s.y0, s.y1);\n                }\n            });\n\n            // If no shapes, default to entire canvas\n            if (minX === Infinity) {\n                minX = 0; minY = 0;\n                maxX = c1Ref.current.width;\n                maxY = c1Ref.current.height;\n            }\n\n            // 2) Add padding and clamp to canvas size\n            minX = minX - pad;\n            minY = minY - pad;\n            maxX = maxX + pad;\n            maxY = maxY + pad;\n\n            const sw = maxX - minX;\n            const sh = maxY - minY;\n\n            // 3) Create offscreen canvas exactly sw×sh\n            const tmp = document.createElement(\"canvas\");\n            tmp.width = sw;\n            tmp.height = sh;\n\n            // 4) Replay your redrawAll INTO that offscreen canvas,\n            //    offsetting every shape by (-minX, -minY)\n            redrawAll({ current: tmp }, -minX, -minY, \"#ffffff\");\n\n            // 5) Export the offscreen canvas as JPEG\n            const dataURL = tmp.toDataURL(\"image/jpeg\", 1.0);\n            const link = document.createElement(\"a\");\n            link.href = dataURL;\n            link.download = \"shapes.jpg\";\n            link.click();\n        },\n        downloadPDF: () => {\n            const shapes = shapesRef.current;\n            const pad = 20;\n\n            // 1) compute tight bounds (incl. full circles/polygons)\n            let minX = Infinity, minY = Infinity;\n            let maxX = -Infinity, maxY = -Infinity;\n\n            shapes.forEach(s => {\n                if (s.tool === \"circle\" || s.tool === \"polygon\") {\n                    const r = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n                    minX = Math.min(minX, s.x0 - r);\n                    maxX = Math.max(maxX, s.x0 + r);\n                    minY = Math.min(minY, s.y0 - r);\n                    maxY = Math.max(maxY, s.y0 + r);\n                } else {\n                    minX = Math.min(minX, s.x0, s.x1);\n                    maxX = Math.max(maxX, s.x0, s.x1);\n                    minY = Math.min(minY, s.y0, s.y1);\n                    maxY = Math.max(maxY, s.y0, s.y1);\n                }\n            });\n\n            // fallback to full canvas if no shapes\n            if (minX === Infinity) {\n                minX = 0; minY = 0;\n                maxX = c1Ref.current.width;\n                maxY = c1Ref.current.height;\n            }\n\n            // 2) apply padding (no clamping)\n            minX -= pad;\n            minY -= pad;\n            maxX += pad;\n            maxY += pad;\n\n            const sw = maxX - minX;\n            const sh = maxY - minY;\n\n            // 3) offscreen canvas exactly sw×sh\n            const tmp = document.createElement(\"canvas\");\n            tmp.width = sw;\n            tmp.height = sh;\n\n            // replay draw\n            redrawAll({ current: tmp }, -minX, -minY, \"#ffffff\");\n\n            // 4) setup jsPDF\n            const orientation = sw > sh ? \"landscape\" : \"portrait\";\n            const pdf = new jsPDF({ orientation, unit: \"px\", format: \"a4\" });\n            const pageW = pdf.internal.pageSize.getWidth();\n            const pageH = pdf.internal.pageSize.getHeight();\n\n            // 5) compute scale to fit\n            const scale = Math.min(pageW / sw, pageH / sh);\n\n            // 6) split vertically into pages if needed\n            let yOffset = 0;\n            while (yOffset < sh) {\n                // slice height in source pixels\n                const sliceH = Math.min(sh - yOffset, pageH / scale);\n\n                // draw slice to a tiny canvas\n                const slice = document.createElement(\"canvas\");\n                slice.width = sw;\n                slice.height = sliceH;\n                slice.getContext(\"2d\").drawImage(\n                    tmp,\n                    0, yOffset, sw, sliceH,\n                    0, 0, sw, sliceH\n                );\n\n                // add slice image to PDF\n                const imgData = slice.toDataURL(\"image/jpeg\", 1.0);\n                const imgW = sw * scale, imgH = sliceH * scale;\n                const xPos = (pageW - imgW) / 2;\n                pdf.addImage(imgData, \"JPEG\", xPos, 0, imgW, imgH);\n\n                yOffset += sliceH;\n                if (yOffset < sh) pdf.addPage();\n            }\n\n            // 7) save\n            pdf.save(\"shapes.pdf\");\n        },\n        loadShapes: (arr) => {\n            shapesRef.current = arr.map(s => ({ ...s, selected: false }));\n            redrawAll();\n        },\n\n        getShapeCount: () => shapesRef.current.length,\n        clearShapes: () => {\n            shapesRef.current = [];\n            redrawAll();\n        }\n\n    }));\n\n    // 2) Resize loop: keep canvas internal size in sync with CSS size\n    useEffect(() => {\n        const resize = () => {\n            const { width, height } = containerRef.current.getBoundingClientRect();\n            c1Ref.current.width = width;\n            c1Ref.current.height = height;\n            c2Ref.current.width = width;\n            c2Ref.current.height = height;\n            redrawAll();\n        };\n        resize();\n        window.addEventListener(\"resize\", resize);\n        return () => window.removeEventListener(\"resize\", resize);\n    }, []);\n\n    useEffect(() => {\n        let dirty = false;\n\n        // update all selected shapes\n        shapesRef.current.forEach(s => {\n            if (s.selected) {\n                // only mark dirty if something actually changed\n                if (\n                    s.strokeWidth !== strokeWidth ||\n                    s.lineColor !== lineColor ||\n                    s.fillColor !== fillColor\n                ) {\n                    s.strokeWidth = strokeWidth;\n                    s.lineColor = lineColor;\n                    s.fillColor = fillColor;\n                    dirty = true;\n                }\n            }\n        });\n\n        // if we changed anything, repaint\n        if (dirty) redrawAll();\n    }, [strokeWidth, lineColor, fillColor]);\n\n    // 3) Redraw everything (with baked-in background)\n    function redrawAll(context = c1Ref, offsetX = 0, offsetY = 0, backgroundColor = \"#979797\") {\n        const c = context.current;\n        const ctx = c.getContext(\"2d\")\n        const w = ctx.canvas.width;\n        const h = ctx.canvas.height;\n\n        // 1) clear & paint background\n        ctx.clearRect(0, 0, w, h);\n        ctx.fillStyle = backgroundColor;\n        ctx.fillRect(0, 0, w, h);\n\n        // 2) draw each shape, offset by offsetX/offsetY\n        shapesRef.current.forEach(s => {\n            const lc = s.lineColor || lineColor;\n            const fc = s.fillColor || fillColor;\n            const sw = s.strokeWidth || strokeWidth;\n            ctx.save();\n            ctx.strokeStyle = lc;\n            ctx.fillStyle = fc;\n            ctx.lineWidth = sw;\n            ctx.beginPath();\n\n            const x0 = s.x0 + offsetX;\n            const y0 = s.y0 + offsetY;\n            const x1 = s.x1 + offsetX;\n            const y1 = s.y1 + offsetY;\n\n            switch (s.tool) {\n                case \"square\":\n                    // compute raw delta\n                    const dx = s.x1 - s.x0;\n                    const dy = s.y1 - s.y0;\n\n                    let w, h;\n                    if (s.isSquare) {\n                        // lock into a square: choose the smaller side\n                        const side = Math.min(Math.abs(dx), Math.abs(dy));\n                        w = dx < 0 ? -side : side;\n                        h = dy < 0 ? -side : side;\n                    } else {\n                        // free‐form rectangle\n                        w = dx;\n                        h = dy;\n                    }\n\n                    ctx.fillRect(s.x0 + offsetX, s.y0 + offsetY, w, h);\n                    ctx.strokeRect(s.x0 + offsetX, s.y0 + offsetY, w, h);\n                    break;\n                case \"line\":\n                    ctx.moveTo(x0, y0);\n                    ctx.lineTo(x1, y1);\n                    ctx.stroke();\n                    break;\n\n                case \"circle\":\n                    console.log(\"final circle draw; isCircle=\", s.isCircle);\n                    if (s.isCircle) {\n                        // perfect circle\n                        const r = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n                        ctx.arc(x0, y0, r, 0, 2 * Math.PI);\n                    } else {\n                        // free‐form ellipse\n                        const rx = Math.abs(s.x1 - s.x0);\n                        const ry = Math.abs(s.y1 - s.y0);\n                        ctx.ellipse(x0, y0, rx, ry, 0, 0, 2 * Math.PI);\n                    }\n                    ctx.fill();\n                    ctx.stroke();\n                    break;\n\n                case \"triangle\":\n                    ctx.moveTo(x0, y0);\n                    ctx.lineTo(x1, y0);\n                    ctx.lineTo((x0 + x1) / 2, y1);\n                    ctx.closePath();\n                    ctx.fill();\n                    ctx.stroke();\n                    break;\n\n                case \"polygon\":\n                    const sides = 5;\n                    const radius = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n                    const step = (2 * Math.PI) / sides;\n                    for (let i = 0; i < sides; i++) {\n                        const ang = i * step - Math.PI / 2;\n                        const px = s.x0 + radius * Math.cos(ang) + offsetX;\n                        const py = s.y0 + radius * Math.sin(ang) + offsetY;\n                        i === 0 ? ctx.moveTo(px, py) : ctx.lineTo(px, py);\n                    }\n                    ctx.closePath();\n                    ctx.fill();\n                    ctx.stroke();\n                    break;\n                case \"poly-line\":\n                    ctx.beginPath();\n                    const pts = s.points;\n                    ctx.moveTo(pts[0].x + offsetX, pts[0].y + offsetY);\n                    for (let i = 1; i < pts.length; i++) {\n                        ctx.lineTo(pts[i].x + offsetX, pts[i].y + offsetY);\n                    }\n                    ctx.stroke();\n                    break;\n                case \"curve\":\n                    ctx.beginPath();\n\n                    const pts2 = s.points;\n                    ctx.moveTo(pts2[0].x + offsetX, pts2[0].y + offsetY);\n\n                    for (let i = 1; i < pts2.length; i++) {\n                        const prev = pts2[i - 1], curr = pts2[i];\n                        const mx = (prev.x + curr.x) / 2 + offsetX,\n                            my = (prev.y + curr.y) / 2 + offsetY;\n                        ctx.quadraticCurveTo(\n                            prev.x + offsetX, prev.y + offsetY,\n                            mx, my\n                        );\n                    }\n\n                    // finish at last point\n                    const last = pts2[pts2.length - 1];\n                    ctx.lineTo(last.x + offsetX, last.y + offsetY);\n\n                    ctx.stroke();\n                    ctx.restore();\n                    break;\n            }\n\n            // 3) if shape is selected, draw red bounding box\n            if (s.selected) {\n                ctx.save();\n                ctx.strokeStyle = \"#ff7300\";\n                ctx.lineWidth = 2;\n                const x0 = s.x0 + offsetX, y0 = s.y0 + offsetY;\n                const x1 = s.x1 + offsetX, y1 = s.y1 + offsetY;\n                const R = 5;  // handle radius\n\n                if (s.tool === \"line\") {\n                    // 1) stroke the line itself\n                    ctx.beginPath();\n                    ctx.moveTo(x0, y0);\n                    ctx.lineTo(x1, y1);\n                    ctx.stroke();\n\n                    // 2) draw endpoint handles\n                    [{ x: x0, y: y0 }, { x: x1, y: y1 }].forEach(pt => {\n                        ctx.beginPath();\n                        ctx.arc(pt.x, pt.y, R, 0, 2 * Math.PI);\n                        ctx.fillStyle = \"white\";\n                        ctx.fill();\n                        ctx.stroke();\n                    });\n\n                } else if (s.tool === \"polygon\") {\n                    // 1) Compute min/max over the 5 polygon vertices\n                    const cx = s.x0 + offsetX;\n                    const cy = s.y0 + offsetY;\n                    const radius = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n                    const sides = 5;\n                    let xMin = Infinity, yMin = Infinity, xMax = -Infinity, yMax = -Infinity;\n\n                    for (let i = 0; i < sides; i++) {\n                        const ang = i * (2 * Math.PI / sides) - Math.PI / 2;\n                        const px = cx + radius * Math.cos(ang);\n                        const py = cy + radius * Math.sin(ang);\n                        xMin = Math.min(xMin, px); yMin = Math.min(yMin, py);\n                        xMax = Math.max(xMax, px); yMax = Math.max(yMax, py);\n                    }\n\n                    // 2) Draw the bounding square\n                    ctx.strokeRect(\n                        xMin, yMin,\n                        xMax - xMin,\n                        yMax - yMin\n                    );\n\n                    // 3) Draw 4 corner handles\n                    const R = 5;\n                    [\n                        { x: xMin, y: yMin },\n                        { x: xMax, y: yMin },\n                        { x: xMax, y: yMax },\n                        { x: xMin, y: yMax },\n                    ].forEach(pt => {\n                        ctx.beginPath();\n                        ctx.arc(pt.x, pt.y, R, 0, 2 * Math.PI);\n                        ctx.fillStyle = \"white\";\n                        ctx.fill();\n                        ctx.stroke();\n                    });\n                }\n                else {\n                    // compute box for any other shape (rect, polyline, curve, circle, ellipse, polygon, etc.)\n                    let xMin = Infinity, yMin = Infinity, xMax = -Infinity, yMax = -Infinity;\n\n                    if (s.points) {\n                        // poly-line or curve\n                        s.points.forEach(pt => {\n                            xMin = Math.min(xMin, pt.x + offsetX);\n                            yMin = Math.min(yMin, pt.y + offsetY);\n                            xMax = Math.max(xMax, pt.x + offsetX);\n                            yMax = Math.max(yMax, pt.y + offsetY);\n                        });\n                    } else if (s.tool === \"circle\") {\n                        // circle/ellipse\n                        const cx = s.x0 + offsetX, cy = s.y0 + offsetY;\n                        if (s.isCircle) {\n                            const r = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n                            xMin = cx - r; yMin = cy - r; xMax = cx + r; yMax = cy + r;\n                        } else {\n                            const rx = Math.abs(s.x1 - s.x0), ry = Math.abs(s.y1 - s.y0);\n                            xMin = cx - rx; yMin = cy - ry; xMax = cx + rx; yMax = cy + ry;\n                        }\n                    } else {\n                        // rectangle, triangle, polygon — any shape defined by x0,y0,x1,y1\n                        xMin = Math.min(x0, x1);\n                        yMin = Math.min(y0, y1);\n                        xMax = Math.max(x0, x1);\n                        yMax = Math.max(y0, y1);\n                    }\n\n                    // 1) draw the bounding box\n                    ctx.strokeRect(\n                        xMin, yMin,\n                        xMax - xMin,\n                        yMax - yMin\n                    );\n\n                    // 2) draw four corner handles\n                    [\n                        { x: xMin, y: yMin },\n                        { x: xMax, y: yMin },\n                        { x: xMax, y: yMax },\n                        { x: xMin, y: yMax },\n                    ].forEach(pt => {\n                        ctx.beginPath();\n                        ctx.arc(pt.x, pt.y, R, 0, 2 * Math.PI);\n                        ctx.fillStyle = \"white\";\n                        ctx.fill();\n                        ctx.stroke();\n                    });\n                }\n\n                ctx.restore();\n            }\n\n            ctx.restore();\n        });\n    }\n\n    // 4) Drawing & selection logic\n    useEffect(() => {\n        const c2 = c2Ref.current;\n        const ctx2 = c2.getContext(\"2d\");\n\n        const getPos = e => {\n            const r = c2.getBoundingClientRect();\n            return { x: e.clientX - r.left, y: e.clientY - r.top };\n        };\n\n        const down = e => {\n            if (activeTool === \"cursor\") {\n                const pos = getPos(e);\n                const ctx1 = c1Ref.current.getContext(\"2d\");\n\n                // clear prior selection\n                shapesRef.current.forEach(s => s.selected = false);\n\n                // iterate top-down\n                for (let i = shapesRef.current.length - 1; i >= 0; i--) {\n                    const s = shapesRef.current[i];\n                    const path = new Path2D();\n\n                    // bump the stroke width for hit detection\n                    ctx1.lineWidth = (s.strokeWidth || strokeWidth) + 8;\n\n                    switch (s.tool) {\n                        case \"line\":\n                            path.moveTo(s.x0, s.y0);\n                            path.lineTo(s.x1, s.y1);\n                            if (ctx1.isPointInStroke(path, pos.x, pos.y)) {\n                                s.selected = true;\n                            }\n                            break;\n\n                        case \"poly-line\":\n                        case \"curve\":\n                            const pts = s.points || [];\n                            if (pts.length > 1) {\n                                path.moveTo(pts[0].x, pts[0].y);\n                                for (let j = 1; j < pts.length; j++) {\n                                    path.lineTo(pts[j].x, pts[j].y);\n                                }\n                                if (ctx1.isPointInStroke(path, pos.x, pos.y)) {\n                                    s.selected = true;\n                                }\n                            }\n                            break;\n\n                        case \"triangle\":\n                            // same vertices you draw with\n                            path.moveTo(s.x0, s.y0);\n                            path.lineTo(s.x1, s.y0);\n                            path.lineTo((s.x0 + s.x1) / 2, s.y1);\n                            path.closePath();\n                            if (ctx1.isPointInPath(path, pos.x, pos.y)) {\n                                s.selected = true;\n                            }\n                            break;\n\n                        case \"square\":\n                        case \"rectangle\":\n                            const rx = Math.min(s.x0, s.x1),\n                                ry = Math.min(s.y0, s.y1),\n                                rw = Math.abs(s.x1 - s.x0),\n                                rh = Math.abs(s.y1 - s.y0);\n                            path.rect(rx, ry, rw, rh);\n                            if (ctx1.isPointInPath(path, pos.x, pos.y)) {\n                                s.selected = true;\n                            }\n                            break;\n\n                        case \"circle\":\n                            const cx = s.x0, cy = s.y0;\n                            if (s.isCircle) {\n                                const r = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n                                path.arc(cx, cy, r, 0, 2 * Math.PI);\n                            } else {\n                                const rx2 = Math.abs(s.x1 - s.x0),\n                                    ry2 = Math.abs(s.y1 - s.y0);\n                                path.ellipse(cx, cy, rx2, ry2, 0, 0, 2 * Math.PI);\n                            }\n                            if (ctx1.isPointInPath(path, pos.x, pos.y)) {\n                                s.selected = true;\n                            }\n                            break;\n\n                        case \"polygon\":\n                            const sides = 5,\n                                pcx = s.x0, pcy = s.y0,\n                                rad = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n                            for (let k = 0; k < sides; k++) {\n                                const ang = k * (2 * Math.PI / sides) - Math.PI / 2,\n                                    px = pcx + rad * Math.cos(ang),\n                                    py = pcy + rad * Math.sin(ang);\n                                k === 0 ? path.moveTo(px, py) : path.lineTo(px, py);\n                            }\n                            path.closePath();\n                            if (ctx1.isPointInPath(path, pos.x, pos.y)) {\n                                s.selected = true;\n                            }\n                            break;\n                        default:\n                            break;\n                    }\n\n                    if (s.selected) {\n                        dragRef.current = {\n                            isDragging: true,\n                            startPos: pos,\n                            shapeIndex: i,\n                            origShape: JSON.parse(JSON.stringify(s))\n                        };\n                        redrawAll();\n                        return;  // stop at the topmost hit\n                    }\n                }\n\n                // nothing hit\n                redrawAll();\n                return;\n            }\n\n            if (activeTool === \"poly-line\") {\n                polyRef.current.push(getPos(e));\n                setIsDrawing(true);\n                return;\n            }\n            if (activeTool === \"curve\") {\n                // add a new control-point\n                curveRef.current.push(getPos(e));\n                setIsDrawing(true);\n                return;\n            }\n            if (![\"square\", \"line\", \"circle\", \"triangle\", \"polygon\"].includes(activeTool)) return;\n            setStartPos(getPos(e));\n            setIsDrawing(true);\n        };\n\n        const move = e => {\n            if (activeTool === \"cursor\" && dragRef.current.isDragging) {\n                const pos = getPos(e);\n                const dx = pos.x - dragRef.current.startPos.x;\n                const dy = pos.y - dragRef.current.startPos.y;\n                const idx = dragRef.current.shapeIndex;\n                const s = shapesRef.current[idx];\n                const o = dragRef.current.origShape;\n\n                // shift every kind of shape\n                if (s.points) {\n                    // poly-line or curve\n                    s.points = o.points.map(p => ({ x: p.x + dx, y: p.y + dy }));\n                } else {\n                    // rect, line, circle, polygon all store x0,y0,x1,y1\n                    s.x0 = o.x0 + dx; s.y0 = o.y0 + dy;\n                    s.x1 = o.x1 + dx; s.y1 = o.y1 + dy;\n                }\n\n                redrawAll();\n                return;\n            }\n            const pos = getPos(e);\n            // — Poly-line preview (draw all saved verts + the rubber-band) —\n            if (activeTool === \"poly-line\" && polyRef.current.length) {\n                ctx2.clearRect(0, 0, c2.width, c2.height);\n                ctx2.strokeStyle = lineColor;\n                ctx2.lineWidth = strokeWidth;\n                ctx2.beginPath();\n\n                // 1) move to first vertex\n                ctx2.moveTo(polyRef.current[0].x, polyRef.current[0].y);\n\n                // 2) draw each existing segment\n                for (let i = 1; i < polyRef.current.length; i++) {\n                    const pt = polyRef.current[i];\n                    ctx2.lineTo(pt.x, pt.y);\n                }\n\n                // 3) rubber-band from last vertex to cursor\n                ctx2.lineTo(pos.x, pos.y);\n\n                ctx2.stroke();\n                return;\n            }\n\n            if (activeTool === \"curve\" && curveRef.current.length) {\n                ctx2.clearRect(0, 0, c2.width, c2.height);\n                ctx2.strokeStyle = lineColor;\n                ctx2.lineWidth = strokeWidth;\n                ctx2.beginPath();\n\n                // start at first point\n                const pts = curveRef.current;\n                ctx2.moveTo(pts[0].x, pts[0].y);\n\n                // for each segment, do quadratic through midpoint\n                for (let i = 1; i < pts.length; i++) {\n                    const prev = pts[i - 1], curr = pts[i];\n                    const mx = (prev.x + curr.x) / 2,\n                        my = (prev.y + curr.y) / 2;\n                    ctx2.quadraticCurveTo(prev.x, prev.y, mx, my);\n                }\n\n                // final “rubber band” from last control-point to cursor\n                const last = pts[pts.length - 1];\n                const mx2 = (last.x + pos.x) / 2,\n                    my2 = (last.y + pos.y) / 2;\n                ctx2.quadraticCurveTo(last.x, last.y, mx2, my2);\n                ctx2.lineTo(pos.x, pos.y);\n\n                ctx2.stroke();\n                return;\n            }\n\n\n            if (!isDrawing) return;\n\n            const { x, y } = getPos(e);\n\n            const dx = x - startPos.x, dy = y - startPos.y;\n            ctx2.clearRect(0, 0, c2.width, c2.height);\n            ctx2.strokeStyle = lineColor;\n            ctx2.lineWidth = strokeWidth;\n            ctx2.beginPath();\n            switch (activeTool) {\n                case \"square\":\n                    const isSquare = e.shiftKey;\n                    if (isSquare) {\n                        const side = Math.min(Math.abs(dx), Math.abs(dy));\n                        const w = dx < 0 ? -side : side;\n                        const h = dy < 0 ? -side : side;\n                        ctx2.strokeRect(startPos.x, startPos.y, w, h);\n                    } else { ctx2.strokeRect(startPos.x, startPos.y, dx, dy); }\n                    break;\n                case \"line\":\n                    ctx2.moveTo(startPos.x, startPos.y);\n                    ctx2.lineTo(x, y);\n                    ctx2.stroke();\n                    break;\n                case \"circle\":\n                    const isCircle = e.shiftKey;\n                    if (isCircle) {\n                        // perfect circle\n                        const r = Math.hypot(x - startPos.x, y - startPos.y);\n                        ctx2.arc(startPos.x, startPos.y, r, 0, 2 * Math.PI);\n                    } else {\n                        // free‐form ellipse\n                        ctx2.ellipse(startPos.x, startPos.y, Math.abs(dx), Math.abs(dy), 0, 0, 2 * Math.PI);\n                    }\n                    ctx2.stroke()\n                    break;\n                case \"triangle\":\n                    ctx2.moveTo(startPos.x, startPos.y);\n                    ctx2.lineTo(startPos.x + dx, startPos.y);\n                    ctx2.lineTo(startPos.x + dx / 2, startPos.y + dy);\n                    ctx2.closePath();\n                    ctx2.stroke();\n                    break;\n                case \"polygon\":\n                    const sides2 = 5, rad2 = Math.hypot(dx, dy), step2 = 2 * Math.PI / sides2;\n                    for (let i = 0; i < sides2; i++) {\n                        const ang = i * step2 - Math.PI / 2,\n                            px = startPos.x + rad2 * Math.cos(ang),\n                            py = startPos.y + rad2 * Math.sin(ang);\n                        i === 0 ? ctx2.moveTo(px, py) : ctx2.lineTo(px, py);\n                    }\n                    ctx2.closePath();\n                    ctx2.stroke();\n                    break;\n            }\n\n        };\n\n        const up = e => {\n            if (activeTool === \"cursor\" && dragRef.current.isDragging) {\n                dragRef.current.isDragging = false;\n                dragRef.current.shapeIndex = null;\n                dragRef.current.origShape = null;\n                return;\n            }\n            if (activeTool === \"poly-line\" || activeTool === \"curve\") return;\n            if (!isDrawing) return;\n            const { x, y } = getPos(e);\n            // avoids weird extra selection\n            if (startPos.x === x && startPos.y === y && (activeTool)) {\n                ctx2.clearRect(0, 0, c2.width, c2.height);\n                setIsDrawing(false);\n                return;\n            }\n\n            const isCircle = activeTool === \"circle\" && e.shiftKey;\n            const isSquare = activeTool === \"square\" && e.shiftKey;\n            shapesRef.current.push({\n                tool: activeTool,\n                x0: startPos.x, y0: startPos.y,\n                x1: x, y1: y,\n                lineColor, fillColor, strokeWidth,\n                isCircle, isSquare,\n                selected: false\n            });\n\n            shapesRef.current.forEach(s => s.selected = false);\n            shapesRef.current[shapesRef.current.length - 1].selected = true;\n\n            redrawAll();\n            ctx2.clearRect(0, 0, c2.width, c2.height);\n            setIsDrawing(false);\n        };\n\n        const finishPoly = e => {\n            if (activeTool !== \"poly-line\" || polyRef.current.length < 2) return;\n            shapesRef.current.push({\n                tool: \"poly-line\",\n                points: polyRef.current.slice(),\n                lineColor, fillColor, strokeWidth,\n                selected: false\n            });\n\n            shapesRef.current.forEach(s => s.selected = false);\n            shapesRef.current[shapesRef.current.length - 1].selected = true;\n\n            redrawAll();\n            ctx2.clearRect(0, 0, c2.width, c2.height);\n            polyRef.current = [];\n        };\n\n        const finishCurve = e => {\n            if (activeTool !== \"curve\" || curveRef.current.length < 2) return;\n            shapesRef.current.push({\n                tool: \"curve\",\n                points: curveRef.current.slice(),\n                lineColor, fillColor, strokeWidth,\n                selected: false\n            });\n\n            shapesRef.current.forEach(s => s.selected = false);\n            shapesRef.current[shapesRef.current.length - 1].selected = true;\n\n            redrawAll();\n            ctx2.clearRect(0, 0, c2.width, c2.height);\n            curveRef.current = [];\n            setIsDrawing(false);\n        };\n\n        const onKeyDown = e => {\n            if (e.ctrlKey && e.key === \"z\" && shapesRef.current.length) {\n                redoRef.current.push(shapesRef.current.pop());\n                redrawAll();\n            }\n            else if (e.ctrlKey && e.shiftKey && e.key.toLowerCase() === \"z\" && redoRef.current.length) {\n                shapesRef.current.push(redoRef.current.pop());\n                redrawAll();\n            }\n        };\n\n        c2.addEventListener(\"mousedown\", down);\n        c2.addEventListener(\"mousemove\", move);\n        c2.addEventListener(\"mouseup\", up);\n        c2.addEventListener(\"dblclick\", finishPoly);\n        c2.addEventListener(\"dblclick\", finishCurve);\n        window.addEventListener(\"keydown\", onKeyDown);\n        return () => {\n            c2.removeEventListener(\"mousedown\", down);\n            c2.removeEventListener(\"mousemove\", move);\n            c2.removeEventListener(\"mouseup\", up);\n            c2.removeEventListener(\"dblclick\", finishPoly);\n            c2.removeEventListener(\"dblclick\", finishCurve);\n            window.removeEventListener(\"keydown\", onKeyDown);\n        };\n    }, [activeTool, isDrawing, startPos, lineColor, fillColor, strokeWidth]);\n\n    return (\n        <div ref={containerRef} className=\"canvas-container\">\n            <canvas ref={c1Ref} />\n            <canvas ref={c2Ref} style={{ backgroundColor: \"transparent\" }} />\n        </div>\n    );\n});\n\nexport default Canvas;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}