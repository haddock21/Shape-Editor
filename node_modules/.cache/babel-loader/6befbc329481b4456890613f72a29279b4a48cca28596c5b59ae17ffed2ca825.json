{"ast":null,"code":"var _jsxFileName = \"/home/nightsquid/Desktop/GUI II/studyspace/src/components/Canvas.js\",\n  _s = $RefreshSig$();\n// src/components/Canvas.js\nimport React, { forwardRef, useImperativeHandle, useRef, useEffect, useState } from \"react\";\nimport { jsPDF } from \"jspdf\";\nimport \"../css/canvas.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Canvas = /*#__PURE__*/_s(/*#__PURE__*/forwardRef(_c = _s(({\n  activeTool,\n  lineColor,\n  fillColor,\n  strokeWidth\n}, ref) => {\n  _s();\n  const containerRef = useRef(null);\n  const c1Ref = useRef(null);\n  const c2Ref = useRef(null);\n  const shapesRef = useRef([]);\n  const redoRef = useRef([]);\n  const polyRef = useRef([]);\n  const curveRef = useRef([]);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [startPos, setStartPos] = useState({\n    x: 0,\n    y: 0\n  });\n\n  // 1) Expose export/load/download handlers\n  useImperativeHandle(ref, () => ({\n    exportShapes: () => {\n      const data = JSON.stringify(shapesRef.current, null, 2);\n      const blob = new Blob([data], {\n        type: \"application/json\"\n      });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement(\"a\");\n      a.href = url;\n      a.download = \"shapes.json\";\n      a.click();\n      URL.revokeObjectURL(url);\n    },\n    downloadJPEG: () => {\n      const shapes = shapesRef.current;\n      const pad = 20;\n\n      // 1) Compute the tight bounds for all shapes (including circles/polygons)\n      let minX = Infinity,\n        minY = Infinity;\n      let maxX = -Infinity,\n        maxY = -Infinity;\n      shapes.forEach(s => {\n        if (s.tool === \"circle\" || s.tool === \"polygon\") {\n          const r = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n          minX = Math.min(minX, s.x0 - r);\n          maxX = Math.max(maxX, s.x0 + r);\n          minY = Math.min(minY, s.y0 - r);\n          maxY = Math.max(maxY, s.y0 + r);\n        } else {\n          minX = Math.min(minX, s.x0, s.x1);\n          maxX = Math.max(maxX, s.x0, s.x1);\n          minY = Math.min(minY, s.y0, s.y1);\n          maxY = Math.max(maxY, s.y0, s.y1);\n        }\n      });\n\n      // If no shapes, default to entire canvas\n      if (minX === Infinity) {\n        minX = 0;\n        minY = 0;\n        maxX = c1Ref.current.width;\n        maxY = c1Ref.current.height;\n      }\n\n      // 2) Add padding and clamp to canvas size\n      minX = minX - pad;\n      minY = minY - pad;\n      maxX = maxX + pad;\n      maxY = maxY + pad;\n      const sw = maxX - minX;\n      const sh = maxY - minY;\n\n      // 3) Create offscreen canvas exactly sw×sh\n      const tmp = document.createElement(\"canvas\");\n      tmp.width = sw;\n      tmp.height = sh;\n\n      // 4) Replay your redrawAll INTO that offscreen canvas,\n      //    offsetting every shape by (-minX, -minY)\n      redrawAll({\n        current: tmp\n      }, -minX, -minY, \"#ffffff\");\n\n      // 5) Export the offscreen canvas as JPEG\n      const dataURL = tmp.toDataURL(\"image/jpeg\", 1.0);\n      const link = document.createElement(\"a\");\n      link.href = dataURL;\n      link.download = \"shapes.jpg\";\n      link.click();\n    },\n    downloadPDF: () => {\n      const shapes = shapesRef.current;\n      const pad = 20;\n\n      // 1) compute tight bounds (incl. full circles/polygons)\n      let minX = Infinity,\n        minY = Infinity;\n      let maxX = -Infinity,\n        maxY = -Infinity;\n      shapes.forEach(s => {\n        if (s.tool === \"circle\" || s.tool === \"polygon\") {\n          const r = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n          minX = Math.min(minX, s.x0 - r);\n          maxX = Math.max(maxX, s.x0 + r);\n          minY = Math.min(minY, s.y0 - r);\n          maxY = Math.max(maxY, s.y0 + r);\n        } else {\n          minX = Math.min(minX, s.x0, s.x1);\n          maxX = Math.max(maxX, s.x0, s.x1);\n          minY = Math.min(minY, s.y0, s.y1);\n          maxY = Math.max(maxY, s.y0, s.y1);\n        }\n      });\n\n      // fallback to full canvas if no shapes\n      if (minX === Infinity) {\n        minX = 0;\n        minY = 0;\n        maxX = c1Ref.current.width;\n        maxY = c1Ref.current.height;\n      }\n\n      // 2) apply padding (no clamping)\n      minX -= pad;\n      minY -= pad;\n      maxX += pad;\n      maxY += pad;\n      const sw = maxX - minX;\n      const sh = maxY - minY;\n\n      // 3) offscreen canvas exactly sw×sh\n      const tmp = document.createElement(\"canvas\");\n      tmp.width = sw;\n      tmp.height = sh;\n\n      // replay draw\n      redrawAll({\n        current: tmp\n      }, -minX, -minY, \"#ffffff\");\n\n      // 4) setup jsPDF\n      const orientation = sw > sh ? \"landscape\" : \"portrait\";\n      const pdf = new jsPDF({\n        orientation,\n        unit: \"px\",\n        format: \"a4\"\n      });\n      const pageW = pdf.internal.pageSize.getWidth();\n      const pageH = pdf.internal.pageSize.getHeight();\n\n      // 5) compute scale to fit\n      const scale = Math.min(pageW / sw, pageH / sh);\n\n      // 6) split vertically into pages if needed\n      let yOffset = 0;\n      while (yOffset < sh) {\n        // slice height in source pixels\n        const sliceH = Math.min(sh - yOffset, pageH / scale);\n\n        // draw slice to a tiny canvas\n        const slice = document.createElement(\"canvas\");\n        slice.width = sw;\n        slice.height = sliceH;\n        slice.getContext(\"2d\").drawImage(tmp, 0, yOffset, sw, sliceH, 0, 0, sw, sliceH);\n\n        // add slice image to PDF\n        const imgData = slice.toDataURL(\"image/jpeg\", 1.0);\n        const imgW = sw * scale,\n          imgH = sliceH * scale;\n        const xPos = (pageW - imgW) / 2;\n        pdf.addImage(imgData, \"JPEG\", xPos, 0, imgW, imgH);\n        yOffset += sliceH;\n        if (yOffset < sh) pdf.addPage();\n      }\n\n      // 7) save\n      pdf.save(\"shapes.pdf\");\n    },\n    loadShapes: arr => {\n      shapesRef.current = arr.map(s => ({\n        ...s,\n        selected: false\n      }));\n      redrawAll();\n    },\n    getShapeCount: () => shapesRef.current.length,\n    clearShapes: () => {\n      shapesRef.current = [];\n      redrawAll();\n    }\n  }));\n\n  // 2) Resize loop: keep canvas internal size in sync with CSS size\n  useEffect(() => {\n    const resize = () => {\n      const {\n        width,\n        height\n      } = containerRef.current.getBoundingClientRect();\n      c1Ref.current.width = width;\n      c1Ref.current.height = height;\n      c2Ref.current.width = width;\n      c2Ref.current.height = height;\n      redrawAll();\n    };\n    resize();\n    window.addEventListener(\"resize\", resize);\n    return () => window.removeEventListener(\"resize\", resize);\n  }, []);\n\n  // 3) Redraw everything (with baked-in background)\n  function redrawAll(context = c1Ref, offsetX = 0, offsetY = 0, backgroundColor = \"#979797\") {\n    const c = context.current;\n    const ctx = c.getContext(\"2d\");\n    const w = ctx.canvas.width;\n    const h = ctx.canvas.height;\n\n    // 1) clear & paint background\n    ctx.clearRect(0, 0, w, h);\n    ctx.fillStyle = backgroundColor;\n    ctx.fillRect(0, 0, w, h);\n\n    // 2) draw each shape, offset by offsetX/offsetY\n    shapesRef.current.forEach(s => {\n      const lc = s.lineColor || lineColor;\n      const fc = s.fillColor || fillColor;\n      const sw = s.strokeWidth || strokeWidth;\n      ctx.save();\n      ctx.strokeStyle = lc;\n      ctx.fillStyle = fc;\n      ctx.lineWidth = sw;\n      ctx.beginPath();\n      const x0 = s.x0 + offsetX;\n      const y0 = s.y0 + offsetY;\n      const x1 = s.x1 + offsetX;\n      const y1 = s.y1 + offsetY;\n      switch (s.tool) {\n        case \"square\":\n          // compute raw delta\n          const dx = s.x1 - s.x0;\n          const dy = s.y1 - s.y0;\n          let w, h;\n          if (s.isSquare) {\n            // lock into a square: choose the smaller side\n            const side = Math.min(Math.abs(dx), Math.abs(dy));\n            w = dx < 0 ? -side : side;\n            h = dy < 0 ? -side : side;\n          } else {\n            // free‐form rectangle\n            w = dx;\n            h = dy;\n          }\n          ctx.fillRect(s.x0 + offsetX, s.y0 + offsetY, w, h);\n          ctx.strokeRect(s.x0 + offsetX, s.y0 + offsetY, w, h);\n          break;\n        case \"line\":\n          ctx.moveTo(x0, y0);\n          ctx.lineTo(x1, y1);\n          ctx.stroke();\n          break;\n        case \"circle\":\n          console.log(\"final circle draw; isCircle=\", s.isCircle);\n          if (s.isCircle) {\n            // perfect circle\n            const r = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n            ctx.arc(x0, y0, r, 0, 2 * Math.PI);\n          } else {\n            // free‐form ellipse\n            const rx = Math.abs(s.x1 - s.x0);\n            const ry = Math.abs(s.y1 - s.y0);\n            ctx.ellipse(x0, y0, rx, ry, 0, 0, 2 * Math.PI);\n          }\n          ctx.fill();\n          ctx.stroke();\n          break;\n        case \"triangle\":\n          ctx.moveTo(x0, y0);\n          ctx.lineTo(x1, y0);\n          ctx.lineTo((x0 + x1) / 2, y1);\n          ctx.closePath();\n          ctx.fill();\n          ctx.stroke();\n          break;\n        case \"polygon\":\n          const sides = 5;\n          const radius = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n          const step = 2 * Math.PI / sides;\n          for (let i = 0; i < sides; i++) {\n            const ang = i * step - Math.PI / 2;\n            const px = s.x0 + radius * Math.cos(ang) + offsetX;\n            const py = s.y0 + radius * Math.sin(ang) + offsetY;\n            i === 0 ? ctx.moveTo(px, py) : ctx.lineTo(px, py);\n          }\n          ctx.closePath();\n          ctx.fill();\n          ctx.stroke();\n          break;\n        case \"poly-line\":\n          ctx.beginPath();\n          const pts = s.points;\n          ctx.moveTo(pts[0].x + offsetX, pts[0].y + offsetY);\n          for (let i = 1; i < pts.length; i++) {\n            ctx.lineTo(pts[i].x + offsetX, pts[i].y + offsetY);\n          }\n          ctx.stroke();\n          break;\n        case \"curve\":\n          ctx.beginPath();\n          const pts2 = s.points;\n          ctx.moveTo(pts2[0].x + offsetX, pts2[0].y + offsetY);\n          for (let i = 1; i < pts2.length; i++) {\n            const prev = pts2[i - 1],\n              curr = pts2[i];\n            const mx = (prev.x + curr.x) / 2 + offsetX,\n              my = (prev.y + curr.y) / 2 + offsetY;\n            ctx.quadraticCurveTo(prev.x + offsetX, prev.y + offsetY, mx, my);\n          }\n\n          // finish at last point\n          const last = pts2[pts2.length - 1];\n          ctx.lineTo(last.x + offsetX, last.y + offsetY);\n          ctx.stroke();\n          ctx.restore();\n          break;\n      }\n\n      // 3) if shape is selected, draw red bounding box\n      if (s.selected) {\n        ctx.save();\n        ctx.strokeStyle = \"red\";\n        ctx.lineWidth = 1;\n\n        // we'll collect a bounding box and handle-points\n        let box = {\n          xMin: Infinity,\n          yMin: Infinity,\n          xMax: -Infinity,\n          yMax: -Infinity\n        };\n        const handles = [];\n\n        // 1) LINE: two endpoints\n        if (s.tool === \"line\") {\n          const p0 = {\n            x: s.x0 + offsetX,\n            y: s.y0 + offsetY\n          };\n          const p1 = {\n            x: s.x1 + offsetX,\n            y: s.y1 + offsetY\n          };\n          handles.push(p0, p1);\n          // bounding box exactly fits the line\n          box = {\n            xMin: p0.x,\n            yMin: p0.y,\n            xMax: p1.x,\n            yMax: p1.y\n          };\n\n          // 2) POLY-LINE or CURVE: use stored points\n        } else if (s.points) {\n          s.points.forEach(pt => {\n            const x = pt.x + offsetX,\n              y = pt.y + offsetY;\n            handles.push({\n              x,\n              y\n            });\n            box.xMin = Math.min(box.xMin, x);\n            box.yMin = Math.min(box.yMin, y);\n            box.xMax = Math.max(box.xMax, x);\n            box.yMax = Math.max(box.yMax, y);\n          });\n\n          // 3) POLYGON: reconstruct vertices exactly as in draw\n        } else if (s.tool === \"polygon\") {\n          const sides = 5;\n          const cx = s.x0 + offsetX,\n            cy = s.y0 + offsetY;\n          const radius = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n          for (let i = 0; i < sides; i++) {\n            const ang = i * (2 * Math.PI / sides) - Math.PI / 2;\n            const x = cx + radius * Math.cos(ang);\n            const y = cy + radius * Math.sin(ang);\n            handles.push({\n              x,\n              y\n            });\n            box.xMin = Math.min(box.xMin, x);\n            box.yMin = Math.min(box.yMin, y);\n            box.xMax = Math.max(box.xMax, x);\n            box.yMax = Math.max(box.yMax, y);\n          }\n\n          // 4) CIRCLE / ELLIPSE: compute based on center + radii\n        } else if (s.tool === \"circle\") {\n          const cx = s.x0 + offsetX,\n            cy = s.y0 + offsetY;\n          if (s.isCircle) {\n            const r = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n            box = {\n              xMin: cx - r,\n              yMin: cy - r,\n              xMax: cx + r,\n              yMax: cy + r\n            };\n            // handles at cardinal points\n            handles.push({\n              x: cx - r,\n              y: cy\n            }, {\n              x: cx + r,\n              y: cy\n            }, {\n              x: cx,\n              y: cy - r\n            }, {\n              x: cx,\n              y: cy + r\n            });\n          } else {\n            const rx = Math.abs(s.x1 - s.x0),\n              ry = Math.abs(s.y1 - s.y0);\n            box = {\n              xMin: cx - rx,\n              yMin: cy - ry,\n              xMax: cx + rx,\n              yMax: cy + ry\n            };\n            handles.push({\n              x: cx - rx,\n              y: cy - ry\n            }, {\n              x: cx + rx,\n              y: cy - ry\n            }, {\n              x: cx - rx,\n              y: cy + ry\n            }, {\n              x: cx + rx,\n              y: cy + ry\n            });\n          }\n\n          // 5) DEFAULT (rect/square): use x0,y0,x1,y1\n        } else {\n          const x0 = s.x0 + offsetX,\n            y0 = s.y0 + offsetY;\n          const x1 = s.x1 + offsetX,\n            y1 = s.y1 + offsetY;\n          box = {\n            xMin: Math.min(x0, x1),\n            yMin: Math.min(y0, y1),\n            xMax: Math.max(x0, x1),\n            yMax: Math.max(y0, y1)\n          };\n          // corner handles\n          handles.push({\n            x: box.xMin,\n            y: box.yMin\n          }, {\n            x: box.xMax,\n            y: box.yMin\n          }, {\n            x: box.xMin,\n            y: box.yMax\n          }, {\n            x: box.xMax,\n            y: box.yMax\n          });\n        }\n\n        // draw the bounding box (except for lines—lines just get their own stroke)\n        if (s.tool !== \"line\") {\n          ctx.strokeRect(box.xMin, box.yMin, box.xMax - box.xMin, box.yMax - box.yMin);\n        } else {\n          // stroke the selected line itself\n          ctx.beginPath();\n          ctx.moveTo(handles[0].x, handles[0].y);\n          ctx.lineTo(handles[1].x, handles[1].y);\n          ctx.stroke();\n        }\n\n        // draw handle circles\n        const R = 5;\n        handles.forEach(pt => {\n          ctx.beginPath();\n          ctx.arc(pt.x, pt.y, R, 0, 2 * Math.PI);\n          ctx.fillStyle = \"white\";\n          ctx.fill();\n          ctx.stroke();\n        });\n        ctx.restore();\n      }\n      ctx.restore();\n    });\n  }\n\n  // 4) Drawing & selection logic\n  useEffect(() => {\n    const c2 = c2Ref.current;\n    const ctx2 = c2.getContext(\"2d\");\n    const getPos = e => {\n      const r = c2.getBoundingClientRect();\n      return {\n        x: e.clientX - r.left,\n        y: e.clientY - r.top\n      };\n    };\n    const down = e => {\n      if (activeTool === \"cursor\") {\n        const pos = getPos(e);\n        const ctx1 = c1Ref.current.getContext(\"2d\");\n\n        // clear previous selection\n        shapesRef.current.forEach(s => s.selected = false);\n\n        // walk shapes in reverse z-order\n        for (let i = shapesRef.current.length - 1; i >= 0; i--) {\n          const s = shapesRef.current[i];\n          const path = new Path2D();\n          switch (s.tool) {\n            case \"line\":\n              // stroked line hit-test\n              path.moveTo(s.x0, s.y0);\n              path.lineTo(s.x1, s.y1);\n              if (ctx1.isPointInStroke(path, pos.x, pos.y)) {\n                s.selected = true;\n              }\n              break;\n            case \"poly-line\":\n            case \"curve\":\n              // stroked multi-segment hit-test\n              const pts = s.points;\n              path.moveTo(pts[0].x, pts[0].y);\n              for (let j = 1; j < pts.length; j++) {\n                path.lineTo(pts[j].x, pts[j].y);\n              }\n              if (ctx1.isPointInStroke(path, pos.x, pos.y)) {\n                s.selected = true;\n              }\n              break;\n            case \"square\":\n            case \"rectangle\":\n            case \"triangle\":\n              // filled rectangle\n              const rx = Math.min(s.x0, s.x1),\n                ry = Math.min(s.y0, s.y1),\n                rw = Math.abs(s.x1 - s.x0),\n                rh = Math.abs(s.y1 - s.y0);\n              path.rect(rx, ry, rw, rh);\n              if (ctx1.isPointInPath(path, pos.x, pos.y)) {\n                s.selected = true;\n              }\n              break;\n            case \"circle\":\n              // filled circle or ellipse\n              const cx = s.x0,\n                cy = s.y0;\n              if (s.isCircle) {\n                const r = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n                path.arc(cx, cy, r, 0, 2 * Math.PI);\n              } else {\n                const rx2 = Math.abs(s.x1 - s.x0),\n                  ry2 = Math.abs(s.y1 - s.y0);\n                path.ellipse(cx, cy, rx2, ry2, 0, 0, 2 * Math.PI);\n              }\n              if (ctx1.isPointInPath(path, pos.x, pos.y)) {\n                s.selected = true;\n              }\n              break;\n            case \"polygon\":\n              // filled n-gon\n              const sides = 5;\n              const rad = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n              const pcx = s.x0,\n                pcy = s.y0;\n              for (let k = 0; k < sides; k++) {\n                const ang = k * (2 * Math.PI / sides) - Math.PI / 2;\n                const px = pcx + rad * Math.cos(ang);\n                const py = pcy + rad * Math.sin(ang);\n                k === 0 ? path.moveTo(px, py) : path.lineTo(px, py);\n              }\n              path.closePath();\n              if (ctx1.isPointInPath(path, pos.x, pos.y)) {\n                s.selected = true;\n              }\n              break;\n          }\n          if (s.selected) {\n            redrawAll();\n            return; // stop on topmost hit\n          }\n        }\n\n        // no hit → redraw to clear any handles\n        redrawAll();\n        return;\n      }\n      if (activeTool === \"poly-line\") {\n        polyRef.current.push(getPos(e));\n        setIsDrawing(true);\n        return;\n      }\n      if (activeTool === \"curve\") {\n        // add a new control-point\n        curveRef.current.push(getPos(e));\n        setIsDrawing(true);\n        return;\n      }\n      if (![\"square\", \"line\", \"circle\", \"triangle\", \"polygon\"].includes(activeTool)) return;\n      setStartPos(getPos(e));\n      setIsDrawing(true);\n    };\n    const move = e => {\n      const pos = getPos(e);\n      // — Poly-line preview (draw all saved verts + the rubber-band) —\n      if (activeTool === \"poly-line\" && polyRef.current.length) {\n        ctx2.clearRect(0, 0, c2.width, c2.height);\n        ctx2.strokeStyle = lineColor;\n        ctx2.lineWidth = strokeWidth;\n        ctx2.beginPath();\n\n        // 1) move to first vertex\n        ctx2.moveTo(polyRef.current[0].x, polyRef.current[0].y);\n\n        // 2) draw each existing segment\n        for (let i = 1; i < polyRef.current.length; i++) {\n          const pt = polyRef.current[i];\n          ctx2.lineTo(pt.x, pt.y);\n        }\n\n        // 3) rubber-band from last vertex to cursor\n        ctx2.lineTo(pos.x, pos.y);\n        ctx2.stroke();\n        return;\n      }\n      if (activeTool === \"curve\" && curveRef.current.length) {\n        ctx2.clearRect(0, 0, c2.width, c2.height);\n        ctx2.strokeStyle = lineColor;\n        ctx2.lineWidth = strokeWidth;\n        ctx2.beginPath();\n\n        // start at first point\n        const pts = curveRef.current;\n        ctx2.moveTo(pts[0].x, pts[0].y);\n\n        // for each segment, do quadratic through midpoint\n        for (let i = 1; i < pts.length; i++) {\n          const prev = pts[i - 1],\n            curr = pts[i];\n          const mx = (prev.x + curr.x) / 2,\n            my = (prev.y + curr.y) / 2;\n          ctx2.quadraticCurveTo(prev.x, prev.y, mx, my);\n        }\n\n        // final “rubber band” from last control-point to cursor\n        const last = pts[pts.length - 1];\n        const mx2 = (last.x + pos.x) / 2,\n          my2 = (last.y + pos.y) / 2;\n        ctx2.quadraticCurveTo(last.x, last.y, mx2, my2);\n        ctx2.lineTo(pos.x, pos.y);\n        ctx2.stroke();\n        return;\n      }\n      if (!isDrawing) return;\n      const {\n        x,\n        y\n      } = getPos(e);\n      const dx = x - startPos.x,\n        dy = y - startPos.y;\n      ctx2.clearRect(0, 0, c2.width, c2.height);\n      ctx2.strokeStyle = lineColor;\n      ctx2.lineWidth = strokeWidth;\n      ctx2.beginPath();\n      switch (activeTool) {\n        case \"square\":\n          const isSquare = e.shiftKey;\n          if (isSquare) {\n            const side = Math.min(Math.abs(dx), Math.abs(dy));\n            const w = dx < 0 ? -side : side;\n            const h = dy < 0 ? -side : side;\n            ctx2.strokeRect(startPos.x, startPos.y, w, h);\n          } else {\n            ctx2.strokeRect(startPos.x, startPos.y, dx, dy);\n          }\n          break;\n        case \"line\":\n          ctx2.moveTo(startPos.x, startPos.y);\n          ctx2.lineTo(x, y);\n          ctx2.stroke();\n          break;\n        case \"circle\":\n          const isCircle = e.shiftKey;\n          if (isCircle) {\n            // perfect circle\n            const r = Math.min(Math.abs(dx), Math.abs(dy));\n            ctx2.ellipse(startPos.x, startPos.y, r, r, 0, 0, 2 * Math.PI);\n          } else {\n            // free‐form ellipse\n            ctx2.ellipse(startPos.x, startPos.y, Math.abs(dx), Math.abs(dy), 0, 0, 2 * Math.PI);\n          }\n          ctx2.stroke();\n          break;\n        case \"triangle\":\n          ctx2.moveTo(startPos.x, startPos.y);\n          ctx2.lineTo(startPos.x + dx, startPos.y);\n          ctx2.lineTo(startPos.x + dx / 2, startPos.y + dy);\n          ctx2.closePath();\n          ctx2.stroke();\n          break;\n        case \"polygon\":\n          const sides2 = 5,\n            rad2 = Math.hypot(dx, dy),\n            step2 = 2 * Math.PI / sides2;\n          for (let i = 0; i < sides2; i++) {\n            const ang = i * step2 - Math.PI / 2,\n              px = startPos.x + rad2 * Math.cos(ang),\n              py = startPos.y + rad2 * Math.sin(ang);\n            i === 0 ? ctx2.moveTo(px, py) : ctx2.lineTo(px, py);\n          }\n          ctx2.closePath();\n          ctx2.stroke();\n          break;\n      }\n    };\n    const up = e => {\n      if (activeTool === \"poly-line\" || activeTool === \"curve\") return;\n      if (!isDrawing) return;\n      const {\n        x,\n        y\n      } = getPos(e);\n      const isCircle = activeTool === \"circle\" && e.shiftKey;\n      const isSquare = activeTool === \"square\" && e.shiftKey;\n      shapesRef.current.push({\n        tool: activeTool,\n        x0: startPos.x,\n        y0: startPos.y,\n        x1: x,\n        y1: y,\n        lineColor,\n        fillColor,\n        strokeWidth,\n        isCircle,\n        isSquare,\n        selected: false\n      });\n      redrawAll();\n      ctx2.clearRect(0, 0, c2.width, c2.height);\n      setIsDrawing(false);\n    };\n    const finishPoly = e => {\n      if (activeTool !== \"poly-line\" || polyRef.current.length < 2) return;\n      shapesRef.current.push({\n        tool: \"poly-line\",\n        points: polyRef.current.slice(),\n        lineColor,\n        fillColor,\n        strokeWidth,\n        selected: false\n      });\n      redrawAll();\n      ctx2.clearRect(0, 0, c2.width, c2.height);\n      polyRef.current = [];\n    };\n    const finishCurve = e => {\n      if (activeTool !== \"curve\" || curveRef.current.length < 2) return;\n      shapesRef.current.push({\n        tool: \"curve\",\n        points: curveRef.current.slice(),\n        lineColor,\n        fillColor,\n        strokeWidth,\n        selected: false\n      });\n      redrawAll();\n      ctx2.clearRect(0, 0, c2.width, c2.height);\n      curveRef.current = [];\n      setIsDrawing(false);\n    };\n    const onKeyDown = e => {\n      if (e.ctrlKey && e.key === \"z\" && shapesRef.current.length) {\n        redoRef.current.push(shapesRef.current.pop());\n        redrawAll();\n      } else if (e.ctrlKey && e.shiftKey && e.key.toLowerCase() === \"z\" && redoRef.current.length) {\n        shapesRef.current.push(redoRef.current.pop());\n        redrawAll();\n      }\n    };\n    c2.addEventListener(\"mousedown\", down);\n    c2.addEventListener(\"mousemove\", move);\n    c2.addEventListener(\"mouseup\", up);\n    c2.addEventListener(\"dblclick\", finishPoly);\n    c2.addEventListener(\"dblclick\", finishCurve);\n    window.addEventListener(\"keydown\", onKeyDown);\n    return () => {\n      c2.removeEventListener(\"mousedown\", down);\n      c2.removeEventListener(\"mousemove\", move);\n      c2.removeEventListener(\"mouseup\", up);\n      c2.removeEventListener(\"dblclick\", finishPoly);\n      c2.removeEventListener(\"dblclick\", finishCurve);\n      window.removeEventListener(\"keydown\", onKeyDown);\n    };\n  }, [activeTool, isDrawing, startPos, lineColor, fillColor, strokeWidth]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    className: \"canvas-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: c1Ref\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 758,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: c2Ref,\n      style: {\n        backgroundColor: \"transparent\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 759,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 757,\n    columnNumber: 9\n  }, this);\n}, \"+nn/Vcab+Wj4WPjYuwIgTdd8vWo=\")), \"+nn/Vcab+Wj4WPjYuwIgTdd8vWo=\");\n_c2 = Canvas;\nexport default Canvas;\nvar _c, _c2;\n$RefreshReg$(_c, \"Canvas$forwardRef\");\n$RefreshReg$(_c2, \"Canvas\");","map":{"version":3,"names":["React","forwardRef","useImperativeHandle","useRef","useEffect","useState","jsPDF","jsxDEV","_jsxDEV","Canvas","_s","_c","activeTool","lineColor","fillColor","strokeWidth","ref","containerRef","c1Ref","c2Ref","shapesRef","redoRef","polyRef","curveRef","isDrawing","setIsDrawing","startPos","setStartPos","x","y","exportShapes","data","JSON","stringify","current","blob","Blob","type","url","URL","createObjectURL","a","document","createElement","href","download","click","revokeObjectURL","downloadJPEG","shapes","pad","minX","Infinity","minY","maxX","maxY","forEach","s","tool","r","Math","hypot","x1","x0","y1","y0","min","max","width","height","sw","sh","tmp","redrawAll","dataURL","toDataURL","link","downloadPDF","orientation","pdf","unit","format","pageW","internal","pageSize","getWidth","pageH","getHeight","scale","yOffset","sliceH","slice","getContext","drawImage","imgData","imgW","imgH","xPos","addImage","addPage","save","loadShapes","arr","map","selected","getShapeCount","length","clearShapes","resize","getBoundingClientRect","window","addEventListener","removeEventListener","context","offsetX","offsetY","backgroundColor","c","ctx","w","canvas","h","clearRect","fillStyle","fillRect","lc","fc","strokeStyle","lineWidth","beginPath","dx","dy","isSquare","side","abs","strokeRect","moveTo","lineTo","stroke","console","log","isCircle","arc","PI","rx","ry","ellipse","fill","closePath","sides","radius","step","i","ang","px","cos","py","sin","pts","points","pts2","prev","curr","mx","my","quadraticCurveTo","last","restore","box","xMin","yMin","xMax","yMax","handles","p0","p1","push","pt","cx","cy","R","c2","ctx2","getPos","e","clientX","left","clientY","top","down","pos","ctx1","path","Path2D","isPointInStroke","j","rw","rh","rect","isPointInPath","rx2","ry2","rad","pcx","pcy","k","includes","move","mx2","my2","shiftKey","sides2","rad2","step2","up","finishPoly","finishCurve","onKeyDown","ctrlKey","key","pop","toLowerCase","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","_c2","$RefreshReg$"],"sources":["/home/nightsquid/Desktop/GUI II/studyspace/src/components/Canvas.js"],"sourcesContent":["// src/components/Canvas.js\nimport React, {\n    forwardRef,\n    useImperativeHandle,\n    useRef,\n    useEffect,\n    useState\n} from \"react\";\nimport { jsPDF } from \"jspdf\";\nimport \"../css/canvas.css\";\n\nconst Canvas = forwardRef(({ activeTool, lineColor, fillColor, strokeWidth }, ref) => {\n    const containerRef = useRef(null);\n    const c1Ref = useRef(null);\n    const c2Ref = useRef(null);\n\n    const shapesRef = useRef([]);\n    const redoRef = useRef([]);\n\n    const polyRef = useRef([]);\n    const curveRef = useRef([]);\n\n    const [isDrawing, setIsDrawing] = useState(false);\n    const [startPos, setStartPos] = useState({ x: 0, y: 0 });\n\n    // 1) Expose export/load/download handlers\n    useImperativeHandle(ref, () => ({\n        exportShapes: () => {\n            const data = JSON.stringify(shapesRef.current, null, 2);\n            const blob = new Blob([data], { type: \"application/json\" });\n            const url = URL.createObjectURL(blob);\n            const a = document.createElement(\"a\");\n            a.href = url; a.download = \"shapes.json\"; a.click();\n            URL.revokeObjectURL(url);\n        },\n        downloadJPEG: () => {\n            const shapes = shapesRef.current;\n            const pad = 20;\n\n            // 1) Compute the tight bounds for all shapes (including circles/polygons)\n            let minX = Infinity, minY = Infinity;\n            let maxX = -Infinity, maxY = -Infinity;\n\n            shapes.forEach(s => {\n                if (s.tool === \"circle\" || s.tool === \"polygon\") {\n                    const r = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n                    minX = Math.min(minX, s.x0 - r);\n                    maxX = Math.max(maxX, s.x0 + r);\n                    minY = Math.min(minY, s.y0 - r);\n                    maxY = Math.max(maxY, s.y0 + r);\n                } else {\n                    minX = Math.min(minX, s.x0, s.x1);\n                    maxX = Math.max(maxX, s.x0, s.x1);\n                    minY = Math.min(minY, s.y0, s.y1);\n                    maxY = Math.max(maxY, s.y0, s.y1);\n                }\n            });\n\n            // If no shapes, default to entire canvas\n            if (minX === Infinity) {\n                minX = 0; minY = 0;\n                maxX = c1Ref.current.width;\n                maxY = c1Ref.current.height;\n            }\n\n            // 2) Add padding and clamp to canvas size\n            minX = minX - pad;\n            minY = minY - pad;\n            maxX = maxX + pad;\n            maxY = maxY + pad;\n\n            const sw = maxX - minX;\n            const sh = maxY - minY;\n\n            // 3) Create offscreen canvas exactly sw×sh\n            const tmp = document.createElement(\"canvas\");\n            tmp.width = sw;\n            tmp.height = sh;\n\n            // 4) Replay your redrawAll INTO that offscreen canvas,\n            //    offsetting every shape by (-minX, -minY)\n            redrawAll({ current: tmp }, -minX, -minY, \"#ffffff\");\n\n            // 5) Export the offscreen canvas as JPEG\n            const dataURL = tmp.toDataURL(\"image/jpeg\", 1.0);\n            const link = document.createElement(\"a\");\n            link.href = dataURL;\n            link.download = \"shapes.jpg\";\n            link.click();\n        },\n        downloadPDF: () => {\n            const shapes = shapesRef.current;\n            const pad = 20;\n\n            // 1) compute tight bounds (incl. full circles/polygons)\n            let minX = Infinity, minY = Infinity;\n            let maxX = -Infinity, maxY = -Infinity;\n\n            shapes.forEach(s => {\n                if (s.tool === \"circle\" || s.tool === \"polygon\") {\n                    const r = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n                    minX = Math.min(minX, s.x0 - r);\n                    maxX = Math.max(maxX, s.x0 + r);\n                    minY = Math.min(minY, s.y0 - r);\n                    maxY = Math.max(maxY, s.y0 + r);\n                } else {\n                    minX = Math.min(minX, s.x0, s.x1);\n                    maxX = Math.max(maxX, s.x0, s.x1);\n                    minY = Math.min(minY, s.y0, s.y1);\n                    maxY = Math.max(maxY, s.y0, s.y1);\n                }\n            });\n\n            // fallback to full canvas if no shapes\n            if (minX === Infinity) {\n                minX = 0; minY = 0;\n                maxX = c1Ref.current.width;\n                maxY = c1Ref.current.height;\n            }\n\n            // 2) apply padding (no clamping)\n            minX -= pad;\n            minY -= pad;\n            maxX += pad;\n            maxY += pad;\n\n            const sw = maxX - minX;\n            const sh = maxY - minY;\n\n            // 3) offscreen canvas exactly sw×sh\n            const tmp = document.createElement(\"canvas\");\n            tmp.width = sw;\n            tmp.height = sh;\n\n            // replay draw\n            redrawAll({ current: tmp }, -minX, -minY, \"#ffffff\");\n\n            // 4) setup jsPDF\n            const orientation = sw > sh ? \"landscape\" : \"portrait\";\n            const pdf = new jsPDF({ orientation, unit: \"px\", format: \"a4\" });\n            const pageW = pdf.internal.pageSize.getWidth();\n            const pageH = pdf.internal.pageSize.getHeight();\n\n            // 5) compute scale to fit\n            const scale = Math.min(pageW / sw, pageH / sh);\n\n            // 6) split vertically into pages if needed\n            let yOffset = 0;\n            while (yOffset < sh) {\n                // slice height in source pixels\n                const sliceH = Math.min(sh - yOffset, pageH / scale);\n\n                // draw slice to a tiny canvas\n                const slice = document.createElement(\"canvas\");\n                slice.width = sw;\n                slice.height = sliceH;\n                slice.getContext(\"2d\").drawImage(\n                    tmp,\n                    0, yOffset, sw, sliceH,\n                    0, 0, sw, sliceH\n                );\n\n                // add slice image to PDF\n                const imgData = slice.toDataURL(\"image/jpeg\", 1.0);\n                const imgW = sw * scale, imgH = sliceH * scale;\n                const xPos = (pageW - imgW) / 2;\n                pdf.addImage(imgData, \"JPEG\", xPos, 0, imgW, imgH);\n\n                yOffset += sliceH;\n                if (yOffset < sh) pdf.addPage();\n            }\n\n            // 7) save\n            pdf.save(\"shapes.pdf\");\n        },\n        loadShapes: (arr) => {\n            shapesRef.current = arr.map(s => ({ ...s, selected: false }));\n            redrawAll();\n        },\n\n        getShapeCount: () => shapesRef.current.length,\n        clearShapes: () => {\n            shapesRef.current = [];\n            redrawAll();\n        }\n\n    }));\n\n    // 2) Resize loop: keep canvas internal size in sync with CSS size\n    useEffect(() => {\n        const resize = () => {\n            const { width, height } = containerRef.current.getBoundingClientRect();\n            c1Ref.current.width = width;\n            c1Ref.current.height = height;\n            c2Ref.current.width = width;\n            c2Ref.current.height = height;\n            redrawAll();\n        };\n        resize();\n        window.addEventListener(\"resize\", resize);\n        return () => window.removeEventListener(\"resize\", resize);\n    }, []);\n\n    // 3) Redraw everything (with baked-in background)\n    function redrawAll(context = c1Ref, offsetX = 0, offsetY = 0, backgroundColor = \"#979797\") {\n        const c = context.current;\n        const ctx = c.getContext(\"2d\")\n        const w = ctx.canvas.width;\n        const h = ctx.canvas.height;\n\n        // 1) clear & paint background\n        ctx.clearRect(0, 0, w, h);\n        ctx.fillStyle = backgroundColor;\n        ctx.fillRect(0, 0, w, h);\n\n        // 2) draw each shape, offset by offsetX/offsetY\n        shapesRef.current.forEach(s => {\n            const lc = s.lineColor || lineColor;\n            const fc = s.fillColor || fillColor;\n            const sw = s.strokeWidth || strokeWidth;\n            ctx.save();\n            ctx.strokeStyle = lc;\n            ctx.fillStyle = fc;\n            ctx.lineWidth = sw;\n            ctx.beginPath();\n\n            const x0 = s.x0 + offsetX;\n            const y0 = s.y0 + offsetY;\n            const x1 = s.x1 + offsetX;\n            const y1 = s.y1 + offsetY;\n\n            switch (s.tool) {\n                case \"square\":\n                    // compute raw delta\n                    const dx = s.x1 - s.x0;\n                    const dy = s.y1 - s.y0;\n\n                    let w, h;\n                    if (s.isSquare) {\n                        // lock into a square: choose the smaller side\n                        const side = Math.min(Math.abs(dx), Math.abs(dy));\n                        w = dx < 0 ? -side : side;\n                        h = dy < 0 ? -side : side;\n                    } else {\n                        // free‐form rectangle\n                        w = dx;\n                        h = dy;\n                    }\n\n                    ctx.fillRect(s.x0 + offsetX, s.y0 + offsetY, w, h);\n                    ctx.strokeRect(s.x0 + offsetX, s.y0 + offsetY, w, h);\n                    break;\n                case \"line\":\n                    ctx.moveTo(x0, y0);\n                    ctx.lineTo(x1, y1);\n                    ctx.stroke();\n                    break;\n\n                case \"circle\":\n                    console.log(\"final circle draw; isCircle=\", s.isCircle);\n                    if (s.isCircle) {\n                        // perfect circle\n                        const r = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n                        ctx.arc(x0, y0, r, 0, 2 * Math.PI);\n                    } else {\n                        // free‐form ellipse\n                        const rx = Math.abs(s.x1 - s.x0);\n                        const ry = Math.abs(s.y1 - s.y0);\n                        ctx.ellipse(x0, y0, rx, ry, 0, 0, 2 * Math.PI);\n                    }\n                    ctx.fill();\n                    ctx.stroke();\n                    break;\n\n                case \"triangle\":\n                    ctx.moveTo(x0, y0);\n                    ctx.lineTo(x1, y0);\n                    ctx.lineTo((x0 + x1) / 2, y1);\n                    ctx.closePath();\n                    ctx.fill();\n                    ctx.stroke();\n                    break;\n\n                case \"polygon\":\n                    const sides = 5;\n                    const radius = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n                    const step = (2 * Math.PI) / sides;\n                    for (let i = 0; i < sides; i++) {\n                        const ang = i * step - Math.PI / 2;\n                        const px = s.x0 + radius * Math.cos(ang) + offsetX;\n                        const py = s.y0 + radius * Math.sin(ang) + offsetY;\n                        i === 0 ? ctx.moveTo(px, py) : ctx.lineTo(px, py);\n                    }\n                    ctx.closePath();\n                    ctx.fill();\n                    ctx.stroke();\n                    break;\n                case \"poly-line\":\n                    ctx.beginPath();\n                    const pts = s.points;\n                    ctx.moveTo(pts[0].x + offsetX, pts[0].y + offsetY);\n                    for (let i = 1; i < pts.length; i++) {\n                        ctx.lineTo(pts[i].x + offsetX, pts[i].y + offsetY);\n                    }\n                    ctx.stroke();\n                    break;\n                case \"curve\":\n                    ctx.beginPath();\n\n                    const pts2 = s.points;\n                    ctx.moveTo(pts2[0].x + offsetX, pts2[0].y + offsetY);\n\n                    for (let i = 1; i < pts2.length; i++) {\n                        const prev = pts2[i - 1], curr = pts2[i];\n                        const mx = (prev.x + curr.x) / 2 + offsetX,\n                            my = (prev.y + curr.y) / 2 + offsetY;\n                        ctx.quadraticCurveTo(\n                            prev.x + offsetX, prev.y + offsetY,\n                            mx, my\n                        );\n                    }\n\n                    // finish at last point\n                    const last = pts2[pts2.length - 1];\n                    ctx.lineTo(last.x + offsetX, last.y + offsetY);\n\n                    ctx.stroke();\n                    ctx.restore();\n                    break;\n            }\n\n            // 3) if shape is selected, draw red bounding box\n            if (s.selected) {\n                ctx.save();\n                ctx.strokeStyle = \"red\";\n                ctx.lineWidth = 1;\n\n                // we'll collect a bounding box and handle-points\n                let box = { xMin: Infinity, yMin: Infinity, xMax: -Infinity, yMax: -Infinity };\n                const handles = [];\n\n                // 1) LINE: two endpoints\n                if (s.tool === \"line\") {\n                    const p0 = { x: s.x0 + offsetX, y: s.y0 + offsetY };\n                    const p1 = { x: s.x1 + offsetX, y: s.y1 + offsetY };\n                    handles.push(p0, p1);\n                    // bounding box exactly fits the line\n                    box = { xMin: p0.x, yMin: p0.y, xMax: p1.x, yMax: p1.y };\n\n                    // 2) POLY-LINE or CURVE: use stored points\n                } else if (s.points) {\n                    s.points.forEach(pt => {\n                        const x = pt.x + offsetX, y = pt.y + offsetY;\n                        handles.push({ x, y });\n                        box.xMin = Math.min(box.xMin, x);\n                        box.yMin = Math.min(box.yMin, y);\n                        box.xMax = Math.max(box.xMax, x);\n                        box.yMax = Math.max(box.yMax, y);\n                    });\n\n                    // 3) POLYGON: reconstruct vertices exactly as in draw\n                } else if (s.tool === \"polygon\") {\n                    const sides = 5;\n                    const cx = s.x0 + offsetX, cy = s.y0 + offsetY;\n                    const radius = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n                    for (let i = 0; i < sides; i++) {\n                        const ang = i * (2 * Math.PI / sides) - Math.PI / 2;\n                        const x = cx + radius * Math.cos(ang);\n                        const y = cy + radius * Math.sin(ang);\n                        handles.push({ x, y });\n                        box.xMin = Math.min(box.xMin, x);\n                        box.yMin = Math.min(box.yMin, y);\n                        box.xMax = Math.max(box.xMax, x);\n                        box.yMax = Math.max(box.yMax, y);\n                    }\n\n                    // 4) CIRCLE / ELLIPSE: compute based on center + radii\n                } else if (s.tool === \"circle\") {\n                    const cx = s.x0 + offsetX, cy = s.y0 + offsetY;\n                    if (s.isCircle) {\n                        const r = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n                        box = { xMin: cx - r, yMin: cy - r, xMax: cx + r, yMax: cy + r };\n                        // handles at cardinal points\n                        handles.push(\n                            { x: cx - r, y: cy },\n                            { x: cx + r, y: cy },\n                            { x: cx, y: cy - r },\n                            { x: cx, y: cy + r }\n                        );\n                    } else {\n                        const rx = Math.abs(s.x1 - s.x0), ry = Math.abs(s.y1 - s.y0);\n                        box = { xMin: cx - rx, yMin: cy - ry, xMax: cx + rx, yMax: cy + ry };\n                        handles.push(\n                            { x: cx - rx, y: cy - ry },\n                            { x: cx + rx, y: cy - ry },\n                            { x: cx - rx, y: cy + ry },\n                            { x: cx + rx, y: cy + ry }\n                        );\n                    }\n\n                    // 5) DEFAULT (rect/square): use x0,y0,x1,y1\n                } else {\n                    const x0 = s.x0 + offsetX, y0 = s.y0 + offsetY;\n                    const x1 = s.x1 + offsetX, y1 = s.y1 + offsetY;\n                    box = {\n                        xMin: Math.min(x0, x1), yMin: Math.min(y0, y1),\n                        xMax: Math.max(x0, x1), yMax: Math.max(y0, y1)\n                    };\n                    // corner handles\n                    handles.push(\n                        { x: box.xMin, y: box.yMin },\n                        { x: box.xMax, y: box.yMin },\n                        { x: box.xMin, y: box.yMax },\n                        { x: box.xMax, y: box.yMax }\n                    );\n                }\n\n                // draw the bounding box (except for lines—lines just get their own stroke)\n                if (s.tool !== \"line\") {\n                    ctx.strokeRect(\n                        box.xMin, box.yMin,\n                        box.xMax - box.xMin,\n                        box.yMax - box.yMin\n                    );\n                } else {\n                    // stroke the selected line itself\n                    ctx.beginPath();\n                    ctx.moveTo(handles[0].x, handles[0].y);\n                    ctx.lineTo(handles[1].x, handles[1].y);\n                    ctx.stroke();\n                }\n\n                // draw handle circles\n                const R = 5;\n                handles.forEach(pt => {\n                    ctx.beginPath();\n                    ctx.arc(pt.x, pt.y, R, 0, 2 * Math.PI);\n                    ctx.fillStyle = \"white\";\n                    ctx.fill();\n                    ctx.stroke();\n                });\n\n                ctx.restore();\n            }\n\n            ctx.restore();\n        });\n    }\n\n    // 4) Drawing & selection logic\n    useEffect(() => {\n        const c2 = c2Ref.current;\n        const ctx2 = c2.getContext(\"2d\");\n\n        const getPos = e => {\n            const r = c2.getBoundingClientRect();\n            return { x: e.clientX - r.left, y: e.clientY - r.top };\n        };\n\n        const down = e => {\n            if (activeTool === \"cursor\") {\n                const pos = getPos(e);\n                const ctx1 = c1Ref.current.getContext(\"2d\");\n\n                // clear previous selection\n                shapesRef.current.forEach(s => s.selected = false);\n\n                // walk shapes in reverse z-order\n                for (let i = shapesRef.current.length - 1; i >= 0; i--) {\n                    const s = shapesRef.current[i];\n                    const path = new Path2D();\n\n                    switch (s.tool) {\n                        case \"line\":\n                            // stroked line hit-test\n                            path.moveTo(s.x0, s.y0);\n                            path.lineTo(s.x1, s.y1);\n                            if (ctx1.isPointInStroke(path, pos.x, pos.y)) {\n                                s.selected = true;\n                            }\n                            break;\n\n                        case \"poly-line\":\n                        case \"curve\":\n                            // stroked multi-segment hit-test\n                            const pts = s.points;\n                            path.moveTo(pts[0].x, pts[0].y);\n                            for (let j = 1; j < pts.length; j++) {\n                                path.lineTo(pts[j].x, pts[j].y);\n                            }\n                            if (ctx1.isPointInStroke(path, pos.x, pos.y)) {\n                                s.selected = true;\n                            }\n                            break;\n\n                        case \"square\":\n                        case \"rectangle\":\n                        case \"triangle\":\n                            // filled rectangle\n                            const rx = Math.min(s.x0, s.x1),\n                                ry = Math.min(s.y0, s.y1),\n                                rw = Math.abs(s.x1 - s.x0),\n                                rh = Math.abs(s.y1 - s.y0);\n                            path.rect(rx, ry, rw, rh);\n                            if (ctx1.isPointInPath(path, pos.x, pos.y)) {\n                                s.selected = true;\n                            }\n                            break;\n\n                        case \"circle\":\n                            // filled circle or ellipse\n                            const cx = s.x0, cy = s.y0;\n                            if (s.isCircle) {\n                                const r = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n                                path.arc(cx, cy, r, 0, 2 * Math.PI);\n                            } else {\n                                const rx2 = Math.abs(s.x1 - s.x0),\n                                    ry2 = Math.abs(s.y1 - s.y0);\n                                path.ellipse(cx, cy, rx2, ry2, 0, 0, 2 * Math.PI);\n                            }\n                            if (ctx1.isPointInPath(path, pos.x, pos.y)) {\n                                s.selected = true;\n                            }\n                            break;\n\n                        case \"polygon\":\n                            // filled n-gon\n                            const sides = 5;\n                            const rad = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n                            const pcx = s.x0, pcy = s.y0;\n                            for (let k = 0; k < sides; k++) {\n                                const ang = k * (2 * Math.PI / sides) - Math.PI / 2;\n                                const px = pcx + rad * Math.cos(ang);\n                                const py = pcy + rad * Math.sin(ang);\n                                k === 0 ? path.moveTo(px, py) : path.lineTo(px, py);\n                            }\n                            path.closePath();\n                            if (ctx1.isPointInPath(path, pos.x, pos.y)) {\n                                s.selected = true;\n                            }\n                            break;\n                    }\n\n                    if (s.selected) {\n                        redrawAll();\n                        return;   // stop on topmost hit\n                    }\n                }\n\n                // no hit → redraw to clear any handles\n                redrawAll();\n                return;\n            }\n\n            if (activeTool === \"poly-line\") {\n                polyRef.current.push(getPos(e));\n                setIsDrawing(true);\n                return;\n            }\n            if (activeTool === \"curve\") {\n                // add a new control-point\n                curveRef.current.push(getPos(e));\n                setIsDrawing(true);\n                return;\n            }\n            if (![\"square\", \"line\", \"circle\", \"triangle\", \"polygon\"].includes(activeTool)) return;\n            setStartPos(getPos(e));\n            setIsDrawing(true);\n        };\n\n        const move = e => {\n            const pos = getPos(e);\n            // — Poly-line preview (draw all saved verts + the rubber-band) —\n            if (activeTool === \"poly-line\" && polyRef.current.length) {\n                ctx2.clearRect(0, 0, c2.width, c2.height);\n                ctx2.strokeStyle = lineColor;\n                ctx2.lineWidth = strokeWidth;\n                ctx2.beginPath();\n\n                // 1) move to first vertex\n                ctx2.moveTo(polyRef.current[0].x, polyRef.current[0].y);\n\n                // 2) draw each existing segment\n                for (let i = 1; i < polyRef.current.length; i++) {\n                    const pt = polyRef.current[i];\n                    ctx2.lineTo(pt.x, pt.y);\n                }\n\n                // 3) rubber-band from last vertex to cursor\n                ctx2.lineTo(pos.x, pos.y);\n\n                ctx2.stroke();\n                return;\n            }\n\n            if (activeTool === \"curve\" && curveRef.current.length) {\n                ctx2.clearRect(0, 0, c2.width, c2.height);\n                ctx2.strokeStyle = lineColor;\n                ctx2.lineWidth = strokeWidth;\n                ctx2.beginPath();\n\n                // start at first point\n                const pts = curveRef.current;\n                ctx2.moveTo(pts[0].x, pts[0].y);\n\n                // for each segment, do quadratic through midpoint\n                for (let i = 1; i < pts.length; i++) {\n                    const prev = pts[i - 1], curr = pts[i];\n                    const mx = (prev.x + curr.x) / 2,\n                        my = (prev.y + curr.y) / 2;\n                    ctx2.quadraticCurveTo(prev.x, prev.y, mx, my);\n                }\n\n                // final “rubber band” from last control-point to cursor\n                const last = pts[pts.length - 1];\n                const mx2 = (last.x + pos.x) / 2,\n                    my2 = (last.y + pos.y) / 2;\n                ctx2.quadraticCurveTo(last.x, last.y, mx2, my2);\n                ctx2.lineTo(pos.x, pos.y);\n\n                ctx2.stroke();\n                return;\n            }\n\n\n            if (!isDrawing) return;\n\n            const { x, y } = getPos(e);\n            const dx = x - startPos.x, dy = y - startPos.y;\n            ctx2.clearRect(0, 0, c2.width, c2.height);\n            ctx2.strokeStyle = lineColor;\n            ctx2.lineWidth = strokeWidth;\n            ctx2.beginPath();\n            switch (activeTool) {\n                case \"square\":\n                    const isSquare = e.shiftKey;\n                    if (isSquare) {\n                        const side = Math.min(Math.abs(dx), Math.abs(dy));\n                        const w = dx < 0 ? -side : side;\n                        const h = dy < 0 ? -side : side;\n                        ctx2.strokeRect(startPos.x, startPos.y, w, h);\n                    } else { ctx2.strokeRect(startPos.x, startPos.y, dx, dy); }\n                    break;\n                case \"line\":\n                    ctx2.moveTo(startPos.x, startPos.y);\n                    ctx2.lineTo(x, y);\n                    ctx2.stroke();\n                    break;\n                case \"circle\":\n                    const isCircle = e.shiftKey;\n                    if (isCircle) {\n                        // perfect circle\n                        const r = Math.min(Math.abs(dx), Math.abs(dy));\n                        ctx2.ellipse(startPos.x, startPos.y, r, r, 0, 0, 2 * Math.PI);\n                    } else {\n                        // free‐form ellipse\n                        ctx2.ellipse(startPos.x, startPos.y, Math.abs(dx), Math.abs(dy), 0, 0, 2 * Math.PI);\n                    }\n                    ctx2.stroke()\n                    break;\n                case \"triangle\":\n                    ctx2.moveTo(startPos.x, startPos.y);\n                    ctx2.lineTo(startPos.x + dx, startPos.y);\n                    ctx2.lineTo(startPos.x + dx / 2, startPos.y + dy);\n                    ctx2.closePath();\n                    ctx2.stroke();\n                    break;\n                case \"polygon\":\n                    const sides2 = 5, rad2 = Math.hypot(dx, dy), step2 = 2 * Math.PI / sides2;\n                    for (let i = 0; i < sides2; i++) {\n                        const ang = i * step2 - Math.PI / 2,\n                            px = startPos.x + rad2 * Math.cos(ang),\n                            py = startPos.y + rad2 * Math.sin(ang);\n                        i === 0 ? ctx2.moveTo(px, py) : ctx2.lineTo(px, py);\n                    }\n                    ctx2.closePath();\n                    ctx2.stroke();\n                    break;\n            }\n\n        };\n\n        const up = e => {\n            if (activeTool === \"poly-line\" || activeTool === \"curve\") return;\n            if (!isDrawing) return;\n            const { x, y } = getPos(e);\n            const isCircle = activeTool === \"circle\" && e.shiftKey;\n            const isSquare = activeTool === \"square\" && e.shiftKey;\n            shapesRef.current.push({\n                tool: activeTool,\n                x0: startPos.x, y0: startPos.y,\n                x1: x, y1: y,\n                lineColor, fillColor, strokeWidth,\n                isCircle, isSquare,\n                selected: false\n            });\n            redrawAll();\n            ctx2.clearRect(0, 0, c2.width, c2.height);\n            setIsDrawing(false);\n        };\n\n        const finishPoly = e => {\n            if (activeTool !== \"poly-line\" || polyRef.current.length < 2) return;\n            shapesRef.current.push({\n                tool: \"poly-line\",\n                points: polyRef.current.slice(),\n                lineColor, fillColor, strokeWidth,\n                selected: false\n            });\n            redrawAll();\n            ctx2.clearRect(0, 0, c2.width, c2.height);\n            polyRef.current = [];\n        };\n\n        const finishCurve = e => {\n            if (activeTool !== \"curve\" || curveRef.current.length < 2) return;\n            shapesRef.current.push({\n                tool: \"curve\",\n                points: curveRef.current.slice(),\n                lineColor, fillColor, strokeWidth,\n                selected: false\n            });\n            redrawAll();\n            ctx2.clearRect(0, 0, c2.width, c2.height);\n            curveRef.current = [];\n            setIsDrawing(false);\n        };\n\n        const onKeyDown = e => {\n            if (e.ctrlKey && e.key === \"z\" && shapesRef.current.length) {\n                redoRef.current.push(shapesRef.current.pop());\n                redrawAll();\n            }\n            else if (e.ctrlKey && e.shiftKey && e.key.toLowerCase() === \"z\" && redoRef.current.length) {\n                shapesRef.current.push(redoRef.current.pop());\n                redrawAll();\n            }\n        };\n\n        c2.addEventListener(\"mousedown\", down);\n        c2.addEventListener(\"mousemove\", move);\n        c2.addEventListener(\"mouseup\", up);\n        c2.addEventListener(\"dblclick\", finishPoly);\n        c2.addEventListener(\"dblclick\", finishCurve);\n        window.addEventListener(\"keydown\", onKeyDown);\n        return () => {\n            c2.removeEventListener(\"mousedown\", down);\n            c2.removeEventListener(\"mousemove\", move);\n            c2.removeEventListener(\"mouseup\", up);\n            c2.removeEventListener(\"dblclick\", finishPoly);\n            c2.removeEventListener(\"dblclick\", finishCurve);\n            window.removeEventListener(\"keydown\", onKeyDown);\n        };\n    }, [activeTool, isDrawing, startPos, lineColor, fillColor, strokeWidth]);\n\n    return (\n        <div ref={containerRef} className=\"canvas-container\">\n            <canvas ref={c1Ref} />\n            <canvas ref={c2Ref} style={{ backgroundColor: \"transparent\" }} />\n        </div>\n    );\n});\n\nexport default Canvas;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}