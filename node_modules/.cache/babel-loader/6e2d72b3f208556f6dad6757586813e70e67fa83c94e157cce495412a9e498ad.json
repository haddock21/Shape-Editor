{"ast":null,"code":"var _jsxFileName = \"/home/nightsquid/Desktop/GUI II/studyspace/src/components/Canvas.js\",\n  _s = $RefreshSig$();\n// src/components/Canvas.js\nimport React, { forwardRef, useImperativeHandle, useRef, useEffect, useState } from \"react\";\nimport { jsPDF } from \"jspdf\";\nimport \"../css/canvas.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Canvas = /*#__PURE__*/_s(/*#__PURE__*/forwardRef(_c = _s(({\n  activeTool,\n  lineColor,\n  fillColor,\n  strokeWidth\n}, ref) => {\n  _s();\n  const containerRef = useRef(null);\n  const c1Ref = useRef(null);\n  const c2Ref = useRef(null);\n  const shapesRef = useRef([]);\n  const redoRef = useRef([]);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [startPos, setStartPos] = useState({\n    x: 0,\n    y: 0\n  });\n  const [enterDown, setEnterDown] = useState(false);\n\n  // Track Enter key for circle constraint\n  useEffect(() => {\n    const onKeyDown = e => {\n      if (e.key === \"Enter\") setEnterDown(true);\n    };\n    const onKeyUp = e => {\n      if (e.key === \"Enter\") setEnterDown(false);\n    };\n    window.addEventListener(\"keydown\", onKeyDown);\n    window.addEventListener(\"keyup\", onKeyUp);\n    return () => {\n      window.removeEventListener(\"keydown\", onKeyDown);\n      window.removeEventListener(\"keyup\", onKeyUp);\n    };\n  }, []);\n  useImperativeHandle(ref, () => ({\n    exportShapes: () => {\n      const data = JSON.stringify(shapesRef.current, null, 2);\n      const blob = new Blob([data], {\n        type: \"application/json\"\n      });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement(\"a\");\n      a.href = url;\n      a.download = \"shapes.json\";\n      a.click();\n      URL.revokeObjectURL(url);\n    },\n    downloadJPEG: () => {\n      // … your existing downloadJPEG implementation …\n    },\n    downloadPDF: () => {\n      // … your existing downloadPDF implementation …\n    },\n    loadShapes: arr => {\n      shapesRef.current = arr.map(s => ({\n        ...s,\n        selected: false\n      }));\n      redrawAll();\n    },\n    getShapeCount: () => shapesRef.current.length,\n    clearShapes: () => {\n      shapesRef.current = [];\n      redrawAll();\n    }\n  }));\n\n  // Keep canvases sized to container\n  useEffect(() => {\n    const resize = () => {\n      const {\n        width,\n        height\n      } = containerRef.current.getBoundingClientRect();\n      c1Ref.current.width = width;\n      c1Ref.current.height = height;\n      c2Ref.current.width = width;\n      c2Ref.current.height = height;\n      redrawAll();\n    };\n    resize();\n    window.addEventListener(\"resize\", resize);\n    return () => window.removeEventListener(\"resize\", resize);\n  }, []);\n\n  // Redraw all shapes, using ellipse for 'circle' tool\n  function redrawAll(context = c1Ref, offsetX = 0, offsetY = 0, backgroundColor = \"#979797\") {\n    const c = context.current;\n    const ctx = c.getContext(\"2d\");\n    const w = c.width,\n      h = c.height;\n\n    // background\n    ctx.clearRect(0, 0, w, h);\n    ctx.fillStyle = backgroundColor;\n    ctx.fillRect(0, 0, w, h);\n    shapesRef.current.forEach(s => {\n      var _s$strokeWidth;\n      const lc = s.lineColor || lineColor;\n      const fc = s.fillColor || fillColor;\n      const sw = (_s$strokeWidth = s.strokeWidth) !== null && _s$strokeWidth !== void 0 ? _s$strokeWidth : strokeWidth;\n      ctx.save();\n      ctx.strokeStyle = lc;\n      ctx.fillStyle = fc;\n      ctx.lineWidth = sw;\n      ctx.beginPath();\n      const x0 = s.x0 + offsetX;\n      const y0 = s.y0 + offsetY;\n      const x1 = s.x1 + offsetX;\n      const y1 = s.y1 + offsetY;\n      switch (s.tool) {\n        case \"square\":\n          ctx.fillRect(x0, y0, x1 - x0, y1 - y0);\n          ctx.strokeRect(x0, y0, x1 - x0, y1 - y0);\n          break;\n        case \"line\":\n          ctx.moveTo(x0, y0);\n          ctx.lineTo(x1, y1);\n          ctx.stroke();\n          break;\n        case \"circle\":\n          if (s.isCircle) {\n            // perfect circle\n            const r = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n            ctx.arc(x0, y0, r, 0, 2 * Math.PI);\n          } else {\n            // free-form ellipse\n            const rx = Math.abs(s.x1 - s.x0);\n            const ry = Math.abs(s.y1 - s.y0);\n            ctx.ellipse(x0, y0, rx, ry, 0, 0, 2 * Math.PI);\n          }\n          ctx.fill();\n          ctx.stroke();\n          break;\n        case \"triangle\":\n          ctx.moveTo(x0, y0);\n          ctx.lineTo(x1, y0);\n          ctx.lineTo((x0 + x1) / 2, y1);\n          ctx.closePath();\n          ctx.fill();\n          ctx.stroke();\n          break;\n        case \"polygon\":\n          const sides = 5;\n          const rad = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n          const step = 2 * Math.PI / sides;\n          for (let i = 0; i < sides; i++) {\n            const ang = i * step - Math.PI / 2;\n            const px = s.x0 + rad * Math.cos(ang) + offsetX;\n            const py = s.y0 + rad * Math.sin(ang) + offsetY;\n            i === 0 ? ctx.moveTo(px, py) : ctx.lineTo(px, py);\n          }\n          ctx.closePath();\n          ctx.fill();\n          ctx.stroke();\n          break;\n      }\n      if (s.selected) {\n        ctx.strokeStyle = \"red\";\n        ctx.strokeRect(Math.min(s.x0, s.x1) + offsetX, Math.min(s.y0, s.y1) + offsetY, Math.abs(s.x1 - s.x0), Math.abs(s.y1 - s.y0));\n      }\n      ctx.restore();\n    });\n  }\n\n  // Drawing & preview logic\n  useEffect(() => {\n    const c2 = c2Ref.current;\n    const ctx2 = c2.getContext(\"2d\");\n    const getPos = e => {\n      const r = c2.getBoundingClientRect();\n      return {\n        x: e.clientX - r.left,\n        y: e.clientY - r.top\n      };\n    };\n    const down = e => {\n      if (activeTool === \"cursor\") {\n        // selection logic…\n        redrawAll();\n        return;\n      }\n      if (![\"square\", \"line\", \"circle\", \"triangle\", \"polygon\"].includes(activeTool)) return;\n      setStartPos(getPos(e));\n      setIsDrawing(true);\n    };\n    const move = e => {\n      if (!isDrawing) return;\n      const {\n        x,\n        y\n      } = getPos(e);\n      const dx = x - startPos.x,\n        dy = y - startPos.y;\n      ctx2.clearRect(0, 0, c2.width, c2.height);\n      ctx2.strokeStyle = lineColor;\n      ctx2.lineWidth = strokeWidth;\n      ctx2.beginPath();\n      switch (activeTool) {\n        case \"square\":\n          ctx2.strokeRect(startPos.x, startPos.y, dx, dy);\n          break;\n        case \"line\":\n          ctx2.moveTo(startPos.x, startPos.y);\n          ctx2.lineTo(x, y);\n          ctx2.stroke();\n          break;\n        case \"circle\":\n          if (enterDown) {\n            // force circle\n            const r = Math.min(Math.abs(dx), Math.abs(dy));\n            ctx2.ellipse(startPos.x, startPos.y, r, r, 0, 0, 2 * Math.PI);\n          } else {\n            // free ellipse\n            ctx2.ellipse(startPos.x, startPos.y, Math.abs(dx), Math.abs(dy), 0, 0, 2 * Math.PI);\n          }\n          ctx2.stroke();\n          break;\n        case \"triangle\":\n          ctx2.moveTo(startPos.x, startPos.y);\n          ctx2.lineTo(startPos.x + dx, startPos.y);\n          ctx2.lineTo(startPos.x + dx / 2, startPos.y + dy);\n          ctx2.closePath();\n          ctx2.stroke();\n          break;\n        case \"polygon\":\n          const sides2 = 5;\n          const rad2 = Math.hypot(dx, dy);\n          const step2 = 2 * Math.PI / sides2;\n          for (let i = 0; i < sides2; i++) {\n            const ang = i * step2 - Math.PI / 2;\n            const px = startPos.x + rad2 * Math.cos(ang);\n            const py = startPos.y + rad2 * Math.sin(ang);\n            i === 0 ? ctx2.moveTo(px, py) : ctx2.lineTo(px, py);\n          }\n          ctx2.closePath();\n          ctx2.stroke();\n          break;\n      }\n    };\n    const up = e => {\n      if (!isDrawing) return;\n      const {\n        x,\n        y\n      } = getPos(e);\n      shapesRef.current.push({\n        tool: activeTool,\n        x0: startPos.x,\n        y0: startPos.y,\n        x1: x,\n        y1: y,\n        lineColor,\n        fillColor,\n        strokeWidth,\n        // record whether we held Enter to constrain to circle\n        isCircle: activeTool === \"circle\" && enterDown,\n        selected: false\n      });\n      redrawAll();\n      ctx2.clearRect(0, 0, c2.width, c2.height);\n      setIsDrawing(false);\n    };\n    const onKeyDown = e => {\n      if (e.ctrlKey && e.key === \"z\" && shapesRef.current.length) {\n        redoRef.current.push(shapesRef.current.pop());\n        redrawAll();\n      } else if (e.ctrlKey && e.shiftKey && e.key.toLowerCase() === \"z\" && redoRef.current.length) {\n        shapesRef.current.push(redoRef.current.pop());\n        redrawAll();\n      }\n    };\n    c2.addEventListener(\"mousedown\", down);\n    c2.addEventListener(\"mousemove\", move);\n    c2.addEventListener(\"mouseup\", up);\n    window.addEventListener(\"keydown\", onKeyDown);\n    return () => {\n      c2.removeEventListener(\"mousedown\", down);\n      c2.removeEventListener(\"mousemove\", move);\n      c2.removeEventListener(\"mouseup\", up);\n      window.removeEventListener(\"keydown\", onKeyDown);\n    };\n  }, [activeTool, isDrawing, startPos, lineColor, fillColor, strokeWidth, enterDown]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    className: \"canvas-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: c1Ref\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: c2Ref,\n      style: {\n        backgroundColor: \"transparent\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 300,\n    columnNumber: 13\n  }, this);\n}, \"zTWJ0T3pYDhJ3SHzfSzxJNtWSSY=\")), \"zTWJ0T3pYDhJ3SHzfSzxJNtWSSY=\");\n_c2 = Canvas;\nexport default Canvas;\nvar _c, _c2;\n$RefreshReg$(_c, \"Canvas$forwardRef\");\n$RefreshReg$(_c2, \"Canvas\");","map":{"version":3,"names":["React","forwardRef","useImperativeHandle","useRef","useEffect","useState","jsPDF","jsxDEV","_jsxDEV","Canvas","_s","_c","activeTool","lineColor","fillColor","strokeWidth","ref","containerRef","c1Ref","c2Ref","shapesRef","redoRef","isDrawing","setIsDrawing","startPos","setStartPos","x","y","enterDown","setEnterDown","onKeyDown","e","key","onKeyUp","window","addEventListener","removeEventListener","exportShapes","data","JSON","stringify","current","blob","Blob","type","url","URL","createObjectURL","a","document","createElement","href","download","click","revokeObjectURL","downloadJPEG","downloadPDF","loadShapes","arr","map","s","selected","redrawAll","getShapeCount","length","clearShapes","resize","width","height","getBoundingClientRect","context","offsetX","offsetY","backgroundColor","c","ctx","getContext","w","h","clearRect","fillStyle","fillRect","forEach","_s$strokeWidth","lc","fc","sw","save","strokeStyle","lineWidth","beginPath","x0","y0","x1","y1","tool","strokeRect","moveTo","lineTo","stroke","isCircle","r","Math","hypot","arc","PI","rx","abs","ry","ellipse","fill","closePath","sides","rad","step","i","ang","px","cos","py","sin","min","restore","c2","ctx2","getPos","clientX","left","clientY","top","down","includes","move","dx","dy","sides2","rad2","step2","up","push","ctrlKey","pop","shiftKey","toLowerCase","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","_c2","$RefreshReg$"],"sources":["/home/nightsquid/Desktop/GUI II/studyspace/src/components/Canvas.js"],"sourcesContent":["// src/components/Canvas.js\nimport React, {\n    forwardRef,\n    useImperativeHandle,\n    useRef,\n    useEffect,\n    useState\n} from \"react\";\nimport { jsPDF } from \"jspdf\";\nimport \"../css/canvas.css\";\n\nconst Canvas = forwardRef(\n    ({ activeTool, lineColor, fillColor, strokeWidth }, ref) => {\n        const containerRef = useRef(null);\n        const c1Ref = useRef(null);\n        const c2Ref = useRef(null);\n\n        const shapesRef = useRef([]);\n        const redoRef = useRef([]);\n\n        const [isDrawing, setIsDrawing] = useState(false);\n        const [startPos, setStartPos] = useState({ x: 0, y: 0 });\n        const [enterDown, setEnterDown] = useState(false);\n\n        // Track Enter key for circle constraint\n        useEffect(() => {\n            const onKeyDown = (e) => { if (e.key === \"Enter\") setEnterDown(true); };\n            const onKeyUp = (e) => { if (e.key === \"Enter\") setEnterDown(false); };\n            window.addEventListener(\"keydown\", onKeyDown);\n            window.addEventListener(\"keyup\", onKeyUp);\n            return () => {\n                window.removeEventListener(\"keydown\", onKeyDown);\n                window.removeEventListener(\"keyup\", onKeyUp);\n            };\n        }, []);\n\n        useImperativeHandle(ref, () => ({\n            exportShapes: () => {\n                const data = JSON.stringify(shapesRef.current, null, 2);\n                const blob = new Blob([data], { type: \"application/json\" });\n                const url = URL.createObjectURL(blob);\n                const a = document.createElement(\"a\");\n                a.href = url; a.download = \"shapes.json\"; a.click();\n                URL.revokeObjectURL(url);\n            },\n            downloadJPEG: () => {\n                // … your existing downloadJPEG implementation …\n            },\n            downloadPDF: () => {\n                // … your existing downloadPDF implementation …\n            },\n            loadShapes: (arr) => {\n                shapesRef.current = arr.map(s => ({ ...s, selected: false }));\n                redrawAll();\n            },\n            getShapeCount: () => shapesRef.current.length,\n            clearShapes: () => {\n                shapesRef.current = [];\n                redrawAll();\n            }\n        }));\n\n        // Keep canvases sized to container\n        useEffect(() => {\n            const resize = () => {\n                const { width, height } = containerRef.current.getBoundingClientRect();\n                c1Ref.current.width = width;\n                c1Ref.current.height = height;\n                c2Ref.current.width = width;\n                c2Ref.current.height = height;\n                redrawAll();\n            };\n            resize();\n            window.addEventListener(\"resize\", resize);\n            return () => window.removeEventListener(\"resize\", resize);\n        }, []);\n\n        // Redraw all shapes, using ellipse for 'circle' tool\n        function redrawAll(context = c1Ref, offsetX = 0, offsetY = 0, backgroundColor = \"#979797\") {\n            const c = context.current;\n            const ctx = c.getContext(\"2d\");\n            const w = c.width, h = c.height;\n\n            // background\n            ctx.clearRect(0, 0, w, h);\n            ctx.fillStyle = backgroundColor;\n            ctx.fillRect(0, 0, w, h);\n\n            shapesRef.current.forEach(s => {\n                const lc = s.lineColor || lineColor;\n                const fc = s.fillColor || fillColor;\n                const sw = s.strokeWidth ?? strokeWidth;\n                ctx.save();\n                ctx.strokeStyle = lc;\n                ctx.fillStyle = fc;\n                ctx.lineWidth = sw;\n                ctx.beginPath();\n\n                const x0 = s.x0 + offsetX;\n                const y0 = s.y0 + offsetY;\n                const x1 = s.x1 + offsetX;\n                const y1 = s.y1 + offsetY;\n\n                switch (s.tool) {\n                    case \"square\":\n                        ctx.fillRect(x0, y0, x1 - x0, y1 - y0);\n                        ctx.strokeRect(x0, y0, x1 - x0, y1 - y0);\n                        break;\n\n                    case \"line\":\n                        ctx.moveTo(x0, y0);\n                        ctx.lineTo(x1, y1);\n                        ctx.stroke();\n                        break;\n\n                    case \"circle\":\n                        if (s.isCircle) {\n                            // perfect circle\n                            const r = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n                            ctx.arc(x0, y0, r, 0, 2 * Math.PI);\n                        } else {\n                            // free-form ellipse\n                            const rx = Math.abs(s.x1 - s.x0);\n                            const ry = Math.abs(s.y1 - s.y0);\n                            ctx.ellipse(x0, y0, rx, ry, 0, 0, 2 * Math.PI);\n                        }\n                        ctx.fill();\n                        ctx.stroke();\n                        break;\n\n                    case \"triangle\":\n                        ctx.moveTo(x0, y0);\n                        ctx.lineTo(x1, y0);\n                        ctx.lineTo((x0 + x1) / 2, y1);\n                        ctx.closePath();\n                        ctx.fill();\n                        ctx.stroke();\n                        break;\n\n                    case \"polygon\":\n                        const sides = 5;\n                        const rad = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n                        const step = (2 * Math.PI) / sides;\n                        for (let i = 0; i < sides; i++) {\n                            const ang = i * step - Math.PI / 2;\n                            const px = s.x0 + rad * Math.cos(ang) + offsetX;\n                            const py = s.y0 + rad * Math.sin(ang) + offsetY;\n                            i === 0 ? ctx.moveTo(px, py) : ctx.lineTo(px, py);\n                        }\n                        ctx.closePath();\n                        ctx.fill();\n                        ctx.stroke();\n                        break;\n                }\n\n                if (s.selected) {\n                    ctx.strokeStyle = \"red\";\n                    ctx.strokeRect(\n                        Math.min(s.x0, s.x1) + offsetX,\n                        Math.min(s.y0, s.y1) + offsetY,\n                        Math.abs(s.x1 - s.x0),\n                        Math.abs(s.y1 - s.y0)\n                    );\n                }\n                ctx.restore();\n            });\n        }\n\n        // Drawing & preview logic\n        useEffect(() => {\n            const c2 = c2Ref.current;\n            const ctx2 = c2.getContext(\"2d\");\n\n            const getPos = e => {\n                const r = c2.getBoundingClientRect();\n                return { x: e.clientX - r.left, y: e.clientY - r.top };\n            };\n\n            const down = e => {\n                if (activeTool === \"cursor\") {\n                    // selection logic…\n                    redrawAll();\n                    return;\n                }\n                if (![\"square\", \"line\", \"circle\", \"triangle\", \"polygon\"].includes(activeTool))\n                    return;\n                setStartPos(getPos(e));\n                setIsDrawing(true);\n            };\n\n            const move = e => {\n                if (!isDrawing) return;\n                const { x, y } = getPos(e);\n                const dx = x - startPos.x, dy = y - startPos.y;\n                ctx2.clearRect(0, 0, c2.width, c2.height);\n                ctx2.strokeStyle = lineColor;\n                ctx2.lineWidth = strokeWidth;\n                ctx2.beginPath();\n\n                switch (activeTool) {\n                    case \"square\":\n                        ctx2.strokeRect(startPos.x, startPos.y, dx, dy);\n                        break;\n                    case \"line\":\n                        ctx2.moveTo(startPos.x, startPos.y);\n                        ctx2.lineTo(x, y);\n                        ctx2.stroke();\n                        break;\n                    case \"circle\":\n                        if (enterDown) {\n                            // force circle\n                            const r = Math.min(Math.abs(dx), Math.abs(dy));\n                            ctx2.ellipse(startPos.x, startPos.y, r, r, 0, 0, 2 * Math.PI);\n                        } else {\n                            // free ellipse\n                            ctx2.ellipse(\n                                startPos.x,\n                                startPos.y,\n                                Math.abs(dx),\n                                Math.abs(dy),\n                                0,\n                                0,\n                                2 * Math.PI\n                            );\n                        }\n                        ctx2.stroke();\n                        break;\n                    case \"triangle\":\n                        ctx2.moveTo(startPos.x, startPos.y);\n                        ctx2.lineTo(startPos.x + dx, startPos.y);\n                        ctx2.lineTo(startPos.x + dx / 2, startPos.y + dy);\n                        ctx2.closePath();\n                        ctx2.stroke();\n                        break;\n                    case \"polygon\":\n                        const sides2 = 5;\n                        const rad2 = Math.hypot(dx, dy);\n                        const step2 = (2 * Math.PI) / sides2;\n                        for (let i = 0; i < sides2; i++) {\n                            const ang = i * step2 - Math.PI / 2;\n                            const px = startPos.x + rad2 * Math.cos(ang);\n                            const py = startPos.y + rad2 * Math.sin(ang);\n                            i === 0 ? ctx2.moveTo(px, py) : ctx2.lineTo(px, py);\n                        }\n                        ctx2.closePath();\n                        ctx2.stroke();\n                        break;\n                }\n            };\n\n            const up = e => {\n                if (!isDrawing) return;\n                const { x, y } = getPos(e);\n                shapesRef.current.push({\n                    tool: activeTool,\n                    x0: startPos.x,\n                    y0: startPos.y,\n                    x1: x,\n                    y1: y,\n                    lineColor,\n                    fillColor,\n                    strokeWidth,\n                    // record whether we held Enter to constrain to circle\n                    isCircle: activeTool === \"circle\" && enterDown,\n                    selected: false\n                });\n                redrawAll();\n                ctx2.clearRect(0, 0, c2.width, c2.height);\n                setIsDrawing(false);\n            };\n\n            const onKeyDown = e => {\n                if (e.ctrlKey && e.key === \"z\" && shapesRef.current.length) {\n                    redoRef.current.push(shapesRef.current.pop());\n                    redrawAll();\n                } else if (\n                    e.ctrlKey &&\n                    e.shiftKey &&\n                    e.key.toLowerCase() === \"z\" &&\n                    redoRef.current.length\n                ) {\n                    shapesRef.current.push(redoRef.current.pop());\n                    redrawAll();\n                }\n            };\n\n            c2.addEventListener(\"mousedown\", down);\n            c2.addEventListener(\"mousemove\", move);\n            c2.addEventListener(\"mouseup\", up);\n            window.addEventListener(\"keydown\", onKeyDown);\n            return () => {\n                c2.removeEventListener(\"mousedown\", down);\n                c2.removeEventListener(\"mousemove\", move);\n                c2.removeEventListener(\"mouseup\", up);\n                window.removeEventListener(\"keydown\", onKeyDown);\n            };\n        }, [activeTool, isDrawing, startPos, lineColor, fillColor, strokeWidth, enterDown]);\n\n        return (\n            <div ref={containerRef} className=\"canvas-container\">\n                <canvas ref={c1Ref} />\n                <canvas ref={c2Ref} style={{ backgroundColor: \"transparent\" }} />\n            </div>\n        );\n    }\n);\n\nexport default Canvas;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}