{"ast":null,"code":"var _jsxFileName = \"/home/nightsquid/Desktop/GUI II/studyspace/src/components/Canvas.js\",\n  _s = $RefreshSig$();\nimport React, { forwardRef, useImperativeHandle, useRef, useEffect, useState } from \"react\";\nimport { jsPDF } from \"jspdf\";\nimport \"../css/canvas.css\";\n\n// --- Helper Functions ---\n// Compute bounding box for any shape\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction getBBox(shape) {\n  if (shape.points) {\n    const xs = shape.points.map(p => p.x);\n    const ys = shape.points.map(p => p.y);\n    return {\n      xMin: Math.min(...xs),\n      yMin: Math.min(...ys),\n      xMax: Math.max(...xs),\n      yMax: Math.max(...ys)\n    };\n  }\n  if (shape.tool === \"circle\") {\n    const cx = shape.x0,\n      cy = shape.y0;\n    if (shape.isCircle) {\n      const r = Math.hypot(shape.x1 - shape.x0, shape.y1 - shape.y0);\n      return {\n        xMin: cx - r,\n        yMin: cy - r,\n        xMax: cx + r,\n        yMax: cy + r\n      };\n    } else {\n      const rx = Math.abs(shape.x1 - shape.x0);\n      const ry = Math.abs(shape.y1 - shape.y0);\n      return {\n        xMin: cx - rx,\n        yMin: cy - ry,\n        xMax: cx + rx,\n        yMax: cy + ry\n      };\n    }\n  }\n  if (shape.tool === \"polygon\") {\n    const cx = shape.x0;\n    const cy = shape.y0;\n    const radius = Math.hypot(shape.x1 - shape.x0, shape.y1 - shape.y0);\n    const sides = 5; // match your drawShape logic\n    const xs = [];\n    const ys = [];\n    for (let i = 0; i < sides; i++) {\n      const ang = i * (2 * Math.PI / sides) - Math.PI / 2;\n      xs.push(cx + radius * Math.cos(ang));\n      ys.push(cy + radius * Math.sin(ang));\n    }\n    return {\n      xMin: Math.min(...xs),\n      yMin: Math.min(...ys),\n      xMax: Math.max(...xs),\n      yMax: Math.max(...ys)\n    };\n  }\n  if (shape.tool === \"square\" && shape.isSquare) {\n    const dx = shape.x1 - shape.x0;\n    const dy = shape.y1 - shape.y0;\n    const side = Math.min(Math.abs(dx), Math.abs(dy));\n    const w = dx < 0 ? -side : side;\n    const h = dy < 0 ? -side : side;\n    const xA = shape.x0;\n    const yA = shape.y0;\n    const xB = shape.x0 + w;\n    const yB = shape.y0 + h;\n    return {\n      xMin: Math.min(xA, xB),\n      yMin: Math.min(yA, yB),\n      xMax: Math.max(xA, xB),\n      yMax: Math.max(yA, yB)\n    };\n  }\n  return {\n    xMin: Math.min(shape.x0, shape.x1),\n    yMin: Math.min(shape.y0, shape.y1),\n    xMax: Math.max(shape.x0, shape.x1),\n    yMax: Math.max(shape.y0, shape.y1)\n  };\n}\n\n// Hit-test a point against any shape (strokes for lines, box for others)\nfunction hitTest(ctx, shape, x, y, defaultStroke) {\n  const path = new Path2D();\n  ctx.lineWidth = (shape.strokeWidth || defaultStroke) + 8;\n  switch (shape.tool) {\n    case \"line\":\n      path.moveTo(shape.x0, shape.y0);\n      path.lineTo(shape.x1, shape.y1);\n      return ctx.isPointInStroke(path, x, y);\n    case \"poly-line\":\n    case \"curve\":\n      if (shape.points && shape.points.length > 1) {\n        path.moveTo(shape.points[0].x, shape.points[0].y);\n        for (let p of shape.points.slice(1)) path.lineTo(p.x, p.y);\n        return ctx.isPointInStroke(path, x, y);\n      }\n      return false;\n    default:\n      const {\n        xMin,\n        yMin,\n        xMax,\n        yMax\n      } = getBBox(shape);\n      return x >= xMin && x <= xMax && y >= yMin && y <= yMax;\n  }\n}\n\n// Draw a shape onto the canvas context\nfunction drawShape(ctx, shape, offsetX = 0, offsetY = 0) {\n  const x0 = shape.x0 + offsetX;\n  const y0 = shape.y0 + offsetY;\n  const x1 = shape.x1 + offsetX;\n  const y1 = shape.y1 + offsetY;\n  const cx = (shape.x0 + shape.x1) / 2 + offsetX;\n  const cy = (shape.y0 + shape.y1) / 2 + offsetY;\n  ctx.save();\n  ctx.translate(cx, cy);\n  ctx.rotate(shape.rotation || 0);\n  ctx.translate(-cx, -cy);\n  switch (shape.tool) {\n    case \"square\":\n      {\n        const dx = shape.x1 - shape.x0;\n        const dy = shape.y1 - shape.y0;\n        let w, h;\n        if (shape.isSquare) {\n          const side = Math.min(Math.abs(dx), Math.abs(dy));\n          w = dx < 0 ? -side : side;\n          h = dy < 0 ? -side : side;\n        } else {\n          w = dx;\n          h = dy;\n        }\n        ctx.fillRect(shape.x0 + offsetX, shape.y0 + offsetY, w, h);\n        ctx.strokeRect(shape.x0 + offsetX, shape.y0 + offsetY, w, h);\n        return;\n      }\n    case \"line\":\n      ctx.beginPath();\n      ctx.moveTo(x0, y0);\n      ctx.lineTo(x1, y1);\n      ctx.stroke();\n      return;\n    case \"circle\":\n      ctx.beginPath();\n      if (shape.isCircle) {\n        const r = Math.hypot(shape.x1 - shape.x0, shape.y1 - shape.y0);\n        ctx.arc(x0, y0, r, 0, 2 * Math.PI);\n      } else {\n        ctx.ellipse(x0, y0, Math.abs(shape.x1 - shape.x0), Math.abs(shape.y1 - shape.y0), 0, 0, 2 * Math.PI);\n      }\n      ctx.fill();\n      ctx.stroke();\n      return;\n    case \"triangle\":\n      ctx.beginPath();\n      ctx.moveTo(x0, y0);\n      ctx.lineTo(x1, y0);\n      ctx.lineTo((x0 + x1) / 2, y1);\n      ctx.closePath();\n      ctx.fill();\n      ctx.stroke();\n      return;\n    case \"polygon\":\n      ctx.beginPath();\n      const sides = 5;\n      const radius = Math.hypot(shape.x1 - shape.x0, shape.y1 - shape.y0);\n      for (let i = 0; i < sides; i++) {\n        const ang = i * (2 * Math.PI / sides) - Math.PI / 2;\n        const px = shape.x0 + offsetX + radius * Math.cos(ang);\n        const py = shape.y0 + offsetY + radius * Math.sin(ang);\n        if (i === 0) ctx.moveTo(px, py);else ctx.lineTo(px, py);\n      }\n      ctx.closePath();\n      ctx.fill();\n      ctx.stroke();\n      return;\n    case \"poly-line\":\n      if (shape.points && shape.points.length) {\n        ctx.beginPath();\n        ctx.moveTo(shape.points[0].x + offsetX, shape.points[0].y + offsetY);\n        for (let p of shape.points.slice(1)) ctx.lineTo(p.x + offsetX, p.y + offsetY);\n        ctx.stroke();\n      }\n      return;\n    case \"curve\":\n      if (shape.points && shape.points.length) {\n        ctx.beginPath();\n        const pts = shape.points;\n        ctx.moveTo(pts[0].x + offsetX, pts[0].y + offsetY);\n        for (let i = 1; i < pts.length; i++) {\n          const prev = pts[i - 1];\n          const curr = pts[i];\n          const mx = (prev.x + curr.x) / 2 + offsetX;\n          const my = (prev.y + curr.y) / 2 + offsetY;\n          ctx.quadraticCurveTo(prev.x + offsetX, prev.y + offsetY, mx, my);\n        }\n        const last = pts[pts.length - 1];\n        ctx.lineTo(last.x + offsetX, last.y + offsetY);\n        ctx.stroke();\n      }\n      return;\n    default:\n      return;\n  }\n}\n\n// Draw selection handles\nfunction drawSelection(ctx, shape, offsetX = 0, offsetY = 0) {\n  const R = 5;\n  if (shape.tool === \"line\") {\n    const p0 = {\n      x: shape.x0 + offsetX,\n      y: shape.y0 + offsetY\n    };\n    const p1 = {\n      x: shape.x1 + offsetX,\n      y: shape.y1 + offsetY\n    };\n    ctx.beginPath();\n    ctx.moveTo(p0.x, p0.y);\n    ctx.lineTo(p1.x, p1.y);\n    ctx.stroke();\n    [p0, p1].forEach(pt => {\n      ctx.beginPath();\n      ctx.arc(pt.x, pt.y, R, 0, 2 * Math.PI);\n      ctx.fill();\n      ctx.stroke();\n    });\n    return;\n  }\n  const {\n    xMin,\n    yMin,\n    xMax,\n    yMax\n  } = getBBox(shape);\n  const midX = (xMin + xMax) / 2;\n  const rotY = yMin - 20;\n  ctx.beginPath();\n  ctx.moveTo(midX, yMin);\n  ctx.lineTo(midX, rotY);\n  ctx.stroke();\n\n  // circle grip\n  ctx.beginPath();\n  ctx.arc(midX, rotY, R, 0, 2 * Math.PI);\n  ctx.fill();\n  ctx.stroke();\n  ctx.strokeRect(xMin, yMin, xMax - xMin, yMax - yMin);\n  ctx.fillStyle = \"white\";\n  [{\n    x: xMin,\n    y: yMin\n  }, {\n    x: xMax,\n    y: yMin\n  }, {\n    x: xMax,\n    y: yMax\n  }, {\n    x: xMin,\n    y: yMax\n  }].forEach(pt => {\n    ctx.beginPath();\n    ctx.arc(pt.x, pt.y, R, 0, 2 * Math.PI);\n    ctx.fill();\n    ctx.stroke();\n  });\n}\nconst Canvas = /*#__PURE__*/_s(/*#__PURE__*/forwardRef(_c = _s(({\n  activeTool,\n  lineColor,\n  fillColor,\n  strokeWidth\n}, ref) => {\n  _s();\n  const containerRef = useRef(null);\n  const c1Ref = useRef(null);\n  const c2Ref = useRef(null);\n  const shapesRef = useRef([]);\n  const undoStack = useRef([]);\n  const redoStack = useRef([]);\n  const polyRef = useRef([]);\n  const curveRef = useRef([]);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [startPos, setStartPos] = useState({\n    x: 0,\n    y: 0\n  });\n  const dragRef = useRef({\n    isDragging: false,\n    isResizing: false,\n    prevPos: {\n      x: 0,\n      y: 0\n    },\n    shapeIndex: null,\n    handleIndex: null,\n    origShape: null\n  });\n  useImperativeHandle(ref, () => ({\n    exportShapes: () => {\n      shapesRef.current.forEach(s => s.selected = false);\n      const data = JSON.stringify(shapesRef.current, null, 2);\n      const blob = new Blob([data], {\n        type: \"application/json\"\n      });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement(\"a\");\n      a.href = url;\n      a.download = \"shapes.json\";\n      a.click();\n      URL.revokeObjectURL(url);\n    },\n    downloadJPEG: () => {\n      shapesRef.current.forEach(s => s.selected = false);\n      const shapes = shapesRef.current;\n      const pad = 20;\n      let minX = Infinity,\n        minY = Infinity;\n      let maxX = -Infinity,\n        maxY = -Infinity;\n      shapes.forEach(s => {\n        if (s.tool === \"circle\" || s.tool === \"polygon\") {\n          const r = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n          minX = Math.min(minX, s.x0 - r);\n          maxX = Math.max(maxX, s.x0 + r);\n          minY = Math.min(minY, s.y0 - r);\n          maxY = Math.max(maxY, s.y0 + r);\n        } else {\n          minX = Math.min(minX, s.x0, s.x1);\n          maxX = Math.max(maxX, s.x0, s.x1);\n          minY = Math.min(minY, s.y0, s.y1);\n          maxY = Math.max(maxY, s.y0, s.y1);\n        }\n      });\n      if (minX === Infinity) {\n        minX = 0;\n        minY = 0;\n        maxX = c1Ref.current.width;\n        maxY = c1Ref.current.height;\n      }\n      minX -= pad;\n      minY -= pad;\n      maxX += pad;\n      maxY += pad;\n      const sw = maxX - minX;\n      const sh = maxY - minY;\n      const tmp = document.createElement(\"canvas\");\n      tmp.width = sw;\n      tmp.height = sh;\n      redrawAll({\n        current: tmp\n      }, -minX, -minY, \"#ffffff\");\n      const dataURL = tmp.toDataURL(\"image/jpeg\", 1.0);\n      const link = document.createElement(\"a\");\n      link.href = dataURL;\n      link.download = \"shapes.jpg\";\n      link.click();\n    },\n    downloadPDF: () => {\n      shapesRef.current.forEach(s => s.selected = false);\n      const shapes = shapesRef.current;\n      const pad = 20;\n      let minX = Infinity,\n        minY = Infinity;\n      let maxX = -Infinity,\n        maxY = -Infinity;\n      shapes.forEach(s => {\n        if (s.tool === \"circle\" || s.tool === \"polygon\") {\n          const r = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n          minX = Math.min(minX, s.x0 - r);\n          maxX = Math.max(maxX, s.x0 + r);\n          minY = Math.min(minY, s.y0 - r);\n          maxY = Math.max(maxY, s.y0 + r);\n        } else {\n          minX = Math.min(minX, s.x0, s.x1);\n          maxX = Math.max(maxX, s.x0, s.x1);\n          minY = Math.min(minY, s.y0, s.y1);\n          maxY = Math.max(maxY, s.y0, s.y1);\n        }\n      });\n      if (minX === Infinity) {\n        minX = 0;\n        minY = 0;\n        maxX = c1Ref.current.width;\n        maxY = c1Ref.current.height;\n      }\n      minX -= pad;\n      minY -= pad;\n      maxX += pad;\n      maxY += pad;\n      const sw = maxX - minX;\n      const sh = maxY - minY;\n      const tmp = document.createElement(\"canvas\");\n      tmp.width = sw;\n      tmp.height = sh;\n      redrawAll({\n        current: tmp\n      }, -minX, -minY, \"#ffffff\");\n      const orientation = sw > sh ? \"landscape\" : \"portrait\";\n      const pdf = new jsPDF({\n        orientation,\n        unit: \"px\",\n        format: \"a4\"\n      });\n      const pageW = pdf.internal.pageSize.getWidth();\n      const pageH = pdf.internal.pageSize.getHeight();\n      const scale = Math.min(pageW / sw, pageH / sh);\n      let yOffset = 0;\n      while (yOffset < sh) {\n        const sliceH = Math.min(sh - yOffset, pageH / scale);\n        const slice = document.createElement(\"canvas\");\n        slice.width = sw;\n        slice.height = sliceH;\n        slice.getContext(\"2d\").drawImage(tmp, 0, yOffset, sw, sliceH, 0, 0, sw, sliceH);\n        const imgData = slice.toDataURL(\"image/jpeg\", 1.0);\n        const imgW = sw * scale,\n          imgH = sliceH * scale;\n        const xPos = (pageW - imgW) / 2;\n        pdf.addImage(imgData, \"JPEG\", xPos, 0, imgW, imgH);\n        yOffset += sliceH;\n        if (yOffset < sh) pdf.addPage();\n      }\n      pdf.save(\"shapes.pdf\");\n    },\n    loadShapes: arr => {\n      shapesRef.current = arr.map(s => ({\n        ...s,\n        selected: false\n      }));\n      redrawAll();\n    },\n    getShapeCount: () => shapesRef.current.length,\n    clearShapes: () => {\n      shapesRef.current = [];\n      redrawAll();\n    }\n  }));\n  useEffect(() => {\n    const resize = () => {\n      const {\n        width,\n        height\n      } = containerRef.current.getBoundingClientRect();\n      [c1Ref, c2Ref].forEach(r => {\n        r.current.width = width;\n        r.current.height = height;\n      });\n      redrawAll();\n    };\n    resize();\n    window.addEventListener(\"resize\", resize);\n    return () => window.removeEventListener(\"resize\", resize);\n  }, []);\n  useEffect(() => {\n    let dirty = false;\n    shapesRef.current.forEach(s => {\n      if (s.selected && (s.strokeWidth !== strokeWidth || s.lineColor !== lineColor || s.fillColor !== fillColor)) {\n        s.strokeWidth = strokeWidth;\n        s.lineColor = lineColor;\n        s.fillColor = fillColor;\n        dirty = true;\n      }\n    });\n    if (dirty) redrawAll();\n  }, [strokeWidth, lineColor, fillColor]);\n  function redrawAll(context = c1Ref, offsetX = 0, offsetY = 0, backgroundColor = \"#979797\") {\n    const c = context.current;\n    const ctx = c.getContext(\"2d\");\n    ctx.clearRect(0, 0, c.width, c.height);\n    ctx.fillStyle = backgroundColor;\n    ctx.fillRect(0, 0, c.width, c.height);\n    shapesRef.current.forEach(s => {\n      ctx.save();\n      ctx.strokeStyle = s.lineColor || lineColor;\n      ctx.fillStyle = s.fillColor || fillColor;\n      ctx.lineWidth = s.strokeWidth || strokeWidth;\n      drawShape(ctx, s, offsetX, offsetY);\n      if (s.selected) {\n        ctx.save();\n        ctx.strokeStyle = \"#ff7300\";\n        ctx.lineWidth = 2;\n        drawSelection(ctx, s, offsetX, offsetY);\n        ctx.restore();\n      }\n      ctx.restore();\n    });\n  }\n  useEffect(() => {\n    const c2 = c2Ref.current;\n    const ctx2 = c2.getContext(\"2d\");\n    const getPos = e => {\n      const r = c2.getBoundingClientRect();\n      return {\n        x: e.clientX - r.left,\n        y: e.clientY - r.top\n      };\n    };\n    const down = e => {\n      const pos = getPos(e);\n      if (activeTool === \"cursor\") {\n        const ctx1 = c1Ref.current.getContext(\"2d\");\n        // clear previous selection\n        shapesRef.current.forEach(sh => sh.selected = false);\n\n        // walk shapes in reverse z-order\n        for (let i = shapesRef.current.length - 1; i >= 0; i--) {\n          const s = shapesRef.current[i];\n          if (!hitTest(ctx1, s, pos.x, pos.y, strokeWidth)) continue;\n\n          // 1) check for a corner-drag first\n          const {\n            xMin,\n            yMin,\n            xMax,\n            yMax\n          } = getBBox(s);\n          const corners = [{\n            x: xMin,\n            y: yMin\n          }, {\n            x: xMax,\n            y: yMin\n          }, {\n            x: xMax,\n            y: yMax\n          }, {\n            x: xMin,\n            y: yMax\n          }];\n          for (let h = 0; h < corners.length; h++) {\n            const dx = pos.x - corners[h].x;\n            const dy = pos.y - corners[h].y;\n            if (Math.hypot(dx, dy) < 6) {\n              // inside handle radius\n              s.selected = true;\n              dragRef.current = {\n                isResizing: true,\n                shapeIndex: i,\n                handleIndex: h,\n                origShape: JSON.parse(JSON.stringify(s))\n              };\n              redrawAll();\n              return; // don’t start a move-drag\n            }\n          }\n\n          // 2) if no corner, it’s a normal drag\n          s.selected = true;\n          dragRef.current = {\n            isDragging: true,\n            prevPos: pos,\n            shapeIndex: i\n          };\n          redrawAll();\n          return;\n        }\n\n        // clicked on empty space\n        redrawAll();\n        return;\n      }\n      if (activeTool === \"poly-line\") {\n        polyRef.current.push(pos);\n        setIsDrawing(true);\n        return;\n      }\n      if (activeTool === \"curve\") {\n        curveRef.current.push(pos);\n        setIsDrawing(true);\n        return;\n      }\n      if (![\"square\", \"line\", \"circle\", \"triangle\", \"polygon\"].includes(activeTool)) return;\n      setStartPos(pos);\n      setIsDrawing(true);\n    };\n    const move = e => {\n      const pos = getPos(e);\n      if (dragRef.current.isResizing) {\n        const {\n          shapeIndex,\n          handleIndex,\n          origShape\n        } = dragRef.current;\n        const target = shapesRef.current[shapeIndex];\n        const pos = getPos(e); // current mouse\n        const {\n          xMin,\n          yMin,\n          xMax,\n          yMax\n        } = getBBox(origShape);\n        const corners = [{\n          x: xMin,\n          y: yMin\n        }, {\n          x: xMax,\n          y: yMin\n        }, {\n          x: xMax,\n          y: yMax\n        }, {\n          x: xMin,\n          y: yMax\n        }];\n        const origHandle = corners[handleIndex];\n        const opposite = corners[(handleIndex + 2) % 4];\n        if (origShape.tool === \"line\") {\n          // for lines, just drag one endpoint\n          if (handleIndex === 0) {\n            target.x0 = pos.x;\n            target.y0 = pos.y;\n          } else {\n            target.x1 = pos.x;\n            target.y1 = pos.y;\n          }\n        } else if (origShape.tool === \"circle\" || origShape.tool === \"polygon\") {\n          // if you want perfect circle lock, compute r = hypot(...)\n          // but even for ellipses, you can just set the handle\n          target.x1 = pos.x;\n          target.y1 = pos.y;\n          redrawAll();\n          return;\n        } else {\n          // for everything else, scale about the opposite corner\n          const sx = (pos.x - opposite.x) / (origHandle.x - opposite.x);\n          const sy = (pos.y - opposite.y) / (origHandle.y - opposite.y);\n          if (origShape.points) {\n            // poly‐line & curve: scale each point\n            target.points = origShape.points.map(p => ({\n              x: opposite.x + (p.x - opposite.x) * sx,\n              y: opposite.y + (p.y - opposite.y) * sy\n            }));\n          } else {\n            // x0/y0 and x1/y1 shapes (rect, circle, square, triangle, polygon)\n            [\"x0\", \"y0\", \"x1\", \"y1\"].forEach(k => {\n              const coord = k.startsWith(\"x\") ? \"x\" : \"y\";\n              const o = origShape[k];\n              const off = opposite[coord];\n              target[k] = off + (o - off) * (coord === \"x\" ? sx : sy);\n            });\n          }\n        }\n        redrawAll();\n        return;\n      }\n      if (activeTool === \"cursor\" && dragRef.current.isDragging) {\n        const dx = pos.x - dragRef.current.prevPos.x;\n        const dy = pos.y - dragRef.current.prevPos.y;\n        const s = shapesRef.current[dragRef.current.shapeIndex];\n        if (s.points) s.points.forEach(p => {\n          p.x += dx;\n          p.y += dy;\n        });else {\n          s.x0 += dx;\n          s.y0 += dy;\n          s.x1 += dx;\n          s.y1 += dy;\n        }\n        dragRef.current.prevPos = pos;\n        redrawAll();\n        return;\n      }\n      if (activeTool === \"poly-line\" && polyRef.current.length) {\n        ctx2.clearRect(0, 0, c2.width, c2.height);\n        ctx2.strokeStyle = lineColor;\n        ctx2.lineWidth = strokeWidth;\n        ctx2.beginPath();\n        ctx2.moveTo(polyRef.current[0].x, polyRef.current[0].y);\n        for (let p of polyRef.current.slice(1)) ctx2.lineTo(p.x, p.y);\n        ctx2.lineTo(pos.x, pos.y);\n        ctx2.stroke();\n        return;\n      }\n      if (activeTool === \"curve\" && curveRef.current.length) {\n        ctx2.clearRect(0, 0, c2.width, c2.height);\n        const pts = [...curveRef.current, pos];\n        const shape = {\n          tool: \"curve\",\n          points: pts,\n          strokeWidth,\n          lineColor\n        };\n        ctx2.lineWidth = shape.strokeWidth;\n        ctx2.strokeStyle = shape.lineColor;\n        drawShape(ctx2, shape, 0, 0);\n        return;\n      }\n      if (!isDrawing) return;\n      ctx2.clearRect(0, 0, c2.width, c2.height);\n      const {\n        x,\n        y\n      } = pos;\n      const shape = {\n        tool: activeTool,\n        x0: startPos.x,\n        y0: startPos.y,\n        x1: x,\n        y1: y,\n        isSquare: e.shiftKey && activeTool === \"square\",\n        isCircle: e.shiftKey && activeTool === \"circle\",\n        strokeWidth: 1,\n        lineColor: \"black\",\n        fillColor: \"transparent\"\n      };\n      ctx2.fillStyle = shape.fillColor;\n      ctx2.strokeStyle = shape.lineColor;\n      ctx2.lineWidth = shape.strokeWidth;\n      drawShape(ctx2, shape, 0, 0);\n    };\n    const up = e => {\n      if (dragRef.current.isResizing) {\n        dragRef.current.isResizing = false;\n        dragRef.current.handleIndex = null;\n        dragRef.current.origShape = null;\n        return;\n      }\n      if (activeTool === \"cursor\" && dragRef.current.isDragging) {\n        dragRef.current.isDragging = false;\n        dragRef.current.shapeIndex = null;\n        return;\n      }\n      if ([\"poly-line\", \"curve\"].includes(activeTool)) return;\n      if (!isDrawing) return;\n      const pos = getPos(e);\n      if (pos.x === startPos.x && pos.y === startPos.y) {\n        ctx2.clearRect(0, 0, c2.width, c2.height);\n        setIsDrawing(false);\n        return;\n      }\n      const isCircle = activeTool === \"circle\" && e.shiftKey;\n      const isSquare = activeTool === \"square\" && e.shiftKey;\n      const newShape = {\n        tool: activeTool,\n        x0: startPos.x,\n        y0: startPos.y,\n        x1: pos.x,\n        y1: pos.y,\n        lineColor,\n        fillColor,\n        strokeWidth,\n        isCircle,\n        isSquare,\n        rotation: 0,\n        selected: false\n      };\n      shapesRef.current.push(newShape);\n      undoStack.current.push({\n        type: 'add',\n        shapes: [newShape]\n      });\n      // clear redoStack because it's a brand-new action\n      redoStack.current = [];\n      shapesRef.current.forEach(s => s.selected = false);\n      shapesRef.current[shapesRef.current.length - 1].selected = true;\n      redrawAll();\n      ctx2.clearRect(0, 0, c2.width, c2.height);\n      setIsDrawing(false);\n    };\n    const finishPoly = e => {\n      if (activeTool !== \"poly-line\" || polyRef.current.length < 2) return;\n      const newShape = {\n        tool: \"poly-line\",\n        points: polyRef.current.slice(),\n        lineColor,\n        fillColor,\n        strokeWidth,\n        selected: false\n      };\n      shapesRef.current.push(newShape);\n      undoStack.current.push({\n        type: 'add',\n        shapes: [newShape]\n      });\n      // clear redoStack because it's a brand-new action\n      redoStack.current = [];\n      shapesRef.current.forEach(s => s.selected = false);\n      shapesRef.current[shapesRef.current.length - 1].selected = true;\n      redrawAll();\n      ctx2.clearRect(0, 0, c2.width, c2.height);\n      polyRef.current = [];\n    };\n    const finishCurve = e => {\n      if (activeTool !== \"curve\" || curveRef.current.length < 2) return;\n\n      // 1. capture the final click\n      const pos = getPos(e);\n      curveRef.current.push(pos);\n\n      // 2. push the full point list\n      const newShape = {\n        tool: \"curve\",\n        points: curveRef.current.slice(),\n        lineColor,\n        fillColor,\n        strokeWidth,\n        selected: false\n      };\n      shapesRef.current.push(newShape);\n      undoStack.current.push({\n        type: 'add',\n        shapes: [newShape]\n      });\n      // clear redoStack because it's a brand-new action\n      redoStack.current = [];\n\n      // 3. rest stays the same\n      shapesRef.current.forEach(s => s.selected = false);\n      shapesRef.current[shapesRef.current.length - 1].selected = true;\n      redrawAll();\n      ctx2.clearRect(0, 0, c2.width, c2.height);\n\n      // 4. reset\n      curveRef.current = [];\n      setIsDrawing(false);\n    };\n    const onKeyDown = e => {\n      if (e.ctrlKey && !e.shiftKey && e.key.toLowerCase() === 'z') {\n        const action = undoStack.current.pop();\n        if (!action) return;\n        if (action.type === 'add') {\n          // remove the shape(s) that were added\n          shapesRef.current = shapesRef.current.filter(s => !action.shapes.includes(s));\n        } else if (action.type === 'delete') {\n          // re‐insert deleted shapes at their original positions\n          action.shapes.forEach((shape, i) => {\n            const idx = action.indices[i];\n            shapesRef.current.splice(idx, 0, shape);\n          });\n        }\n        redoStack.current.push(action);\n        redrawAll();\n      }\n\n      // REDO\n      else if (e.ctrlKey && e.shiftKey && e.key.toLowerCase() === 'z') {\n        const action = redoStack.current.pop();\n        if (!action) return;\n        if (action.type === 'add') {\n          // re‐add those shapes\n          shapesRef.current.push(...action.shapes);\n        } else if (action.type === 'delete') {\n          // re‐delete them\n          shapesRef.current = shapesRef.current.filter(s => !action.shapes.includes(s));\n        }\n        undoStack.current.push(action);\n        redrawAll();\n      } else if (e.key === \"Delete\") {\n        const deleted = shapesRef.current.filter(s => s.selected);\n        if (deleted.length) {\n          // remember their original indices if you care about insert order:\n          const indices = deleted.map(s => shapesRef.current.indexOf(s));\n          shapesRef.current = shapesRef.current.filter(s => !s.selected);\n          undoStack.current.push({\n            type: 'delete',\n            shapes: deleted,\n            indices\n          });\n          redoStack.current = [];\n          redrawAll();\n        }\n      }\n    };\n    c2.addEventListener(\"mousedown\", down);\n    c2.addEventListener(\"mousemove\", move);\n    c2.addEventListener(\"mouseup\", up);\n    c2.addEventListener(\"dblclick\", finishPoly);\n    c2.addEventListener(\"dblclick\", finishCurve);\n    window.addEventListener(\"keydown\", onKeyDown);\n    return () => {\n      c2.removeEventListener(\"mousedown\", down);\n      c2.removeEventListener(\"mousemove\", move);\n      c2.removeEventListener(\"mouseup\", up);\n      c2.removeEventListener(\"dblclick\", finishPoly);\n      c2.removeEventListener(\"dblclick\", finishCurve);\n      window.removeEventListener(\"keydown\", onKeyDown);\n    };\n  }, [activeTool, isDrawing, startPos, lineColor, fillColor, strokeWidth]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    className: \"canvas-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: c1Ref\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 754,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: c2Ref,\n      style: {\n        backgroundColor: \"transparent\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 755,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 753,\n    columnNumber: 9\n  }, this);\n}, \"W77xF4pKDd63cdK3WunP+ttp6AU=\")), \"W77xF4pKDd63cdK3WunP+ttp6AU=\");\n_c2 = Canvas;\nexport default Canvas;\nvar _c, _c2;\n$RefreshReg$(_c, \"Canvas$forwardRef\");\n$RefreshReg$(_c2, \"Canvas\");","map":{"version":3,"names":["React","forwardRef","useImperativeHandle","useRef","useEffect","useState","jsPDF","jsxDEV","_jsxDEV","getBBox","shape","points","xs","map","p","x","ys","y","xMin","Math","min","yMin","xMax","max","yMax","tool","cx","x0","cy","y0","isCircle","r","hypot","x1","y1","rx","abs","ry","radius","sides","i","ang","PI","push","cos","sin","isSquare","dx","dy","side","w","h","xA","yA","xB","yB","hitTest","ctx","defaultStroke","path","Path2D","lineWidth","strokeWidth","moveTo","lineTo","isPointInStroke","length","slice","drawShape","offsetX","offsetY","save","translate","rotate","rotation","fillRect","strokeRect","beginPath","stroke","arc","ellipse","fill","closePath","px","py","pts","prev","curr","mx","my","quadraticCurveTo","last","drawSelection","R","p0","p1","forEach","pt","midX","rotY","fillStyle","Canvas","_s","_c","activeTool","lineColor","fillColor","ref","containerRef","c1Ref","c2Ref","shapesRef","undoStack","redoStack","polyRef","curveRef","isDrawing","setIsDrawing","startPos","setStartPos","dragRef","isDragging","isResizing","prevPos","shapeIndex","handleIndex","origShape","exportShapes","current","s","selected","data","JSON","stringify","blob","Blob","type","url","URL","createObjectURL","a","document","createElement","href","download","click","revokeObjectURL","downloadJPEG","shapes","pad","minX","Infinity","minY","maxX","maxY","width","height","sw","sh","tmp","redrawAll","dataURL","toDataURL","link","downloadPDF","orientation","pdf","unit","format","pageW","internal","pageSize","getWidth","pageH","getHeight","scale","yOffset","sliceH","getContext","drawImage","imgData","imgW","imgH","xPos","addImage","addPage","loadShapes","arr","getShapeCount","clearShapes","resize","getBoundingClientRect","window","addEventListener","removeEventListener","dirty","context","backgroundColor","c","clearRect","strokeStyle","restore","c2","ctx2","getPos","e","clientX","left","clientY","top","down","pos","ctx1","corners","parse","includes","move","target","origHandle","opposite","sx","sy","k","coord","startsWith","o","off","shiftKey","up","newShape","finishPoly","finishCurve","onKeyDown","ctrlKey","key","toLowerCase","action","pop","filter","idx","indices","splice","deleted","indexOf","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","_c2","$RefreshReg$"],"sources":["/home/nightsquid/Desktop/GUI II/studyspace/src/components/Canvas.js"],"sourcesContent":["import React, { forwardRef, useImperativeHandle, useRef, useEffect, useState } from \"react\";\nimport { jsPDF } from \"jspdf\";\nimport \"../css/canvas.css\";\n\n// --- Helper Functions ---\n// Compute bounding box for any shape\nfunction getBBox(shape) {\n    if (shape.points) {\n        const xs = shape.points.map(p => p.x);\n        const ys = shape.points.map(p => p.y);\n        return {\n            xMin: Math.min(...xs),\n            yMin: Math.min(...ys),\n            xMax: Math.max(...xs),\n            yMax: Math.max(...ys)\n        };\n    }\n    if (shape.tool === \"circle\") {\n        const cx = shape.x0, cy = shape.y0;\n        if (shape.isCircle) {\n            const r = Math.hypot(shape.x1 - shape.x0, shape.y1 - shape.y0);\n            return { xMin: cx - r, yMin: cy - r, xMax: cx + r, yMax: cy + r };\n        } else {\n            const rx = Math.abs(shape.x1 - shape.x0);\n            const ry = Math.abs(shape.y1 - shape.y0);\n            return { xMin: cx - rx, yMin: cy - ry, xMax: cx + rx, yMax: cy + ry };\n        }\n    }\n    if (shape.tool === \"polygon\") {\n        const cx = shape.x0;\n        const cy = shape.y0;\n        const radius = Math.hypot(shape.x1 - shape.x0, shape.y1 - shape.y0);\n        const sides = 5;  // match your drawShape logic\n        const xs = [];\n        const ys = [];\n        for (let i = 0; i < sides; i++) {\n            const ang = i * (2 * Math.PI / sides) - Math.PI / 2;\n            xs.push(cx + radius * Math.cos(ang));\n            ys.push(cy + radius * Math.sin(ang));\n        }\n        return {\n            xMin: Math.min(...xs),\n            yMin: Math.min(...ys),\n            xMax: Math.max(...xs),\n            yMax: Math.max(...ys)\n        };\n    }\n    if (shape.tool === \"square\" && shape.isSquare) {\n        const dx = shape.x1 - shape.x0;\n        const dy = shape.y1 - shape.y0;\n        const side = Math.min(Math.abs(dx), Math.abs(dy));\n        const w = dx < 0 ? -side : side;\n        const h = dy < 0 ? -side : side;\n\n        const xA = shape.x0;\n        const yA = shape.y0;\n        const xB = shape.x0 + w;\n        const yB = shape.y0 + h;\n\n        return {\n            xMin: Math.min(xA, xB),\n            yMin: Math.min(yA, yB),\n            xMax: Math.max(xA, xB),\n            yMax: Math.max(yA, yB)\n        };\n    }\n    return {\n        xMin: Math.min(shape.x0, shape.x1),\n        yMin: Math.min(shape.y0, shape.y1),\n        xMax: Math.max(shape.x0, shape.x1),\n        yMax: Math.max(shape.y0, shape.y1)\n    };\n}\n\n// Hit-test a point against any shape (strokes for lines, box for others)\nfunction hitTest(ctx, shape, x, y, defaultStroke) {\n    const path = new Path2D();\n    ctx.lineWidth = (shape.strokeWidth || defaultStroke) + 8;\n    switch (shape.tool) {\n        case \"line\":\n            path.moveTo(shape.x0, shape.y0);\n            path.lineTo(shape.x1, shape.y1);\n            return ctx.isPointInStroke(path, x, y);\n        case \"poly-line\":\n        case \"curve\":\n            if (shape.points && shape.points.length > 1) {\n                path.moveTo(shape.points[0].x, shape.points[0].y);\n                for (let p of shape.points.slice(1)) path.lineTo(p.x, p.y);\n                return ctx.isPointInStroke(path, x, y);\n            }\n            return false;\n        default:\n            const { xMin, yMin, xMax, yMax } = getBBox(shape);\n            return x >= xMin && x <= xMax && y >= yMin && y <= yMax;\n    }\n}\n\n// Draw a shape onto the canvas context\nfunction drawShape(ctx, shape, offsetX = 0, offsetY = 0) {\n    const x0 = shape.x0 + offsetX;\n    const y0 = shape.y0 + offsetY;\n    const x1 = shape.x1 + offsetX;\n    const y1 = shape.y1 + offsetY;\n\n    const cx = (shape.x0 + shape.x1) / 2 + offsetX;\n    const cy = (shape.y0 + shape.y1) / 2 + offsetY;\n\n    ctx.save();\n    ctx.translate(cx, cy);\n    ctx.rotate(shape.rotation || 0);\n    ctx.translate(-cx, -cy);\n\n    switch (shape.tool) {\n        case \"square\": {\n            const dx = shape.x1 - shape.x0;\n            const dy = shape.y1 - shape.y0;\n            let w, h;\n            if (shape.isSquare) {\n                const side = Math.min(Math.abs(dx), Math.abs(dy));\n                w = dx < 0 ? -side : side;\n                h = dy < 0 ? -side : side;\n            } else {\n                w = dx;\n                h = dy;\n            }\n            ctx.fillRect(shape.x0 + offsetX, shape.y0 + offsetY, w, h);\n            ctx.strokeRect(shape.x0 + offsetX, shape.y0 + offsetY, w, h);\n            return;\n        }\n        case \"line\":\n            ctx.beginPath();\n            ctx.moveTo(x0, y0);\n            ctx.lineTo(x1, y1);\n            ctx.stroke();\n            return;\n        case \"circle\":\n            ctx.beginPath();\n            if (shape.isCircle) {\n                const r = Math.hypot(shape.x1 - shape.x0, shape.y1 - shape.y0);\n                ctx.arc(x0, y0, r, 0, 2 * Math.PI);\n            } else {\n                ctx.ellipse(x0, y0, Math.abs(shape.x1 - shape.x0), Math.abs(shape.y1 - shape.y0), 0, 0, 2 * Math.PI);\n            }\n            ctx.fill();\n            ctx.stroke();\n            return;\n        case \"triangle\":\n            ctx.beginPath();\n            ctx.moveTo(x0, y0);\n            ctx.lineTo(x1, y0);\n            ctx.lineTo((x0 + x1) / 2, y1);\n            ctx.closePath();\n            ctx.fill();\n            ctx.stroke();\n            return;\n        case \"polygon\":\n            ctx.beginPath();\n            const sides = 5;\n            const radius = Math.hypot(shape.x1 - shape.x0, shape.y1 - shape.y0);\n            for (let i = 0; i < sides; i++) {\n                const ang = i * (2 * Math.PI / sides) - Math.PI / 2;\n                const px = shape.x0 + offsetX + radius * Math.cos(ang);\n                const py = shape.y0 + offsetY + radius * Math.sin(ang);\n                if (i === 0) ctx.moveTo(px, py);\n                else ctx.lineTo(px, py);\n            }\n            ctx.closePath();\n            ctx.fill();\n            ctx.stroke();\n            return;\n        case \"poly-line\":\n            if (shape.points && shape.points.length) {\n                ctx.beginPath();\n                ctx.moveTo(shape.points[0].x + offsetX, shape.points[0].y + offsetY);\n                for (let p of shape.points.slice(1)) ctx.lineTo(p.x + offsetX, p.y + offsetY);\n                ctx.stroke();\n            }\n            return;\n        case \"curve\":\n            if (shape.points && shape.points.length) {\n                ctx.beginPath();\n                const pts = shape.points;\n                ctx.moveTo(pts[0].x + offsetX, pts[0].y + offsetY);\n                for (let i = 1; i < pts.length; i++) {\n                    const prev = pts[i - 1];\n                    const curr = pts[i];\n                    const mx = (prev.x + curr.x) / 2 + offsetX;\n                    const my = (prev.y + curr.y) / 2 + offsetY;\n                    ctx.quadraticCurveTo(prev.x + offsetX, prev.y + offsetY, mx, my);\n                }\n\n                const last = pts[pts.length - 1];\n                ctx.lineTo(last.x + offsetX, last.y + offsetY);\n\n                ctx.stroke();\n            }\n            return;\n        default:\n            return;\n    }\n}\n\n// Draw selection handles\nfunction drawSelection(ctx, shape, offsetX = 0, offsetY = 0) {\n    const R = 5;\n    if (shape.tool === \"line\") {\n        const p0 = { x: shape.x0 + offsetX, y: shape.y0 + offsetY };\n        const p1 = { x: shape.x1 + offsetX, y: shape.y1 + offsetY };\n        ctx.beginPath(); ctx.moveTo(p0.x, p0.y); ctx.lineTo(p1.x, p1.y); ctx.stroke();\n        [p0, p1].forEach(pt => {\n            ctx.beginPath(); ctx.arc(pt.x, pt.y, R, 0, 2 * Math.PI); ctx.fill(); ctx.stroke();\n        });\n        return;\n    }\n    const { xMin, yMin, xMax, yMax } = getBBox(shape);\n    const midX = (xMin + xMax) / 2;\n    const rotY = yMin - 20;    \n    ctx.beginPath();\n    ctx.moveTo(midX, yMin);\n    ctx.lineTo(midX, rotY);\n    ctx.stroke();\n\n    // circle grip\n    ctx.beginPath();\n    ctx.arc(midX, rotY, R, 0, 2 * Math.PI);\n    ctx.fill();\n    ctx.stroke();\n    ctx.strokeRect(xMin, yMin, xMax - xMin, yMax - yMin);\n    ctx.fillStyle = \"white\";\n    [\n        { x: xMin, y: yMin },\n        { x: xMax, y: yMin },\n        { x: xMax, y: yMax },\n        { x: xMin, y: yMax }\n    ].forEach(pt => {\n        ctx.beginPath(); ctx.arc(pt.x, pt.y, R, 0, 2 * Math.PI); ctx.fill(); ctx.stroke();\n    });\n}\n\nconst Canvas = forwardRef(({ activeTool, lineColor, fillColor, strokeWidth }, ref) => {\n    const containerRef = useRef(null);\n    const c1Ref = useRef(null);\n    const c2Ref = useRef(null);\n    const shapesRef = useRef([]);\n    const undoStack = useRef([]);\n    const redoStack = useRef([]);\n    const polyRef = useRef([]);\n    const curveRef = useRef([]);\n    const [isDrawing, setIsDrawing] = useState(false);\n    const [startPos, setStartPos] = useState({ x: 0, y: 0 });\n    const dragRef = useRef({ \n        isDragging: false,\n        isResizing: false,\n        prevPos: { x: 0, y: 0 },\n        shapeIndex: null,\n        handleIndex: null,\n        origShape: null\n     });\n\n    useImperativeHandle(ref, () => ({\n        exportShapes: () => {\n            shapesRef.current.forEach(s => (s.selected = false));\n            const data = JSON.stringify(shapesRef.current, null, 2);\n            const blob = new Blob([data], { type: \"application/json\" });\n            const url = URL.createObjectURL(blob);\n            const a = document.createElement(\"a\");\n            a.href = url; a.download = \"shapes.json\"; a.click();\n            URL.revokeObjectURL(url);\n        },\n        downloadJPEG: () => {\n            shapesRef.current.forEach(s => (s.selected = false));\n            const shapes = shapesRef.current;\n            const pad = 20;\n            let minX = Infinity, minY = Infinity;\n            let maxX = -Infinity, maxY = -Infinity;\n            shapes.forEach(s => {\n                if (s.tool === \"circle\" || s.tool === \"polygon\") {\n                    const r = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n                    minX = Math.min(minX, s.x0 - r);\n                    maxX = Math.max(maxX, s.x0 + r);\n                    minY = Math.min(minY, s.y0 - r);\n                    maxY = Math.max(maxY, s.y0 + r);\n                } else {\n                    minX = Math.min(minX, s.x0, s.x1);\n                    maxX = Math.max(maxX, s.x0, s.x1);\n                    minY = Math.min(minY, s.y0, s.y1);\n                    maxY = Math.max(maxY, s.y0, s.y1);\n                }\n            });\n            if (minX === Infinity) {\n                minX = 0; minY = 0;\n                maxX = c1Ref.current.width;\n                maxY = c1Ref.current.height;\n            }\n            minX -= pad; minY -= pad; maxX += pad; maxY += pad;\n            const sw = maxX - minX;\n            const sh = maxY - minY;\n            const tmp = document.createElement(\"canvas\");\n            tmp.width = sw; tmp.height = sh;\n            redrawAll({ current: tmp }, -minX, -minY, \"#ffffff\");\n            const dataURL = tmp.toDataURL(\"image/jpeg\", 1.0);\n            const link = document.createElement(\"a\");\n            link.href = dataURL;\n            link.download = \"shapes.jpg\";\n            link.click();\n        },\n        downloadPDF: () => {\n            shapesRef.current.forEach(s => (s.selected = false));\n            const shapes = shapesRef.current;\n            const pad = 20;\n            let minX = Infinity, minY = Infinity;\n            let maxX = -Infinity, maxY = -Infinity;\n            shapes.forEach(s => {\n                if (s.tool === \"circle\" || s.tool === \"polygon\") {\n                    const r = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n                    minX = Math.min(minX, s.x0 - r);\n                    maxX = Math.max(maxX, s.x0 + r);\n                    minY = Math.min(minY, s.y0 - r);\n                    maxY = Math.max(maxY, s.y0 + r);\n                } else {\n                    minX = Math.min(minX, s.x0, s.x1);\n                    maxX = Math.max(maxX, s.x0, s.x1);\n                    minY = Math.min(minY, s.y0, s.y1);\n                    maxY = Math.max(maxY, s.y0, s.y1);\n                }\n            });\n            if (minX === Infinity) {\n                minX = 0; minY = 0;\n                maxX = c1Ref.current.width;\n                maxY = c1Ref.current.height;\n            }\n            minX -= pad; minY -= pad; maxX += pad; maxY += pad;\n            const sw = maxX - minX;\n            const sh = maxY - minY;\n            const tmp = document.createElement(\"canvas\");\n            tmp.width = sw; tmp.height = sh;\n            redrawAll({ current: tmp }, -minX, -minY, \"#ffffff\");\n            const orientation = sw > sh ? \"landscape\" : \"portrait\";\n            const pdf = new jsPDF({ orientation, unit: \"px\", format: \"a4\" });\n            const pageW = pdf.internal.pageSize.getWidth();\n            const pageH = pdf.internal.pageSize.getHeight();\n            const scale = Math.min(pageW / sw, pageH / sh);\n            let yOffset = 0;\n            while (yOffset < sh) {\n                const sliceH = Math.min(sh - yOffset, pageH / scale);\n                const slice = document.createElement(\"canvas\");\n                slice.width = sw; slice.height = sliceH;\n                slice.getContext(\"2d\").drawImage(\n                    tmp,\n                    0, yOffset, sw, sliceH,\n                    0, 0, sw, sliceH\n                );\n                const imgData = slice.toDataURL(\"image/jpeg\", 1.0);\n                const imgW = sw * scale, imgH = sliceH * scale;\n                const xPos = (pageW - imgW) / 2;\n                pdf.addImage(imgData, \"JPEG\", xPos, 0, imgW, imgH);\n                yOffset += sliceH;\n                if (yOffset < sh) pdf.addPage();\n            }\n            pdf.save(\"shapes.pdf\");\n        },\n        loadShapes: (arr) => { shapesRef.current = arr.map(s => ({ ...s, selected: false })); redrawAll(); },\n        getShapeCount: () => shapesRef.current.length,\n        clearShapes: () => { shapesRef.current = []; redrawAll(); }\n    }));\n\n    useEffect(() => {\n        const resize = () => {\n            const { width, height } = containerRef.current.getBoundingClientRect();\n            [c1Ref, c2Ref].forEach(r => { r.current.width = width; r.current.height = height; });\n            redrawAll();\n        };\n        resize(); window.addEventListener(\"resize\", resize);\n        return () => window.removeEventListener(\"resize\", resize);\n    }, []);\n\n    useEffect(() => {\n        let dirty = false;\n        shapesRef.current.forEach(s => {\n            if (s.selected && (s.strokeWidth !== strokeWidth || s.lineColor !== lineColor || s.fillColor !== fillColor)) {\n                s.strokeWidth = strokeWidth;\n                s.lineColor = lineColor;\n                s.fillColor = fillColor;\n                dirty = true;\n            }\n        });\n        if (dirty) redrawAll();\n    }, [strokeWidth, lineColor, fillColor]);\n\n    function redrawAll(context = c1Ref, offsetX = 0, offsetY = 0, backgroundColor = \"#979797\") {\n        const c = context.current;\n        const ctx = c.getContext(\"2d\");\n        ctx.clearRect(0, 0, c.width, c.height);\n        ctx.fillStyle = backgroundColor;\n        ctx.fillRect(0, 0, c.width, c.height);\n        shapesRef.current.forEach(s => {\n            ctx.save();\n            ctx.strokeStyle = s.lineColor || lineColor;\n            ctx.fillStyle = s.fillColor || fillColor;\n            ctx.lineWidth = s.strokeWidth || strokeWidth;\n            drawShape(ctx, s, offsetX, offsetY);\n            if (s.selected) {\n                ctx.save(); ctx.strokeStyle = \"#ff7300\"; ctx.lineWidth = 2;\n                drawSelection(ctx, s, offsetX, offsetY);\n                ctx.restore();\n            }\n            ctx.restore();\n        });\n    }\n\n    useEffect(() => {\n        const c2 = c2Ref.current;\n        const ctx2 = c2.getContext(\"2d\");\n        const getPos = e => {\n            const r = c2.getBoundingClientRect();\n            return { x: e.clientX - r.left, y: e.clientY - r.top };\n        };\n\n        const down = e => {\n            const pos = getPos(e);\n            if (activeTool === \"cursor\") {\n                const ctx1 = c1Ref.current.getContext(\"2d\");\n                // clear previous selection\n                shapesRef.current.forEach(sh => sh.selected = false);\n\n                // walk shapes in reverse z-order\n                for (let i = shapesRef.current.length - 1; i >= 0; i--) {\n                    const s = shapesRef.current[i];\n                    if (!hitTest(ctx1, s, pos.x, pos.y, strokeWidth)) continue;\n\n                    // 1) check for a corner-drag first\n                    const { xMin, yMin, xMax, yMax } = getBBox(s);\n                    const corners = [\n                        { x: xMin, y: yMin },\n                        { x: xMax, y: yMin },\n                        { x: xMax, y: yMax },\n                        { x: xMin, y: yMax }\n                    ];\n                    for (let h = 0; h < corners.length; h++) {\n                        const dx = pos.x - corners[h].x;\n                        const dy = pos.y - corners[h].y;\n                        if (Math.hypot(dx, dy) < 6) {        // inside handle radius\n                            s.selected = true;\n                            dragRef.current = {\n                                isResizing: true,\n                                shapeIndex: i,\n                                handleIndex: h,\n                                origShape: JSON.parse(JSON.stringify(s))\n                            };\n                            redrawAll();\n                            return;  // don’t start a move-drag\n                        }\n                    }\n\n                    // 2) if no corner, it’s a normal drag\n                    s.selected = true;\n                    dragRef.current = {\n                        isDragging: true,\n                        prevPos: pos,\n                        shapeIndex: i\n                    };\n                    redrawAll();\n                    return;\n                }\n\n                // clicked on empty space\n                redrawAll();\n                return;\n            }\n            if (activeTool === \"poly-line\") { polyRef.current.push(pos); setIsDrawing(true); return; }\n            if (activeTool === \"curve\") { curveRef.current.push(pos); setIsDrawing(true); return; }\n            if (![\"square\", \"line\", \"circle\", \"triangle\", \"polygon\"].includes(activeTool)) return;\n            setStartPos(pos);\n            setIsDrawing(true);\n        };\n\n        const move = e => {\n            const pos = getPos(e);\n            if (dragRef.current.isResizing) {\n                const { shapeIndex, handleIndex, origShape } = dragRef.current;\n                const target = shapesRef.current[shapeIndex];\n                const pos = getPos(e);             // current mouse\n                const { xMin, yMin, xMax, yMax } = getBBox(origShape);\n                const corners = [\n                    { x: xMin, y: yMin },\n                    { x: xMax, y: yMin },\n                    { x: xMax, y: yMax },\n                    { x: xMin, y: yMax }\n                ];\n                const origHandle = corners[handleIndex];\n                const opposite = corners[(handleIndex + 2) % 4];\n\n                if (origShape.tool === \"line\") {\n                    // for lines, just drag one endpoint\n                    if (handleIndex === 0) {\n                        target.x0 = pos.x; target.y0 = pos.y;\n                    } else {\n                        target.x1 = pos.x; target.y1 = pos.y;\n                    }\n                } else if (origShape.tool === \"circle\" || origShape.tool === \"polygon\") {\n                    // if you want perfect circle lock, compute r = hypot(...)\n                    // but even for ellipses, you can just set the handle\n                    target.x1 = pos.x;\n                    target.y1 = pos.y;\n                    redrawAll();\n                    return;\n                } else {\n                    // for everything else, scale about the opposite corner\n                    const sx = (pos.x - opposite.x) / (origHandle.x - opposite.x);\n                    const sy = (pos.y - opposite.y) / (origHandle.y - opposite.y);\n\n                    if (origShape.points) {\n                        // poly‐line & curve: scale each point\n                        target.points = origShape.points.map(p => ({\n                            x: opposite.x + (p.x - opposite.x) * sx,\n                            y: opposite.y + (p.y - opposite.y) * sy\n                        }));\n                    } else {\n                        // x0/y0 and x1/y1 shapes (rect, circle, square, triangle, polygon)\n                        [\"x0\", \"y0\", \"x1\", \"y1\"].forEach(k => {\n                            const coord = k.startsWith(\"x\") ? \"x\" : \"y\";\n                            const o = origShape[k];\n                            const off = opposite[coord];\n                            target[k] = off + (o - off) * (coord === \"x\" ? sx : sy);\n                        });\n                    }\n                }\n\n                redrawAll();\n                return;\n            }\n            if (activeTool === \"cursor\" && dragRef.current.isDragging) {\n                const dx = pos.x - dragRef.current.prevPos.x;\n                const dy = pos.y - dragRef.current.prevPos.y;\n                const s = shapesRef.current[dragRef.current.shapeIndex];\n                if (s.points) s.points.forEach(p => { p.x += dx; p.y += dy; });\n                else { s.x0 += dx; s.y0 += dy; s.x1 += dx; s.y1 += dy; }\n                dragRef.current.prevPos = pos;\n                redrawAll(); return;\n            }\n            if (activeTool === \"poly-line\" && polyRef.current.length) {\n                ctx2.clearRect(0, 0, c2.width, c2.height);\n                ctx2.strokeStyle = lineColor; ctx2.lineWidth = strokeWidth;\n                ctx2.beginPath(); ctx2.moveTo(polyRef.current[0].x, polyRef.current[0].y);\n                for (let p of polyRef.current.slice(1)) ctx2.lineTo(p.x, p.y);\n                ctx2.lineTo(pos.x, pos.y); ctx2.stroke(); return;\n            }\n            if (activeTool === \"curve\" && curveRef.current.length) {\n                ctx2.clearRect(0, 0, c2.width, c2.height);\n                const pts = [...curveRef.current, pos];\n                const shape = {\n                    tool: \"curve\",\n                    points: pts,\n                    strokeWidth,\n                    lineColor,\n                };\n                ctx2.lineWidth = shape.strokeWidth;\n                ctx2.strokeStyle = shape.lineColor;\n                drawShape(ctx2, shape, 0, 0);\n                return;\n            }\n            if (!isDrawing) return;\n            ctx2.clearRect(0, 0, c2.width, c2.height);\n            const { x, y } = pos;\n\n            const shape = {\n                tool: activeTool,\n                x0: startPos.x,\n                y0: startPos.y,\n                x1: x,\n                y1: y,\n                isSquare: e.shiftKey && activeTool === \"square\",\n                isCircle: e.shiftKey && activeTool === \"circle\",\n                strokeWidth: 1,\n                lineColor: \"black\",\n                fillColor: \"transparent\"\n            }\n            ctx2.fillStyle = shape.fillColor;\n            ctx2.strokeStyle = shape.lineColor;\n            ctx2.lineWidth = shape.strokeWidth;\n\n            drawShape(ctx2, shape, 0, 0);\n        };\n\n        const up = e => {\n            if (dragRef.current.isResizing) {\n                dragRef.current.isResizing = false;\n                dragRef.current.handleIndex = null;\n                dragRef.current.origShape = null;\n                return;\n            }\n            if (activeTool === \"cursor\" && dragRef.current.isDragging) {\n                dragRef.current.isDragging = false;\n                dragRef.current.shapeIndex = null;\n                return;\n            }\n            if ([\"poly-line\", \"curve\"].includes(activeTool)) return;\n            if (!isDrawing) return;\n            const pos = getPos(e);\n            if (pos.x === startPos.x && pos.y === startPos.y) {\n                ctx2.clearRect(0, 0, c2.width, c2.height);\n                setIsDrawing(false);\n                return;\n            }\n            const isCircle = activeTool === \"circle\" && e.shiftKey;\n            const isSquare = activeTool === \"square\" && e.shiftKey;\n\n            const newShape = {\n                tool: activeTool,\n                x0: startPos.x, y0: startPos.y,\n                x1: pos.x, y1: pos.y,\n                lineColor, fillColor, strokeWidth,\n                isCircle, isSquare,\n                rotation: 0,\n                selected: false\n            };\n\n            shapesRef.current.push(newShape);\n\n            undoStack.current.push({ type: 'add', shapes: [newShape] });\n            // clear redoStack because it's a brand-new action\n            redoStack.current = [];\n\n            shapesRef.current.forEach(s => (s.selected = false));\n            shapesRef.current[shapesRef.current.length - 1].selected = true;\n            redrawAll();\n            ctx2.clearRect(0, 0, c2.width, c2.height);\n            setIsDrawing(false);\n        };\n\n        const finishPoly = e => {\n            if (activeTool !== \"poly-line\" || polyRef.current.length < 2) return;\n            const newShape = { \n                tool: \"poly-line\", \n                points: polyRef.current.slice(), \n                lineColor, fillColor, strokeWidth, \n                selected: false \n            };\n            shapesRef.current.push(newShape);\n\n            undoStack.current.push({ type: 'add', shapes: [newShape] });\n            // clear redoStack because it's a brand-new action\n            redoStack.current = [];\n\n            shapesRef.current.forEach(s => (s.selected = false));\n            shapesRef.current[shapesRef.current.length - 1].selected = true;\n            redrawAll();\n            ctx2.clearRect(0, 0, c2.width, c2.height);\n            polyRef.current = [];\n        };\n\n        const finishCurve = e => {\n            if (activeTool !== \"curve\" || curveRef.current.length < 2) return;\n\n            // 1. capture the final click\n            const pos = getPos(e);\n            curveRef.current.push(pos);\n\n            // 2. push the full point list\n            const newShape = {\n                tool: \"curve\",\n                points: curveRef.current.slice(),\n                lineColor, fillColor, strokeWidth,\n                selected: false\n            };\n            shapesRef.current.push(newShape);\n\n            undoStack.current.push({ type: 'add', shapes: [newShape] });\n            // clear redoStack because it's a brand-new action\n            redoStack.current = [];\n\n            // 3. rest stays the same\n            shapesRef.current.forEach(s => (s.selected = false));\n            shapesRef.current[shapesRef.current.length - 1].selected = true;\n            redrawAll();\n            ctx2.clearRect(0, 0, c2.width, c2.height);\n\n            // 4. reset\n            curveRef.current = [];\n            setIsDrawing(false);\n        };\n\n        const onKeyDown = e => {\n            if (e.ctrlKey && !e.shiftKey && e.key.toLowerCase() === 'z') {\n                const action = undoStack.current.pop();\n                if (!action) return;\n\n                if (action.type === 'add') {\n                    // remove the shape(s) that were added\n                    shapesRef.current = shapesRef.current.filter(\n                        s => !action.shapes.includes(s)\n                    );\n                } else if (action.type === 'delete') {\n                    // re‐insert deleted shapes at their original positions\n                    action.shapes.forEach((shape, i) => {\n                        const idx = action.indices[i];\n                        shapesRef.current.splice(idx, 0, shape);\n                    });\n                }\n\n                redoStack.current.push(action);\n                redrawAll();\n            }\n\n            // REDO\n            else if (e.ctrlKey && e.shiftKey && e.key.toLowerCase() === 'z') {\n                const action = redoStack.current.pop();\n                if (!action) return;\n\n                if (action.type === 'add') {\n                    // re‐add those shapes\n                    shapesRef.current.push(...action.shapes);\n                } else if (action.type === 'delete') {\n                    // re‐delete them\n                    shapesRef.current = shapesRef.current.filter(\n                        s => !action.shapes.includes(s)\n                    );\n                }\n\n                undoStack.current.push(action);\n                redrawAll();\n            }\n            else if (e.key === \"Delete\"){\n                const deleted = shapesRef.current.filter(s => s.selected);\n                if (deleted.length) {\n                    // remember their original indices if you care about insert order:\n                    const indices = deleted.map(s => shapesRef.current.indexOf(s));\n                    shapesRef.current = shapesRef.current.filter(s => !s.selected);\n                    undoStack.current.push({ type: 'delete', shapes: deleted, indices });\n                    redoStack.current = [];\n                    redrawAll();\n                }\n            }\n        };\n\n        c2.addEventListener(\"mousedown\", down);\n        c2.addEventListener(\"mousemove\", move);\n        c2.addEventListener(\"mouseup\", up);\n        c2.addEventListener(\"dblclick\", finishPoly);\n        c2.addEventListener(\"dblclick\", finishCurve);\n        window.addEventListener(\"keydown\", onKeyDown);\n        return () => {\n            c2.removeEventListener(\"mousedown\", down);\n            c2.removeEventListener(\"mousemove\", move);\n            c2.removeEventListener(\"mouseup\", up);\n            c2.removeEventListener(\"dblclick\", finishPoly);\n            c2.removeEventListener(\"dblclick\", finishCurve);\n            window.removeEventListener(\"keydown\", onKeyDown);\n        };\n    }, [activeTool, isDrawing, startPos, lineColor, fillColor, strokeWidth]);\n\n    return (\n        <div ref={containerRef} className=\"canvas-container\">\n            <canvas ref={c1Ref} />\n            <canvas ref={c2Ref} style={{ backgroundColor: \"transparent\" }} />\n        </div>\n    );\n});\n\nexport default Canvas;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}