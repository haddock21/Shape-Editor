{"ast":null,"code":"var _jsxFileName = \"/home/nightsquid/Desktop/Graphics 1/Shape-Editor/src/components/Canvas.js\",\n  _s = $RefreshSig$();\nimport React, { forwardRef, useImperativeHandle, useRef, useEffect, useState } from \"react\";\nimport { jsPDF } from \"jspdf\";\nimport \"../css/canvas.css\";\n\n// --- Helper Functions ---\n\n// Draw a uniform grid of given cell size\n// Draw a uniform grid of given cell size\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction drawGrid(ctx, width, height, cell) {\n  ctx.save();\n  ctx.beginPath();\n  ctx.strokeStyle = \"#ffffff88\"; // light grey grid\n  ctx.lineWidth = .5;\n  // vertical\n  for (let x = 0; x <= width; x += cell) {\n    ctx.moveTo(x, 0);\n    ctx.lineTo(x, height);\n  }\n  // horizontal\n  for (let y = 0; y <= height; y += cell) {\n    ctx.moveTo(0, y);\n    ctx.lineTo(width, y);\n  }\n  ctx.stroke();\n  ctx.restore();\n}\n\n// Compute bounding box for any shape\nfunction getBBox(shape) {\n  if (shape.points) {\n    const xs = shape.points.map(p => p.x);\n    const ys = shape.points.map(p => p.y);\n    return {\n      xMin: Math.min(...xs),\n      yMin: Math.min(...ys),\n      xMax: Math.max(...xs),\n      yMax: Math.max(...ys)\n    };\n  }\n  if (shape.tool === \"circle\") {\n    const cx = shape.x0,\n      cy = shape.y0;\n    if (shape.isCircle) {\n      const r = Math.hypot(shape.x1 - shape.x0, shape.y1 - shape.y0);\n      return {\n        xMin: cx - r,\n        yMin: cy - r,\n        xMax: cx + r,\n        yMax: cy + r\n      };\n    } else {\n      const rx = Math.abs(shape.x1 - shape.x0);\n      const ry = Math.abs(shape.y1 - shape.y0);\n      return {\n        xMin: cx - rx,\n        yMin: cy - ry,\n        xMax: cx + rx,\n        yMax: cy + ry\n      };\n    }\n  }\n  if (shape.tool === \"polygon\") {\n    const cx = shape.x0;\n    const cy = shape.y0;\n    const radius = Math.hypot(shape.x1 - shape.x0, shape.y1 - shape.y0);\n    const sides = 5; // match your drawShape logic\n    const xs = [];\n    const ys = [];\n    for (let i = 0; i < sides; i++) {\n      const ang = i * (2 * Math.PI / sides) - Math.PI / 2;\n      xs.push(cx + radius * Math.cos(ang));\n      ys.push(cy + radius * Math.sin(ang));\n    }\n    return {\n      xMin: Math.min(...xs),\n      yMin: Math.min(...ys),\n      xMax: Math.max(...xs),\n      yMax: Math.max(...ys)\n    };\n  }\n  if (shape.tool === \"square\" && shape.isSquare) {\n    const dx = shape.x1 - shape.x0;\n    const dy = shape.y1 - shape.y0;\n    const side = Math.min(Math.abs(dx), Math.abs(dy));\n    const w = dx < 0 ? -side : side;\n    const h = dy < 0 ? -side : side;\n    const xA = shape.x0;\n    const yA = shape.y0;\n    const xB = shape.x0 + w;\n    const yB = shape.y0 + h;\n    return {\n      xMin: Math.min(xA, xB),\n      yMin: Math.min(yA, yB),\n      xMax: Math.max(xA, xB),\n      yMax: Math.max(yA, yB)\n    };\n  }\n  return {\n    xMin: Math.min(shape.x0, shape.x1),\n    yMin: Math.min(shape.y0, shape.y1),\n    xMax: Math.max(shape.x0, shape.x1),\n    yMax: Math.max(shape.y0, shape.y1)\n  };\n}\n\n// Hit-test a point against any shape (strokes for lines, box for others)\nfunction hitTest(ctx, shape, x, y, defaultStroke) {\n  const path = new Path2D();\n  ctx.lineWidth = (shape.strokeWidth || defaultStroke) + 8;\n  switch (shape.tool) {\n    case \"line\":\n      path.moveTo(shape.x0, shape.y0);\n      path.lineTo(shape.x1, shape.y1);\n      return ctx.isPointInStroke(path, x, y);\n    case \"poly-line\":\n    case \"curve\":\n      if (shape.points && shape.points.length > 1) {\n        path.moveTo(shape.points[0].x, shape.points[0].y);\n        for (let p of shape.points.slice(1)) path.lineTo(p.x, p.y);\n        return ctx.isPointInStroke(path, x, y);\n      }\n      return false;\n    default:\n      const {\n        xMin,\n        yMin,\n        xMax,\n        yMax\n      } = getBBox(shape);\n      return x >= xMin && x <= xMax && y >= yMin && y <= yMax;\n  }\n}\n\n// Draw a shape onto the canvas context\nfunction drawShape(ctx, shape, offsetX = 0, offsetY = 0) {\n  const x0 = shape.x0 + offsetX;\n  const y0 = shape.y0 + offsetY;\n  const x1 = shape.x1 + offsetX;\n  const y1 = shape.y1 + offsetY;\n  const {\n    xMin,\n    yMin,\n    xMax,\n    yMax\n  } = getBBox(shape);\n  const cx = (xMin + xMax) / 2 + offsetX;\n  const cy = (yMin + yMax) / 2 + offsetY;\n  ctx.save();\n  ctx.translate(cx, cy);\n  ctx.rotate(shape.rotation || 0);\n  ctx.translate(-cx, -cy);\n  switch (shape.tool) {\n    case \"square\":\n      {\n        const dx = shape.x1 - shape.x0;\n        const dy = shape.y1 - shape.y0;\n        let w, h;\n        if (shape.isSquare) {\n          const side = Math.min(Math.abs(dx), Math.abs(dy));\n          w = dx < 0 ? -side : side;\n          h = dy < 0 ? -side : side;\n        } else {\n          w = dx;\n          h = dy;\n        }\n        ctx.fillRect(shape.x0 + offsetX, shape.y0 + offsetY, w, h);\n        ctx.strokeRect(shape.x0 + offsetX, shape.y0 + offsetY, w, h);\n        return;\n      }\n    case \"line\":\n      ctx.beginPath();\n      ctx.moveTo(x0, y0);\n      ctx.lineTo(x1, y1);\n      ctx.stroke();\n      return;\n    case \"circle\":\n      ctx.beginPath();\n      if (shape.isCircle) {\n        const r = Math.hypot(shape.x1 - shape.x0, shape.y1 - shape.y0);\n        ctx.arc(x0, y0, r, 0, 2 * Math.PI);\n      } else {\n        ctx.ellipse(x0, y0, Math.abs(shape.x1 - shape.x0), Math.abs(shape.y1 - shape.y0), 0, 0, 2 * Math.PI);\n      }\n      ctx.fill();\n      ctx.stroke();\n      return;\n    case \"triangle\":\n      ctx.beginPath();\n      ctx.moveTo(x0, y0);\n      ctx.lineTo(x1, y0);\n      ctx.lineTo((x0 + x1) / 2, y1);\n      ctx.closePath();\n      ctx.fill();\n      ctx.stroke();\n      return;\n    case \"polygon\":\n      ctx.beginPath();\n      const sides = 5;\n      const radius = Math.hypot(shape.x1 - shape.x0, shape.y1 - shape.y0);\n      for (let i = 0; i < sides; i++) {\n        const ang = i * (2 * Math.PI / sides) - Math.PI / 2;\n        const px = shape.x0 + offsetX + radius * Math.cos(ang);\n        const py = shape.y0 + offsetY + radius * Math.sin(ang);\n        if (i === 0) ctx.moveTo(px, py);else ctx.lineTo(px, py);\n      }\n      ctx.closePath();\n      ctx.fill();\n      ctx.stroke();\n      return;\n    case \"poly-line\":\n      if (shape.points && shape.points.length) {\n        ctx.beginPath();\n        ctx.moveTo(shape.points[0].x + offsetX, shape.points[0].y + offsetY);\n        for (let p of shape.points.slice(1)) ctx.lineTo(p.x + offsetX, p.y + offsetY);\n        ctx.stroke();\n      }\n      return;\n    case \"curve\":\n      if (shape.points && shape.points.length) {\n        ctx.beginPath();\n        const pts = shape.points;\n        ctx.moveTo(pts[0].x + offsetX, pts[0].y + offsetY);\n        for (let i = 1; i < pts.length; i++) {\n          const prev = pts[i - 1];\n          const curr = pts[i];\n          const mx = (prev.x + curr.x) / 2 + offsetX;\n          const my = (prev.y + curr.y) / 2 + offsetY;\n          ctx.quadraticCurveTo(prev.x + offsetX, prev.y + offsetY, mx, my);\n        }\n        const last = pts[pts.length - 1];\n        ctx.lineTo(last.x + offsetX, last.y + offsetY);\n        ctx.stroke();\n      }\n      return;\n    default:\n      ctx.save();\n      ctx.translate(cx, cy);\n      ctx.rotate(shape.rotation || 0);\n      ctx.translate(-cx, -cy);\n  }\n}\n\n// Draw selection handles\nfunction drawSelection(ctx, shape, offsetX = 0, offsetY = 0) {\n  const R = 5;\n  if (shape.tool === \"line\") {\n    const p0 = {\n      x: shape.x0 + offsetX,\n      y: shape.y0 + offsetY\n    };\n    const p1 = {\n      x: shape.x1 + offsetX,\n      y: shape.y1 + offsetY\n    };\n    ctx.fillStyle = \"white\";\n    ctx.fill();\n    ctx.beginPath();\n    ctx.moveTo(p0.x, p0.y);\n    ctx.lineTo(p1.x, p1.y);\n    ctx.stroke();\n    [p0, p1].forEach(pt => {\n      ctx.beginPath();\n      ctx.arc(pt.x, pt.y, R, 0, 2 * Math.PI);\n      ctx.fill();\n      ctx.stroke();\n    });\n    return;\n  }\n  const {\n    xMin,\n    yMin,\n    xMax,\n    yMax\n  } = getBBox(shape);\n  const midX = (xMin + xMax) / 2;\n  const rotY = yMin - 20;\n  ctx.beginPath();\n  ctx.moveTo(midX, yMin);\n  ctx.lineTo(midX, rotY);\n  ctx.stroke();\n\n  // circle grip\n  ctx.beginPath();\n  ctx.arc(midX, rotY, R, 0, 2 * Math.PI);\n  ctx.stroke();\n  ctx.strokeRect(xMin, yMin, xMax - xMin, yMax - yMin);\n  ctx.fillStyle = \"white\";\n  ctx.fill();\n  [{\n    x: xMin,\n    y: yMin\n  }, {\n    x: xMax,\n    y: yMin\n  }, {\n    x: xMax,\n    y: yMax\n  }, {\n    x: xMin,\n    y: yMax\n  }].forEach(pt => {\n    ctx.beginPath();\n    ctx.arc(pt.x, pt.y, R, 0, 2 * Math.PI);\n    ctx.fill();\n    ctx.stroke();\n  });\n}\nfunction rotatePoint(p, center, angle) {\n  const dx = p.x - center.x;\n  const dy = p.y - center.y;\n  return {\n    x: center.x + dx * Math.cos(angle) - dy * Math.sin(angle),\n    y: center.y + dx * Math.sin(angle) + dy * Math.cos(angle)\n  };\n}\nconst Canvas = /*#__PURE__*/_s(/*#__PURE__*/forwardRef(_c = _s(({\n  activeTool,\n  lineColor,\n  fillColor,\n  strokeWidth,\n  showGrid,\n  snapToGrid\n}, ref) => {\n  _s();\n  const containerRef = useRef(null);\n  const c1Ref = useRef(null);\n  const c2Ref = useRef(null);\n  const shapesRef = useRef([]);\n  const undoStack = useRef([]);\n  const redoStack = useRef([]);\n  const polyRef = useRef([]);\n  const curveRef = useRef([]);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [startPos, setStartPos] = useState({\n    x: 0,\n    y: 0\n  });\n  const dragRef = useRef({\n    isDragging: false,\n    isResizing: false,\n    prevPos: {\n      x: 0,\n      y: 0\n    },\n    shapeIndex: null,\n    handleIndex: null,\n    origShape: null,\n    origRotation: 0,\n    center: null,\n    startAngle: 0\n  });\n  const gridSize = 100; // match the same cell size you draw in drawGrid\n  const snap = ({\n    x,\n    y\n  }) => ({\n    x: Math.round(x / gridSize) * gridSize,\n    y: Math.round(y / gridSize) * gridSize\n  });\n  useImperativeHandle(ref, () => ({\n    exportShapes: () => {\n      shapesRef.current.forEach(s => s.selected = false);\n      const data = JSON.stringify(shapesRef.current, null, 2);\n      const blob = new Blob([data], {\n        type: \"application/json\"\n      });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement(\"a\");\n      a.href = url;\n      a.download = \"shapes.json\";\n      a.click();\n      URL.revokeObjectURL(url);\n    },\n    downloadJPEG: () => {\n      shapesRef.current.forEach(s => s.selected = false);\n      const shapes = shapesRef.current;\n      const pad = 20;\n      let minX = Infinity,\n        minY = Infinity;\n      let maxX = -Infinity,\n        maxY = -Infinity;\n      shapes.forEach(s => {\n        if (s.tool === \"circle\" || s.tool === \"polygon\") {\n          const r = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n          minX = Math.min(minX, s.x0 - r);\n          maxX = Math.max(maxX, s.x0 + r);\n          minY = Math.min(minY, s.y0 - r);\n          maxY = Math.max(maxY, s.y0 + r);\n        } else {\n          minX = Math.min(minX, s.x0, s.x1);\n          maxX = Math.max(maxX, s.x0, s.x1);\n          minY = Math.min(minY, s.y0, s.y1);\n          maxY = Math.max(maxY, s.y0, s.y1);\n        }\n      });\n      if (minX === Infinity) {\n        minX = 0;\n        minY = 0;\n        maxX = c1Ref.current.width;\n        maxY = c1Ref.current.height;\n      }\n      minX -= pad;\n      minY -= pad;\n      maxX += pad;\n      maxY += pad;\n      const sw = maxX - minX;\n      const sh = maxY - minY;\n      const tmp = document.createElement(\"canvas\");\n      tmp.width = sw;\n      tmp.height = sh;\n      redrawAll({\n        current: tmp\n      }, -minX, -minY, \"#ffffff\");\n      const dataURL = tmp.toDataURL(\"image/jpeg\", 1.0);\n      const link = document.createElement(\"a\");\n      link.href = dataURL;\n      link.download = \"shapes.jpg\";\n      link.click();\n    },\n    downloadPDF: () => {\n      shapesRef.current.forEach(s => s.selected = false);\n      const shapes = shapesRef.current;\n      const pad = 20;\n      let minX = Infinity,\n        minY = Infinity;\n      let maxX = -Infinity,\n        maxY = -Infinity;\n      shapes.forEach(s => {\n        if (s.tool === \"circle\" || s.tool === \"polygon\") {\n          const r = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n          minX = Math.min(minX, s.x0 - r);\n          maxX = Math.max(maxX, s.x0 + r);\n          minY = Math.min(minY, s.y0 - r);\n          maxY = Math.max(maxY, s.y0 + r);\n        } else {\n          minX = Math.min(minX, s.x0, s.x1);\n          maxX = Math.max(maxX, s.x0, s.x1);\n          minY = Math.min(minY, s.y0, s.y1);\n          maxY = Math.max(maxY, s.y0, s.y1);\n        }\n      });\n      if (minX === Infinity) {\n        minX = 0;\n        minY = 0;\n        maxX = c1Ref.current.width;\n        maxY = c1Ref.current.height;\n      }\n      minX -= pad;\n      minY -= pad;\n      maxX += pad;\n      maxY += pad;\n      const sw = maxX - minX;\n      const sh = maxY - minY;\n      const tmp = document.createElement(\"canvas\");\n      tmp.width = sw;\n      tmp.height = sh;\n      redrawAll({\n        current: tmp\n      }, -minX, -minY, \"#ffffff\");\n      const orientation = sw > sh ? \"landscape\" : \"portrait\";\n      const pdf = new jsPDF({\n        orientation,\n        unit: \"px\",\n        format: \"a4\"\n      });\n      const pageW = pdf.internal.pageSize.getWidth();\n      const pageH = pdf.internal.pageSize.getHeight();\n      const scale = Math.min(pageW / sw, pageH / sh);\n      let yOffset = 0;\n      while (yOffset < sh) {\n        const sliceH = Math.min(sh - yOffset, pageH / scale);\n        const slice = document.createElement(\"canvas\");\n        slice.width = sw;\n        slice.height = sliceH;\n        slice.getContext(\"2d\").drawImage(tmp, 0, yOffset, sw, sliceH, 0, 0, sw, sliceH);\n        const imgData = slice.toDataURL(\"image/jpeg\", 1.0);\n        const imgW = sw * scale,\n          imgH = sliceH * scale;\n        const xPos = (pageW - imgW) / 2;\n        pdf.addImage(imgData, \"JPEG\", xPos, 0, imgW, imgH);\n        yOffset += sliceH;\n        if (yOffset < sh) pdf.addPage();\n      }\n      pdf.save(\"shapes.pdf\");\n    },\n    loadShapes: arr => {\n      shapesRef.current = arr.map(s => ({\n        ...s,\n        selected: false\n      }));\n      redrawAll();\n    },\n    getShapeCount: () => shapesRef.current.length,\n    clearShapes: () => {\n      shapesRef.current = [];\n      redrawAll();\n    }\n  }));\n  useEffect(() => {\n    const resize = () => {\n      const {\n        width,\n        height\n      } = containerRef.current.getBoundingClientRect();\n      [c1Ref, c2Ref].forEach(r => {\n        r.current.width = width;\n        r.current.height = height;\n      });\n      redrawAll();\n    };\n    resize();\n    window.addEventListener(\"resize\", resize);\n    return () => window.removeEventListener(\"resize\", resize);\n  }, []);\n  useEffect(() => {\n    let dirty = false;\n    shapesRef.current.forEach(s => {\n      if (s.selected && (s.strokeWidth !== strokeWidth || s.lineColor !== lineColor || s.fillColor !== fillColor)) {\n        s.strokeWidth = strokeWidth;\n        s.lineColor = lineColor;\n        s.fillColor = fillColor;\n        dirty = true;\n      }\n    });\n    if (dirty) redrawAll();\n  }, [strokeWidth, lineColor, fillColor]);\n  function redrawAll(context = c1Ref, offsetX = 0, offsetY = 0, backgroundColor = \"#979797\") {\n    const c = context.current;\n    const ctx = c.getContext(\"2d\");\n    ctx.clearRect(0, 0, c.width, c.height);\n    // 1) paint background\n    ctx.fillStyle = backgroundColor;\n    ctx.fillRect(0, 0, c.width, c.height);\n    // 2) draw grid behind everything\n    if (showGrid) drawGrid(ctx, c.width, c.height, 100); // 50px cells, tweak as you like\n    shapesRef.current.forEach(s => {\n      ctx.save();\n      ctx.strokeStyle = s.lineColor || lineColor;\n      ctx.fillStyle = s.fillColor || fillColor;\n      ctx.lineWidth = s.strokeWidth || strokeWidth;\n      drawShape(ctx, s, offsetX, offsetY);\n      if (s.selected) {\n        ctx.save();\n        ctx.strokeStyle = \"#ff7300\";\n        ctx.lineWidth = 2;\n        drawSelection(ctx, s, offsetX, offsetY);\n        ctx.restore();\n      }\n      ctx.restore();\n    });\n  }\n  useEffect(() => {\n    redrawAll();\n  }, [showGrid]);\n  useEffect(() => {\n    const c2 = c2Ref.current;\n    const ctx2 = c2.getContext(\"2d\");\n    const getPos = e => {\n      const r = c2.getBoundingClientRect();\n      return {\n        x: e.clientX - r.left,\n        y: e.clientY - r.top\n      };\n    };\n    const down = e => {\n      let pos = getPos(e);\n      if (activeTool === \"cursor\") {\n        const ctx1 = c1Ref.current.getContext(\"2d\");\n        // clear previous selection\n        shapesRef.current.forEach(sh => sh.selected = false);\n\n        // walk shapes in reverse z-order\n        for (let i = shapesRef.current.length - 1; i >= 0; i--) {\n          const s = shapesRef.current[i];\n          const {\n            xMin,\n            yMin,\n            xMax,\n            yMax\n          } = getBBox(s);\n          const midX = (xMin + xMax) / 2;\n          const rotY = yMin - 20;\n          if (Math.hypot(pos.x - midX, pos.y - rotY) < 6) {\n            console.log(\"🔄 starting rotate for shape\", i);\n            s.selected = true;\n\n            // remember rotation state\n            dragRef.current = {\n              isRotating: true,\n              shapeIndex: i,\n              origRotation: s.rotation || 0,\n              // use the bounding‐box center, not (x0+x1)/2\n              center: {\n                x: midX,\n                y: (yMin + yMax) / 2\n              },\n              startAngle: Math.atan2(pos.y - (yMin + yMax) / 2, pos.x - midX)\n            };\n            redrawAll();\n            return; // bail out so you don’t also start a move or resize\n          }\n          if (!hitTest(ctx1, s, pos.x, pos.y, strokeWidth)) continue;\n\n          // 1) check for a corner-drag first\n          const corners = [{\n            x: xMin,\n            y: yMin\n          }, {\n            x: xMax,\n            y: yMin\n          }, {\n            x: xMax,\n            y: yMax\n          }, {\n            x: xMin,\n            y: yMax\n          }];\n          for (let h = 0; h < corners.length; h++) {\n            const dx = pos.x - corners[h].x;\n            const dy = pos.y - corners[h].y;\n            if (Math.hypot(dx, dy) < 6) {\n              // inside handle radius\n              s.selected = true;\n              dragRef.current = {\n                isResizing: true,\n                shapeIndex: i,\n                handleIndex: h,\n                origShape: JSON.parse(JSON.stringify(s))\n              };\n              redrawAll();\n              return; // don’t start a move-drag\n            }\n          }\n\n          // 2) if no corner, it’s a normal drag\n          s.selected = true;\n          dragRef.current = {\n            isDragging: true,\n            startPos: pos,\n            // where drag began\n            origShape: JSON.parse(JSON.stringify(s)),\n            // deep copy of original coords\n            shapeIndex: i\n          };\n          redrawAll();\n          return;\n        }\n\n        // clicked on empty space\n        redrawAll();\n        return;\n      }\n      if (activeTool === \"poly-line\") {\n        polyRef.current.push(pos);\n        setIsDrawing(true);\n        return;\n      }\n      if (activeTool === \"curve\") {\n        curveRef.current.push(pos);\n        setIsDrawing(true);\n        return;\n      }\n      if (![\"square\", \"line\", \"circle\", \"triangle\", \"polygon\"].includes(activeTool)) return;\n      setStartPos(pos);\n      setIsDrawing(true);\n    };\n    const move = e => {\n      let pos = getPos(e);\n      if (dragRef.current.isRotating) {\n        console.log(\"🖱️ rotating… angle delta =\", Math.atan2(pos.y - dragRef.current.center.y, pos.x - dragRef.current.center.x) - dragRef.current.startAngle);\n        const {\n          shapeIndex,\n          origRotation,\n          center,\n          startAngle\n        } = dragRef.current;\n        const target = shapesRef.current[shapeIndex];\n        const currPos = getPos(e);\n\n        // how far we’ve turned\n        const currentAngle = Math.atan2(currPos.y - center.y, currPos.x - center.x);\n        target.rotation = origRotation + (currentAngle - startAngle);\n        redrawAll();\n        return;\n      }\n      if (dragRef.current.isResizing) {\n        const {\n          shapeIndex,\n          handleIndex,\n          origShape\n        } = dragRef.current;\n        const target = shapesRef.current[shapeIndex];\n        const pos = getPos(e); // current mouse\n        const {\n          xMin,\n          yMin,\n          xMax,\n          yMax\n        } = getBBox(origShape);\n        const corners = [{\n          x: xMin,\n          y: yMin\n        }, {\n          x: xMax,\n          y: yMin\n        }, {\n          x: xMax,\n          y: yMax\n        }, {\n          x: xMin,\n          y: yMax\n        }];\n        const origHandle = corners[handleIndex];\n        const opposite = corners[(handleIndex + 2) % 4];\n        if (origShape.tool === \"line\") {\n          // for lines, just drag one endpoint\n          if (handleIndex === 0) {\n            target.x0 = pos.x;\n            target.y0 = pos.y;\n          } else {\n            target.x1 = pos.x;\n            target.y1 = pos.y;\n          }\n        } else if (origShape.tool === \"circle\" || origShape.tool === \"polygon\") {\n          // if you want perfect circle lock, compute r = hypot(...)\n          // but even for ellipses, you can just set the handle\n          target.x1 = pos.x;\n          target.y1 = pos.y;\n          redrawAll();\n          return;\n        } else {\n          // for everything else, scale about the opposite corner\n          const sx = (pos.x - opposite.x) / (origHandle.x - opposite.x);\n          const sy = (pos.y - opposite.y) / (origHandle.y - opposite.y);\n          if (origShape.points) {\n            // poly‐line & curve: scale each point\n            target.points = origShape.points.map(p => ({\n              x: opposite.x + (p.x - opposite.x) * sx,\n              y: opposite.y + (p.y - opposite.y) * sy\n            }));\n          } else {\n            // x0/y0 and x1/y1 shapes (rect, circle, square, triangle, polygon)\n            [\"x0\", \"y0\", \"x1\", \"y1\"].forEach(k => {\n              const coord = k.startsWith(\"x\") ? \"x\" : \"y\";\n              const o = origShape[k];\n              const off = opposite[coord];\n              target[k] = off + (o - off) * (coord === \"x\" ? sx : sy);\n            });\n          }\n        }\n        redrawAll();\n        return;\n      }\n      if (activeTool === \"cursor\" && dragRef.current.isDragging) {\n        const {\n          startPos,\n          origShape,\n          shapeIndex\n        } = dragRef.current;\n        const target = shapesRef.current[shapeIndex];\n\n        // 1) how far the mouse has moved since drag start\n        const dx = pos.x - startPos.x;\n        const dy = pos.y - startPos.y;\n\n        // 2) move the shape by that delta\n        if (origShape.points) {\n          // poly-line & curve\n          target.points = origShape.points.map(p => ({\n            x: p.x + dx,\n            y: p.y + dy\n          }));\n        } else {\n          // x0/y0 & x1/y1 shapes\n          target.x0 = origShape.x0 + dx;\n          target.y0 = origShape.y0 + dy;\n          target.x1 = origShape.x1 + dx;\n          target.y1 = origShape.y1 + dy;\n        }\n\n        // 3) now snap the bounding‐box top-left to grid\n        if (showGrid && e.shiftKey) {\n          const {\n            xMin,\n            yMin\n          } = getBBox(target);\n          const {\n            x: snapX,\n            y: snapY\n          } = snap({\n            x: xMin,\n            y: yMin\n          });\n          const offX = snapX - xMin;\n          const offY = snapY - yMin;\n          if (target.points) {\n            target.points.forEach(p => {\n              p.x += offX;\n              p.y += offY;\n            });\n          } else {\n            target.x0 += offX;\n            target.y0 += offY;\n            target.x1 += offX;\n            target.y1 += offY;\n          }\n        }\n        redrawAll();\n        return;\n      }\n      if (activeTool === \"poly-line\" && polyRef.current.length) {\n        ctx2.clearRect(0, 0, c2.width, c2.height);\n        ctx2.strokeStyle = lineColor;\n        ctx2.lineWidth = strokeWidth;\n        ctx2.beginPath();\n        ctx2.moveTo(polyRef.current[0].x, polyRef.current[0].y);\n        for (let p of polyRef.current.slice(1)) ctx2.lineTo(p.x, p.y);\n        ctx2.lineTo(pos.x, pos.y);\n        ctx2.stroke();\n        return;\n      }\n      if (activeTool === \"curve\" && curveRef.current.length) {\n        ctx2.clearRect(0, 0, c2.width, c2.height);\n        const pts = [...curveRef.current, pos];\n        const shape = {\n          tool: \"curve\",\n          points: pts,\n          strokeWidth,\n          lineColor\n        };\n        ctx2.lineWidth = shape.strokeWidth;\n        ctx2.strokeStyle = shape.lineColor;\n        drawShape(ctx2, shape, 0, 0);\n        return;\n      }\n      if (!isDrawing) return;\n      ctx2.clearRect(0, 0, c2.width, c2.height);\n      const {\n        x,\n        y\n      } = pos;\n      const shape = {\n        tool: activeTool,\n        x0: startPos.x,\n        y0: startPos.y,\n        x1: x,\n        y1: y,\n        isSquare: e.shiftKey && activeTool === \"square\",\n        isCircle: e.shiftKey && activeTool === \"circle\",\n        strokeWidth: 1,\n        lineColor: \"black\",\n        fillColor: \"transparent\"\n      };\n      ctx2.fillStyle = shape.fillColor;\n      ctx2.strokeStyle = shape.lineColor;\n      ctx2.lineWidth = shape.strokeWidth;\n      drawShape(ctx2, shape, 0, 0);\n    };\n    const up = e => {\n      if (dragRef.current.isRotating) {\n        // 1) grab rotation info\n        const {\n          shapeIndex,\n          center\n        } = dragRef.current;\n        const shape = shapesRef.current[shapeIndex];\n        dragRef.current.isRotating = false;\n        redrawAll();\n        return;\n      }\n      if (dragRef.current.isResizing) {\n        dragRef.current.isResizing = false;\n        dragRef.current.handleIndex = null;\n        dragRef.current.origShape = null;\n        return;\n      }\n      if (activeTool === \"cursor\" && dragRef.current.isDragging) {\n        dragRef.current.isDragging = false;\n        dragRef.current.shapeIndex = null;\n        return;\n      }\n      if ([\"poly-line\", \"curve\"].includes(activeTool)) return;\n      if (!isDrawing) return;\n      const pos = getPos(e);\n      if (pos.x === startPos.x && pos.y === startPos.y) {\n        ctx2.clearRect(0, 0, c2.width, c2.height);\n        setIsDrawing(false);\n        return;\n      }\n      const isCircle = activeTool === \"circle\" && e.shiftKey;\n      const isSquare = activeTool === \"square\" && e.shiftKey;\n      const newShape = {\n        tool: activeTool,\n        x0: startPos.x,\n        y0: startPos.y,\n        x1: pos.x,\n        y1: pos.y,\n        lineColor,\n        fillColor,\n        strokeWidth,\n        isCircle,\n        isSquare,\n        rotation: 0,\n        selected: false\n      };\n      shapesRef.current.push(newShape);\n      undoStack.current.push({\n        type: 'add',\n        shapes: [newShape]\n      });\n      // clear redoStack because it's a brand-new action\n      redoStack.current = [];\n      shapesRef.current.forEach(s => s.selected = false);\n      shapesRef.current[shapesRef.current.length - 1].selected = true;\n      redrawAll();\n      ctx2.clearRect(0, 0, c2.width, c2.height);\n      setIsDrawing(false);\n    };\n    const finishPoly = e => {\n      if (activeTool !== \"poly-line\" || polyRef.current.length < 2) return;\n      const newShape = {\n        tool: \"poly-line\",\n        points: polyRef.current.slice(),\n        lineColor,\n        fillColor,\n        strokeWidth,\n        selected: false\n      };\n      shapesRef.current.push(newShape);\n      undoStack.current.push({\n        type: 'add',\n        shapes: [newShape]\n      });\n      // clear redoStack because it's a brand-new action\n      redoStack.current = [];\n      shapesRef.current.forEach(s => s.selected = false);\n      shapesRef.current[shapesRef.current.length - 1].selected = true;\n      redrawAll();\n      ctx2.clearRect(0, 0, c2.width, c2.height);\n      polyRef.current = [];\n    };\n    const finishCurve = e => {\n      if (activeTool !== \"curve\" || curveRef.current.length < 2) return;\n\n      // 1. capture the final click\n      const pos = getPos(e);\n      curveRef.current.push(pos);\n\n      // 2. push the full point list\n      const newShape = {\n        tool: \"curve\",\n        points: curveRef.current.slice(),\n        lineColor,\n        fillColor,\n        strokeWidth,\n        selected: false\n      };\n      shapesRef.current.push(newShape);\n      undoStack.current.push({\n        type: 'add',\n        shapes: [newShape]\n      });\n      // clear redoStack because it's a brand-new action\n      redoStack.current = [];\n\n      // 3. rest stays the same\n      shapesRef.current.forEach(s => s.selected = false);\n      shapesRef.current[shapesRef.current.length - 1].selected = true;\n      redrawAll();\n      ctx2.clearRect(0, 0, c2.width, c2.height);\n\n      // 4. reset\n      curveRef.current = [];\n      setIsDrawing(false);\n    };\n    const onKeyDown = e => {\n      if (e.ctrlKey && !e.shiftKey && e.key.toLowerCase() === 'z') {\n        const action = undoStack.current.pop();\n        if (!action) return;\n        if (action.type === 'add') {\n          // remove the shape(s) that were added\n          shapesRef.current = shapesRef.current.filter(s => !action.shapes.includes(s));\n        } else if (action.type === 'delete') {\n          // re‐insert deleted shapes at their original positions\n          action.shapes.forEach((shape, i) => {\n            const idx = action.indices[i];\n            shapesRef.current.splice(idx, 0, shape);\n          });\n        }\n        redoStack.current.push(action);\n        redrawAll();\n      }\n\n      // REDO\n      else if (e.ctrlKey && e.shiftKey && e.key.toLowerCase() === 'z') {\n        const action = redoStack.current.pop();\n        if (!action) return;\n        if (action.type === 'add') {\n          // re‐add those shapes\n          shapesRef.current.push(...action.shapes);\n        } else if (action.type === 'delete') {\n          // re‐delete them\n          shapesRef.current = shapesRef.current.filter(s => !action.shapes.includes(s));\n        }\n        undoStack.current.push(action);\n        redrawAll();\n      } else if (e.key === \"Delete\") {\n        const deleted = shapesRef.current.filter(s => s.selected);\n        if (deleted.length) {\n          // remember their original indices if you care about insert order:\n          const indices = deleted.map(s => shapesRef.current.indexOf(s));\n          shapesRef.current = shapesRef.current.filter(s => !s.selected);\n          undoStack.current.push({\n            type: 'delete',\n            shapes: deleted,\n            indices\n          });\n          redoStack.current = [];\n          redrawAll();\n        }\n      }\n    };\n    c2.addEventListener(\"mousedown\", down);\n    c2.addEventListener(\"mousemove\", move);\n    c2.addEventListener(\"mouseup\", up);\n    c2.addEventListener(\"dblclick\", finishPoly);\n    c2.addEventListener(\"dblclick\", finishCurve);\n    window.addEventListener(\"keydown\", onKeyDown);\n    return () => {\n      c2.removeEventListener(\"mousedown\", down);\n      c2.removeEventListener(\"mousemove\", move);\n      c2.removeEventListener(\"mouseup\", up);\n      c2.removeEventListener(\"dblclick\", finishPoly);\n      c2.removeEventListener(\"dblclick\", finishCurve);\n      window.removeEventListener(\"keydown\", onKeyDown);\n    };\n  }, [activeTool, isDrawing, startPos, lineColor, fillColor, strokeWidth, showGrid, snapToGrid]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    className: \"canvas-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: c1Ref\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 894,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: c2Ref,\n      style: {\n        backgroundColor: \"transparent\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 895,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 893,\n    columnNumber: 9\n  }, this);\n}, \"54LGM42IYhvK02ZAJ0MTqe3eJDU=\")), \"54LGM42IYhvK02ZAJ0MTqe3eJDU=\");\n_c2 = Canvas;\nexport default Canvas;\nvar _c, _c2;\n$RefreshReg$(_c, \"Canvas$forwardRef\");\n$RefreshReg$(_c2, \"Canvas\");","map":{"version":3,"names":["React","forwardRef","useImperativeHandle","useRef","useEffect","useState","jsPDF","jsxDEV","_jsxDEV","drawGrid","ctx","width","height","cell","save","beginPath","strokeStyle","lineWidth","x","moveTo","lineTo","y","stroke","restore","getBBox","shape","points","xs","map","p","ys","xMin","Math","min","yMin","xMax","max","yMax","tool","cx","x0","cy","y0","isCircle","r","hypot","x1","y1","rx","abs","ry","radius","sides","i","ang","PI","push","cos","sin","isSquare","dx","dy","side","w","h","xA","yA","xB","yB","hitTest","defaultStroke","path","Path2D","strokeWidth","isPointInStroke","length","slice","drawShape","offsetX","offsetY","translate","rotate","rotation","fillRect","strokeRect","arc","ellipse","fill","closePath","px","py","pts","prev","curr","mx","my","quadraticCurveTo","last","drawSelection","R","p0","p1","fillStyle","forEach","pt","midX","rotY","rotatePoint","center","angle","Canvas","_s","_c","activeTool","lineColor","fillColor","showGrid","snapToGrid","ref","containerRef","c1Ref","c2Ref","shapesRef","undoStack","redoStack","polyRef","curveRef","isDrawing","setIsDrawing","startPos","setStartPos","dragRef","isDragging","isResizing","prevPos","shapeIndex","handleIndex","origShape","origRotation","startAngle","gridSize","snap","round","exportShapes","current","s","selected","data","JSON","stringify","blob","Blob","type","url","URL","createObjectURL","a","document","createElement","href","download","click","revokeObjectURL","downloadJPEG","shapes","pad","minX","Infinity","minY","maxX","maxY","sw","sh","tmp","redrawAll","dataURL","toDataURL","link","downloadPDF","orientation","pdf","unit","format","pageW","internal","pageSize","getWidth","pageH","getHeight","scale","yOffset","sliceH","getContext","drawImage","imgData","imgW","imgH","xPos","addImage","addPage","loadShapes","arr","getShapeCount","clearShapes","resize","getBoundingClientRect","window","addEventListener","removeEventListener","dirty","context","backgroundColor","c","clearRect","c2","ctx2","getPos","e","clientX","left","clientY","top","down","pos","ctx1","console","log","isRotating","atan2","corners","parse","includes","move","target","currPos","currentAngle","origHandle","opposite","sx","sy","k","coord","startsWith","o","off","shiftKey","snapX","snapY","offX","offY","up","newShape","finishPoly","finishCurve","onKeyDown","ctrlKey","key","toLowerCase","action","pop","filter","idx","indices","splice","deleted","indexOf","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","_c2","$RefreshReg$"],"sources":["/home/nightsquid/Desktop/Graphics 1/Shape-Editor/src/components/Canvas.js"],"sourcesContent":["import React, { forwardRef, useImperativeHandle, useRef, useEffect, useState } from \"react\";\nimport { jsPDF } from \"jspdf\";\nimport \"../css/canvas.css\";\n\n// --- Helper Functions ---\n\n// Draw a uniform grid of given cell size\n// Draw a uniform grid of given cell size\nfunction drawGrid(ctx, width, height, cell) {\n    ctx.save();\n    ctx.beginPath();\n    ctx.strokeStyle = \"#ffffff88\";    // light grey grid\n    ctx.lineWidth = .5;\n    // vertical\n    for (let x = 0; x <= width; x += cell) {\n        ctx.moveTo(x, 0);\n        ctx.lineTo(x, height);\n    }\n    // horizontal\n    for (let y = 0; y <= height; y += cell) {\n        ctx.moveTo(0, y);\n        ctx.lineTo(width, y);\n    }\n    ctx.stroke();\n    ctx.restore();\n}\n\n// Compute bounding box for any shape\nfunction getBBox(shape) {\n    if (shape.points) {\n        const xs = shape.points.map(p => p.x);\n        const ys = shape.points.map(p => p.y);\n        return {\n            xMin: Math.min(...xs),\n            yMin: Math.min(...ys),\n            xMax: Math.max(...xs),\n            yMax: Math.max(...ys)\n        };\n    }\n    if (shape.tool === \"circle\") {\n        const cx = shape.x0, cy = shape.y0;\n        if (shape.isCircle) {\n            const r = Math.hypot(shape.x1 - shape.x0, shape.y1 - shape.y0);\n            return { xMin: cx - r, yMin: cy - r, xMax: cx + r, yMax: cy + r };\n        } else {\n            const rx = Math.abs(shape.x1 - shape.x0);\n            const ry = Math.abs(shape.y1 - shape.y0);\n            return { xMin: cx - rx, yMin: cy - ry, xMax: cx + rx, yMax: cy + ry };\n        }\n    }\n    if (shape.tool === \"polygon\") {\n        const cx = shape.x0;\n        const cy = shape.y0;\n        const radius = Math.hypot(shape.x1 - shape.x0, shape.y1 - shape.y0);\n        const sides = 5;  // match your drawShape logic\n        const xs = [];\n        const ys = [];\n        for (let i = 0; i < sides; i++) {\n            const ang = i * (2 * Math.PI / sides) - Math.PI / 2;\n            xs.push(cx + radius * Math.cos(ang));\n            ys.push(cy + radius * Math.sin(ang));\n        }\n        return {\n            xMin: Math.min(...xs),\n            yMin: Math.min(...ys),\n            xMax: Math.max(...xs),\n            yMax: Math.max(...ys)\n        };\n    }\n    if (shape.tool === \"square\" && shape.isSquare) {\n        const dx = shape.x1 - shape.x0;\n        const dy = shape.y1 - shape.y0;\n        const side = Math.min(Math.abs(dx), Math.abs(dy));\n        const w = dx < 0 ? -side : side;\n        const h = dy < 0 ? -side : side;\n\n        const xA = shape.x0;\n        const yA = shape.y0;\n        const xB = shape.x0 + w;\n        const yB = shape.y0 + h;\n\n        return {\n            xMin: Math.min(xA, xB),\n            yMin: Math.min(yA, yB),\n            xMax: Math.max(xA, xB),\n            yMax: Math.max(yA, yB)\n        };\n    }\n    return {\n        xMin: Math.min(shape.x0, shape.x1),\n        yMin: Math.min(shape.y0, shape.y1),\n        xMax: Math.max(shape.x0, shape.x1),\n        yMax: Math.max(shape.y0, shape.y1)\n    };\n}\n\n// Hit-test a point against any shape (strokes for lines, box for others)\nfunction hitTest(ctx, shape, x, y, defaultStroke) {\n    const path = new Path2D();\n    ctx.lineWidth = (shape.strokeWidth || defaultStroke) + 8;\n    switch (shape.tool) {\n        case \"line\":\n            path.moveTo(shape.x0, shape.y0);\n            path.lineTo(shape.x1, shape.y1);\n            return ctx.isPointInStroke(path, x, y);\n        case \"poly-line\":\n        case \"curve\":\n            if (shape.points && shape.points.length > 1) {\n                path.moveTo(shape.points[0].x, shape.points[0].y);\n                for (let p of shape.points.slice(1)) path.lineTo(p.x, p.y);\n                return ctx.isPointInStroke(path, x, y);\n            }\n            return false;\n        default:\n            const { xMin, yMin, xMax, yMax } = getBBox(shape);\n            return x >= xMin && x <= xMax && y >= yMin && y <= yMax;\n    }\n}\n\n// Draw a shape onto the canvas context\nfunction drawShape(ctx, shape, offsetX = 0, offsetY = 0) {\n    const x0 = shape.x0 + offsetX;\n    const y0 = shape.y0 + offsetY;\n    const x1 = shape.x1 + offsetX;\n    const y1 = shape.y1 + offsetY;\n\n    const { xMin, yMin, xMax, yMax } = getBBox(shape);\n    const cx = (xMin + xMax) / 2 + offsetX;\n    const cy = (yMin + yMax) / 2 + offsetY;\n\n    ctx.save();\n    ctx.translate(cx, cy);\n    ctx.rotate(shape.rotation || 0);\n    ctx.translate(-cx, -cy);\n\n    switch (shape.tool) {\n        case \"square\": {\n            const dx = shape.x1 - shape.x0;\n            const dy = shape.y1 - shape.y0;\n            let w, h;\n            if (shape.isSquare) {\n                const side = Math.min(Math.abs(dx), Math.abs(dy));\n                w = dx < 0 ? -side : side;\n                h = dy < 0 ? -side : side;\n            } else {\n                w = dx;\n                h = dy;\n            }\n            ctx.fillRect(shape.x0 + offsetX, shape.y0 + offsetY, w, h);\n            ctx.strokeRect(shape.x0 + offsetX, shape.y0 + offsetY, w, h);\n            return;\n        }\n        case \"line\":\n            ctx.beginPath();\n            ctx.moveTo(x0, y0);\n            ctx.lineTo(x1, y1);\n            ctx.stroke();\n            return;\n        case \"circle\":\n            ctx.beginPath();\n            if (shape.isCircle) {\n                const r = Math.hypot(shape.x1 - shape.x0, shape.y1 - shape.y0);\n                ctx.arc(x0, y0, r, 0, 2 * Math.PI);\n            } else {\n                ctx.ellipse(x0, y0, Math.abs(shape.x1 - shape.x0), Math.abs(shape.y1 - shape.y0), 0, 0, 2 * Math.PI);\n            }\n            ctx.fill();\n            ctx.stroke();\n            return;\n        case \"triangle\":\n            ctx.beginPath();\n            ctx.moveTo(x0, y0);\n            ctx.lineTo(x1, y0);\n            ctx.lineTo((x0 + x1) / 2, y1);\n            ctx.closePath();\n            ctx.fill();\n            ctx.stroke();\n            return;\n        case \"polygon\":\n            ctx.beginPath();\n            const sides = 5;\n            const radius = Math.hypot(shape.x1 - shape.x0, shape.y1 - shape.y0);\n            for (let i = 0; i < sides; i++) {\n                const ang = i * (2 * Math.PI / sides) - Math.PI / 2;\n                const px = shape.x0 + offsetX + radius * Math.cos(ang);\n                const py = shape.y0 + offsetY + radius * Math.sin(ang);\n                if (i === 0) ctx.moveTo(px, py);\n                else ctx.lineTo(px, py);\n            }\n            ctx.closePath();\n            ctx.fill();\n            ctx.stroke();\n            return;\n        case \"poly-line\":\n            if (shape.points && shape.points.length) {\n                ctx.beginPath();\n                ctx.moveTo(shape.points[0].x + offsetX, shape.points[0].y + offsetY);\n                for (let p of shape.points.slice(1)) ctx.lineTo(p.x + offsetX, p.y + offsetY);\n                ctx.stroke();\n            }\n            return;\n        case \"curve\":\n            if (shape.points && shape.points.length) {\n                ctx.beginPath();\n                const pts = shape.points;\n                ctx.moveTo(pts[0].x + offsetX, pts[0].y + offsetY);\n                for (let i = 1; i < pts.length; i++) {\n                    const prev = pts[i - 1];\n                    const curr = pts[i];\n                    const mx = (prev.x + curr.x) / 2 + offsetX;\n                    const my = (prev.y + curr.y) / 2 + offsetY;\n                    ctx.quadraticCurveTo(prev.x + offsetX, prev.y + offsetY, mx, my);\n                }\n\n                const last = pts[pts.length - 1];\n                ctx.lineTo(last.x + offsetX, last.y + offsetY);\n\n                ctx.stroke();\n            }\n            return;\n        default:\n            ctx.save();\n            ctx.translate(cx, cy);\n            ctx.rotate(shape.rotation || 0);\n            ctx.translate(-cx, -cy);\n\n    }\n}\n\n// Draw selection handles\nfunction drawSelection(ctx, shape, offsetX = 0, offsetY = 0) {\n    const R = 5;\n    if (shape.tool === \"line\") {\n        const p0 = { x: shape.x0 + offsetX, y: shape.y0 + offsetY };\n        const p1 = { x: shape.x1 + offsetX, y: shape.y1 + offsetY };\n        ctx.fillStyle = \"white\";\n        ctx.fill();\n        ctx.beginPath(); ctx.moveTo(p0.x, p0.y); ctx.lineTo(p1.x, p1.y); ctx.stroke();\n        [p0, p1].forEach(pt => {\n            ctx.beginPath(); ctx.arc(pt.x, pt.y, R, 0, 2 * Math.PI); ctx.fill(); ctx.stroke();\n        });\n        return;\n    }\n    const { xMin, yMin, xMax, yMax } = getBBox(shape);\n    const midX = (xMin + xMax) / 2;\n    const rotY = yMin - 20;\n    ctx.beginPath();\n    ctx.moveTo(midX, yMin);\n    ctx.lineTo(midX, rotY);\n    ctx.stroke();\n\n    // circle grip\n    ctx.beginPath();\n    ctx.arc(midX, rotY, R, 0, 2 * Math.PI);\n\n    ctx.stroke();\n    ctx.strokeRect(xMin, yMin, xMax - xMin, yMax - yMin);\n    ctx.fillStyle = \"white\";\n    ctx.fill();\n    [\n        { x: xMin, y: yMin },\n        { x: xMax, y: yMin },\n        { x: xMax, y: yMax },\n        { x: xMin, y: yMax }\n    ].forEach(pt => {\n        ctx.beginPath(); ctx.arc(pt.x, pt.y, R, 0, 2 * Math.PI); ctx.fill(); ctx.stroke();\n    });\n}\n\nfunction rotatePoint(p, center, angle) {\n    const dx = p.x - center.x;\n    const dy = p.y - center.y;\n    return {\n        x: center.x + dx * Math.cos(angle) - dy * Math.sin(angle),\n        y: center.y + dx * Math.sin(angle) + dy * Math.cos(angle)\n    };\n}\n\nconst Canvas = forwardRef(({ activeTool, lineColor, fillColor, strokeWidth, showGrid, snapToGrid }, ref) => {\n    const containerRef = useRef(null);\n    const c1Ref = useRef(null);\n    const c2Ref = useRef(null);\n    const shapesRef = useRef([]);\n    const undoStack = useRef([]);\n    const redoStack = useRef([]);\n    const polyRef = useRef([]);\n    const curveRef = useRef([]);\n    const [isDrawing, setIsDrawing] = useState(false);\n    const [startPos, setStartPos] = useState({ x: 0, y: 0 });\n    const dragRef = useRef({\n        isDragging: false,\n        isResizing: false,\n        prevPos: { x: 0, y: 0 },\n        shapeIndex: null,\n        handleIndex: null,\n        origShape: null,\n        origRotation: 0,\n        center: null,\n        startAngle: 0\n    });\n    const gridSize = 100; // match the same cell size you draw in drawGrid\n    const snap = ({ x, y }) => ({\n        x: Math.round(x / gridSize) * gridSize,\n        y: Math.round(y / gridSize) * gridSize\n    });\n\n    useImperativeHandle(ref, () => ({\n        exportShapes: () => {\n            shapesRef.current.forEach(s => (s.selected = false));\n            const data = JSON.stringify(shapesRef.current, null, 2);\n            const blob = new Blob([data], { type: \"application/json\" });\n            const url = URL.createObjectURL(blob);\n            const a = document.createElement(\"a\");\n            a.href = url; a.download = \"shapes.json\"; a.click();\n            URL.revokeObjectURL(url);\n        },\n        downloadJPEG: () => {\n            shapesRef.current.forEach(s => (s.selected = false));\n            const shapes = shapesRef.current;\n            const pad = 20;\n            let minX = Infinity, minY = Infinity;\n            let maxX = -Infinity, maxY = -Infinity;\n            shapes.forEach(s => {\n                if (s.tool === \"circle\" || s.tool === \"polygon\") {\n                    const r = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n                    minX = Math.min(minX, s.x0 - r);\n                    maxX = Math.max(maxX, s.x0 + r);\n                    minY = Math.min(minY, s.y0 - r);\n                    maxY = Math.max(maxY, s.y0 + r);\n                } else {\n                    minX = Math.min(minX, s.x0, s.x1);\n                    maxX = Math.max(maxX, s.x0, s.x1);\n                    minY = Math.min(minY, s.y0, s.y1);\n                    maxY = Math.max(maxY, s.y0, s.y1);\n                }\n            });\n            if (minX === Infinity) {\n                minX = 0; minY = 0;\n                maxX = c1Ref.current.width;\n                maxY = c1Ref.current.height;\n            }\n            minX -= pad; minY -= pad; maxX += pad; maxY += pad;\n            const sw = maxX - minX;\n            const sh = maxY - minY;\n            const tmp = document.createElement(\"canvas\");\n            tmp.width = sw; tmp.height = sh;\n            redrawAll({ current: tmp }, -minX, -minY, \"#ffffff\");\n            const dataURL = tmp.toDataURL(\"image/jpeg\", 1.0);\n            const link = document.createElement(\"a\");\n            link.href = dataURL;\n            link.download = \"shapes.jpg\";\n            link.click();\n        },\n        downloadPDF: () => {\n            shapesRef.current.forEach(s => (s.selected = false));\n            const shapes = shapesRef.current;\n            const pad = 20;\n            let minX = Infinity, minY = Infinity;\n            let maxX = -Infinity, maxY = -Infinity;\n            shapes.forEach(s => {\n                if (s.tool === \"circle\" || s.tool === \"polygon\") {\n                    const r = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n                    minX = Math.min(minX, s.x0 - r);\n                    maxX = Math.max(maxX, s.x0 + r);\n                    minY = Math.min(minY, s.y0 - r);\n                    maxY = Math.max(maxY, s.y0 + r);\n                } else {\n                    minX = Math.min(minX, s.x0, s.x1);\n                    maxX = Math.max(maxX, s.x0, s.x1);\n                    minY = Math.min(minY, s.y0, s.y1);\n                    maxY = Math.max(maxY, s.y0, s.y1);\n                }\n            });\n            if (minX === Infinity) {\n                minX = 0; minY = 0;\n                maxX = c1Ref.current.width;\n                maxY = c1Ref.current.height;\n            }\n            minX -= pad; minY -= pad; maxX += pad; maxY += pad;\n            const sw = maxX - minX;\n            const sh = maxY - minY;\n            const tmp = document.createElement(\"canvas\");\n            tmp.width = sw; tmp.height = sh;\n            redrawAll({ current: tmp }, -minX, -minY, \"#ffffff\");\n            const orientation = sw > sh ? \"landscape\" : \"portrait\";\n            const pdf = new jsPDF({ orientation, unit: \"px\", format: \"a4\" });\n            const pageW = pdf.internal.pageSize.getWidth();\n            const pageH = pdf.internal.pageSize.getHeight();\n            const scale = Math.min(pageW / sw, pageH / sh);\n            let yOffset = 0;\n            while (yOffset < sh) {\n                const sliceH = Math.min(sh - yOffset, pageH / scale);\n                const slice = document.createElement(\"canvas\");\n                slice.width = sw; slice.height = sliceH;\n                slice.getContext(\"2d\").drawImage(\n                    tmp,\n                    0, yOffset, sw, sliceH,\n                    0, 0, sw, sliceH\n                );\n                const imgData = slice.toDataURL(\"image/jpeg\", 1.0);\n                const imgW = sw * scale, imgH = sliceH * scale;\n                const xPos = (pageW - imgW) / 2;\n                pdf.addImage(imgData, \"JPEG\", xPos, 0, imgW, imgH);\n                yOffset += sliceH;\n                if (yOffset < sh) pdf.addPage();\n            }\n            pdf.save(\"shapes.pdf\");\n        },\n        loadShapes: (arr) => { shapesRef.current = arr.map(s => ({ ...s, selected: false })); redrawAll(); },\n        getShapeCount: () => shapesRef.current.length,\n        clearShapes: () => { shapesRef.current = []; redrawAll(); }\n    }));\n\n    useEffect(() => {\n        const resize = () => {\n            const { width, height } = containerRef.current.getBoundingClientRect();\n            [c1Ref, c2Ref].forEach(r => { r.current.width = width; r.current.height = height; });\n            redrawAll();\n        };\n        resize(); window.addEventListener(\"resize\", resize);\n        return () => window.removeEventListener(\"resize\", resize);\n    }, []);\n\n    useEffect(() => {\n        let dirty = false;\n        shapesRef.current.forEach(s => {\n            if (s.selected && (s.strokeWidth !== strokeWidth || s.lineColor !== lineColor || s.fillColor !== fillColor)) {\n                s.strokeWidth = strokeWidth;\n                s.lineColor = lineColor;\n                s.fillColor = fillColor;\n                dirty = true;\n            }\n        });\n        if (dirty) redrawAll();\n    }, [strokeWidth, lineColor, fillColor]);\n\n    function redrawAll(context = c1Ref, offsetX = 0, offsetY = 0, backgroundColor = \"#979797\") {\n        const c = context.current;\n        const ctx = c.getContext(\"2d\");\n        ctx.clearRect(0, 0, c.width, c.height);\n        // 1) paint background\n        ctx.fillStyle = backgroundColor;\n        ctx.fillRect(0, 0, c.width, c.height);\n        // 2) draw grid behind everything\n        if (showGrid) drawGrid(ctx, c.width, c.height, 100);   // 50px cells, tweak as you like\n        shapesRef.current.forEach(s => {\n            ctx.save();\n            ctx.strokeStyle = s.lineColor || lineColor;\n            ctx.fillStyle = s.fillColor || fillColor;\n            ctx.lineWidth = s.strokeWidth || strokeWidth;\n            drawShape(ctx, s, offsetX, offsetY);\n            if (s.selected) {\n                ctx.save(); ctx.strokeStyle = \"#ff7300\"; ctx.lineWidth = 2;\n                drawSelection(ctx, s, offsetX, offsetY);\n                ctx.restore();\n            }\n            ctx.restore();\n        });\n    }\n    useEffect(() => {\n        redrawAll();\n    }, [showGrid]);\n\n    useEffect(() => {\n        const c2 = c2Ref.current;\n        const ctx2 = c2.getContext(\"2d\");\n        const getPos = e => {\n            const r = c2.getBoundingClientRect();\n            return { x: e.clientX - r.left, y: e.clientY - r.top };\n        };\n\n        const down = e => {\n            let pos = getPos(e);\n            if (activeTool === \"cursor\") {\n                const ctx1 = c1Ref.current.getContext(\"2d\");\n                // clear previous selection\n                shapesRef.current.forEach(sh => sh.selected = false);\n\n                // walk shapes in reverse z-order\n                for (let i = shapesRef.current.length - 1; i >= 0; i--) {\n                    const s = shapesRef.current[i];\n\n                    const { xMin, yMin, xMax, yMax } = getBBox(s);\n                    const midX = (xMin + xMax) / 2;\n                    const rotY = yMin - 20;\n\n                    if (Math.hypot(pos.x - midX, pos.y - rotY) < 6) {\n                        console.log(\"🔄 starting rotate for shape\", i);\n                        s.selected = true;\n\n                        // remember rotation state\n                        dragRef.current = {\n                            isRotating: true,\n                            shapeIndex: i,\n                            origRotation: s.rotation || 0,\n                            // use the bounding‐box center, not (x0+x1)/2\n                            center: { x: midX, y: (yMin + yMax) / 2 },\n                            startAngle: Math.atan2(\n                                pos.y - ((yMin + yMax) / 2),\n                                pos.x - midX\n                            )\n                        };\n\n                        redrawAll();\n                        return;    // bail out so you don’t also start a move or resize\n                    }\n\n                    if (!hitTest(ctx1, s, pos.x, pos.y, strokeWidth)) continue;\n\n                    // 1) check for a corner-drag first\n                    const corners = [\n                        { x: xMin, y: yMin },\n                        { x: xMax, y: yMin },\n                        { x: xMax, y: yMax },\n                        { x: xMin, y: yMax }\n                    ];\n                    for (let h = 0; h < corners.length; h++) {\n                        const dx = pos.x - corners[h].x;\n                        const dy = pos.y - corners[h].y;\n                        if (Math.hypot(dx, dy) < 6) {        // inside handle radius\n                            s.selected = true;\n                            dragRef.current = {\n                                isResizing: true,\n                                shapeIndex: i,\n                                handleIndex: h,\n                                origShape: JSON.parse(JSON.stringify(s))\n                            };\n                            redrawAll();\n                            return;  // don’t start a move-drag\n                        }\n                    }\n\n                    // 2) if no corner, it’s a normal drag\n                    s.selected = true;\n                    dragRef.current = {\n                        isDragging: true,\n                        startPos: pos,                                // where drag began\n                        origShape: JSON.parse(JSON.stringify(s)),     // deep copy of original coords\n                        shapeIndex: i\n                    };\n                    redrawAll();\n                    return;\n                }\n\n                // clicked on empty space\n                redrawAll();\n                return;\n            }\n            if (activeTool === \"poly-line\") { polyRef.current.push(pos); setIsDrawing(true); return; }\n            if (activeTool === \"curve\") { curveRef.current.push(pos); setIsDrawing(true); return; }\n            if (![\"square\", \"line\", \"circle\", \"triangle\", \"polygon\"].includes(activeTool)) return;\n            setStartPos(pos);\n            setIsDrawing(true);\n        };\n\n        const move = e => {\n            let pos = getPos(e);\n            if (dragRef.current.isRotating) {\n                console.log(\"🖱️ rotating… angle delta =\", (Math.atan2(pos.y - dragRef.current.center.y,\n                    pos.x - dragRef.current.center.x)\n                    - dragRef.current.startAngle));\n                const { shapeIndex, origRotation, center, startAngle } = dragRef.current;\n                const target = shapesRef.current[shapeIndex];\n                const currPos = getPos(e);\n\n                // how far we’ve turned\n                const currentAngle = Math.atan2(currPos.y - center.y, currPos.x - center.x);\n                target.rotation = origRotation + (currentAngle - startAngle);\n\n                redrawAll();\n                return;\n            }\n            if (dragRef.current.isResizing) {\n                const { shapeIndex, handleIndex, origShape } = dragRef.current;\n                const target = shapesRef.current[shapeIndex];\n                const pos = getPos(e);             // current mouse\n                const { xMin, yMin, xMax, yMax } = getBBox(origShape);\n                const corners = [\n                    { x: xMin, y: yMin },\n                    { x: xMax, y: yMin },\n                    { x: xMax, y: yMax },\n                    { x: xMin, y: yMax }\n                ];\n                const origHandle = corners[handleIndex];\n                const opposite = corners[(handleIndex + 2) % 4];\n\n                if (origShape.tool === \"line\") {\n                    // for lines, just drag one endpoint\n                    if (handleIndex === 0) {\n                        target.x0 = pos.x; target.y0 = pos.y;\n                    } else {\n                        target.x1 = pos.x; target.y1 = pos.y;\n                    }\n                } else if (origShape.tool === \"circle\" || origShape.tool === \"polygon\") {\n                    // if you want perfect circle lock, compute r = hypot(...)\n                    // but even for ellipses, you can just set the handle\n                    target.x1 = pos.x;\n                    target.y1 = pos.y;\n                    redrawAll();\n                    return;\n                } else {\n                    // for everything else, scale about the opposite corner\n                    const sx = (pos.x - opposite.x) / (origHandle.x - opposite.x);\n                    const sy = (pos.y - opposite.y) / (origHandle.y - opposite.y);\n\n                    if (origShape.points) {\n                        // poly‐line & curve: scale each point\n                        target.points = origShape.points.map(p => ({\n                            x: opposite.x + (p.x - opposite.x) * sx,\n                            y: opposite.y + (p.y - opposite.y) * sy\n                        }));\n                    } else {\n                        // x0/y0 and x1/y1 shapes (rect, circle, square, triangle, polygon)\n                        [\"x0\", \"y0\", \"x1\", \"y1\"].forEach(k => {\n                            const coord = k.startsWith(\"x\") ? \"x\" : \"y\";\n                            const o = origShape[k];\n                            const off = opposite[coord];\n                            target[k] = off + (o - off) * (coord === \"x\" ? sx : sy);\n                        });\n                    }\n                }\n\n                redrawAll();\n                return;\n            }\n            if (activeTool === \"cursor\" && dragRef.current.isDragging) {\n                const { startPos, origShape, shapeIndex } = dragRef.current;\n                const target = shapesRef.current[shapeIndex];\n\n                // 1) how far the mouse has moved since drag start\n                const dx = pos.x - startPos.x;\n                const dy = pos.y - startPos.y;\n\n                // 2) move the shape by that delta\n                if (origShape.points) {\n                    // poly-line & curve\n                    target.points = origShape.points.map(p => ({\n                        x: p.x + dx,\n                        y: p.y + dy\n                    }));\n                } else {\n                    // x0/y0 & x1/y1 shapes\n                    target.x0 = origShape.x0 + dx;\n                    target.y0 = origShape.y0 + dy;\n                    target.x1 = origShape.x1 + dx;\n                    target.y1 = origShape.y1 + dy;\n                }\n\n                // 3) now snap the bounding‐box top-left to grid\n                if (showGrid && e.shiftKey) {\n                    const { xMin, yMin } = getBBox(target);\n                    const { x: snapX, y: snapY } = snap({ x: xMin, y: yMin });\n                    const offX = snapX - xMin;\n                    const offY = snapY - yMin;\n\n                    if (target.points) {\n                        target.points.forEach(p => {\n                            p.x += offX;\n                            p.y += offY;\n                        });\n                    } else {\n                        target.x0 += offX; target.y0 += offY;\n                        target.x1 += offX; target.y1 += offY;\n                    }\n                }\n\n                redrawAll();\n                return;\n            }\n\n            if (activeTool === \"poly-line\" && polyRef.current.length) {\n                ctx2.clearRect(0, 0, c2.width, c2.height);\n                ctx2.strokeStyle = lineColor; ctx2.lineWidth = strokeWidth;\n                ctx2.beginPath(); ctx2.moveTo(polyRef.current[0].x, polyRef.current[0].y);\n                for (let p of polyRef.current.slice(1)) ctx2.lineTo(p.x, p.y);\n                ctx2.lineTo(pos.x, pos.y); ctx2.stroke(); return;\n            }\n            if (activeTool === \"curve\" && curveRef.current.length) {\n                ctx2.clearRect(0, 0, c2.width, c2.height);\n                const pts = [...curveRef.current, pos];\n                const shape = {\n                    tool: \"curve\",\n                    points: pts,\n                    strokeWidth,\n                    lineColor,\n                };\n                ctx2.lineWidth = shape.strokeWidth;\n                ctx2.strokeStyle = shape.lineColor;\n                drawShape(ctx2, shape, 0, 0);\n                return;\n            }\n            if (!isDrawing) return;\n            ctx2.clearRect(0, 0, c2.width, c2.height);\n            const { x, y } = pos;\n\n            const shape = {\n                tool: activeTool,\n                x0: startPos.x,\n                y0: startPos.y,\n                x1: x,\n                y1: y,\n                isSquare: e.shiftKey && activeTool === \"square\",\n                isCircle: e.shiftKey && activeTool === \"circle\",\n                strokeWidth: 1,\n                lineColor: \"black\",\n                fillColor: \"transparent\"\n            }\n            ctx2.fillStyle = shape.fillColor;\n            ctx2.strokeStyle = shape.lineColor;\n            ctx2.lineWidth = shape.strokeWidth;\n\n            drawShape(ctx2, shape, 0, 0);\n        };\n\n        const up = e => {\n            if (dragRef.current.isRotating) {\n                // 1) grab rotation info\n                const { shapeIndex, center } = dragRef.current;\n                const shape = shapesRef.current[shapeIndex];\n\n                dragRef.current.isRotating = false;\n\n                redrawAll();\n                return;\n            }\n            if (dragRef.current.isResizing) {\n                dragRef.current.isResizing = false;\n                dragRef.current.handleIndex = null;\n                dragRef.current.origShape = null;\n                return;\n            }\n            if (activeTool === \"cursor\" && dragRef.current.isDragging) {\n                dragRef.current.isDragging = false;\n                dragRef.current.shapeIndex = null;\n                return;\n            }\n            if ([\"poly-line\", \"curve\"].includes(activeTool)) return;\n            if (!isDrawing) return;\n            const pos = getPos(e);\n            if (pos.x === startPos.x && pos.y === startPos.y) {\n                ctx2.clearRect(0, 0, c2.width, c2.height);\n                setIsDrawing(false);\n                return;\n            }\n            const isCircle = activeTool === \"circle\" && e.shiftKey;\n            const isSquare = activeTool === \"square\" && e.shiftKey;\n\n            const newShape = {\n                tool: activeTool,\n                x0: startPos.x, y0: startPos.y,\n                x1: pos.x, y1: pos.y,\n                lineColor, fillColor, strokeWidth,\n                isCircle, isSquare,\n                rotation: 0,\n                selected: false\n            };\n\n            shapesRef.current.push(newShape);\n\n            undoStack.current.push({ type: 'add', shapes: [newShape] });\n            // clear redoStack because it's a brand-new action\n            redoStack.current = [];\n\n            shapesRef.current.forEach(s => (s.selected = false));\n            shapesRef.current[shapesRef.current.length - 1].selected = true;\n            redrawAll();\n            ctx2.clearRect(0, 0, c2.width, c2.height);\n            setIsDrawing(false);\n        };\n\n        const finishPoly = e => {\n            if (activeTool !== \"poly-line\" || polyRef.current.length < 2) return;\n            const newShape = {\n                tool: \"poly-line\",\n                points: polyRef.current.slice(),\n                lineColor, fillColor, strokeWidth,\n                selected: false\n            };\n            shapesRef.current.push(newShape);\n\n            undoStack.current.push({ type: 'add', shapes: [newShape] });\n            // clear redoStack because it's a brand-new action\n            redoStack.current = [];\n\n            shapesRef.current.forEach(s => (s.selected = false));\n            shapesRef.current[shapesRef.current.length - 1].selected = true;\n            redrawAll();\n            ctx2.clearRect(0, 0, c2.width, c2.height);\n            polyRef.current = [];\n        };\n\n        const finishCurve = e => {\n            if (activeTool !== \"curve\" || curveRef.current.length < 2) return;\n\n            // 1. capture the final click\n            const pos = getPos(e);\n            curveRef.current.push(pos);\n\n            // 2. push the full point list\n            const newShape = {\n                tool: \"curve\",\n                points: curveRef.current.slice(),\n                lineColor, fillColor, strokeWidth,\n                selected: false\n            };\n            shapesRef.current.push(newShape);\n\n            undoStack.current.push({ type: 'add', shapes: [newShape] });\n            // clear redoStack because it's a brand-new action\n            redoStack.current = [];\n\n            // 3. rest stays the same\n            shapesRef.current.forEach(s => (s.selected = false));\n            shapesRef.current[shapesRef.current.length - 1].selected = true;\n            redrawAll();\n            ctx2.clearRect(0, 0, c2.width, c2.height);\n\n            // 4. reset\n            curveRef.current = [];\n            setIsDrawing(false);\n        };\n\n        const onKeyDown = e => {\n            if (e.ctrlKey && !e.shiftKey && e.key.toLowerCase() === 'z') {\n                const action = undoStack.current.pop();\n                if (!action) return;\n\n                if (action.type === 'add') {\n                    // remove the shape(s) that were added\n                    shapesRef.current = shapesRef.current.filter(\n                        s => !action.shapes.includes(s)\n                    );\n                } else if (action.type === 'delete') {\n                    // re‐insert deleted shapes at their original positions\n                    action.shapes.forEach((shape, i) => {\n                        const idx = action.indices[i];\n                        shapesRef.current.splice(idx, 0, shape);\n                    });\n                }\n\n                redoStack.current.push(action);\n                redrawAll();\n            }\n\n            // REDO\n            else if (e.ctrlKey && e.shiftKey && e.key.toLowerCase() === 'z') {\n                const action = redoStack.current.pop();\n                if (!action) return;\n\n                if (action.type === 'add') {\n                    // re‐add those shapes\n                    shapesRef.current.push(...action.shapes);\n                } else if (action.type === 'delete') {\n                    // re‐delete them\n                    shapesRef.current = shapesRef.current.filter(\n                        s => !action.shapes.includes(s)\n                    );\n                }\n\n                undoStack.current.push(action);\n                redrawAll();\n            }\n            else if (e.key === \"Delete\") {\n                const deleted = shapesRef.current.filter(s => s.selected);\n                if (deleted.length) {\n                    // remember their original indices if you care about insert order:\n                    const indices = deleted.map(s => shapesRef.current.indexOf(s));\n                    shapesRef.current = shapesRef.current.filter(s => !s.selected);\n                    undoStack.current.push({ type: 'delete', shapes: deleted, indices });\n                    redoStack.current = [];\n                    redrawAll();\n                }\n            }\n        };\n\n        c2.addEventListener(\"mousedown\", down);\n        c2.addEventListener(\"mousemove\", move);\n        c2.addEventListener(\"mouseup\", up);\n        c2.addEventListener(\"dblclick\", finishPoly);\n        c2.addEventListener(\"dblclick\", finishCurve);\n        window.addEventListener(\"keydown\", onKeyDown);\n        return () => {\n            c2.removeEventListener(\"mousedown\", down);\n            c2.removeEventListener(\"mousemove\", move);\n            c2.removeEventListener(\"mouseup\", up);\n            c2.removeEventListener(\"dblclick\", finishPoly);\n            c2.removeEventListener(\"dblclick\", finishCurve);\n            window.removeEventListener(\"keydown\", onKeyDown);\n        };\n    }, [activeTool, isDrawing, startPos, lineColor, fillColor, strokeWidth, showGrid, snapToGrid]);\n\n    return (\n        <div ref={containerRef} className=\"canvas-container\">\n            <canvas ref={c1Ref} />\n            <canvas ref={c2Ref} style={{ backgroundColor: \"transparent\" }} />\n        </div>\n    );\n});\n\nexport default Canvas;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}