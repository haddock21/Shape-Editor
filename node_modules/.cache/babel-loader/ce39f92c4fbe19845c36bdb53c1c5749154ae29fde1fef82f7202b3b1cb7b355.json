{"ast":null,"code":"var _jsxFileName = \"/home/nightsquid/Desktop/GUI II/studyspace/src/components/Canvas.js\",\n  _s = $RefreshSig$();\n// src/components/Canvas.js\nimport React, { forwardRef, useImperativeHandle, useRef, useEffect, useState } from \"react\";\nimport { jsPDF } from \"jspdf\";\nimport \"../css/canvas.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Canvas = /*#__PURE__*/_s(/*#__PURE__*/forwardRef(_c = _s(({\n  activeTool,\n  lineColor,\n  fillColor\n}, ref) => {\n  _s();\n  const containerRef = useRef(null);\n  const c1Ref = useRef(null);\n  const c2Ref = useRef(null);\n  const shapesRef = useRef([]);\n  const redoRef = useRef([]);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [startPos, setStartPos] = useState({\n    x: 0,\n    y: 0\n  });\n\n  // 1) Expose export/load/download handlers\n  useImperativeHandle(ref, () => ({\n    exportShapes: () => {\n      const data = JSON.stringify(shapesRef.current, null, 2);\n      const blob = new Blob([data], {\n        type: \"application/json\"\n      });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement(\"a\");\n      a.href = url;\n      a.download = \"shapes.json\";\n      a.click();\n      URL.revokeObjectURL(url);\n    },\n    downloadJPEG: () => {\n      const shapes = shapesRef.current;\n      const pad = 20;\n\n      // 1) Compute the tight bounds for all shapes (including circles/polygons)\n      let minX = Infinity,\n        minY = Infinity;\n      let maxX = -Infinity,\n        maxY = -Infinity;\n      shapes.forEach(s => {\n        if (s.tool === \"circle\" || s.tool === \"polygon\") {\n          const r = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n          minX = Math.min(minX, s.x0 - r);\n          maxX = Math.max(maxX, s.x0 + r);\n          minY = Math.min(minY, s.y0 - r);\n          maxY = Math.max(maxY, s.y0 + r);\n        } else {\n          minX = Math.min(minX, s.x0, s.x1);\n          maxX = Math.max(maxX, s.x0, s.x1);\n          minY = Math.min(minY, s.y0, s.y1);\n          maxY = Math.max(maxY, s.y0, s.y1);\n        }\n      });\n\n      // If no shapes, default to entire canvas\n      if (minX === Infinity) {\n        minX = 0;\n        minY = 0;\n        maxX = c1Ref.current.width;\n        maxY = c1Ref.current.height;\n      }\n\n      // 2) Add padding and clamp to canvas size\n      minX = minX - pad;\n      minY = minY - pad;\n      maxX = maxX + pad;\n      maxY = maxY + pad;\n      const sw = maxX - minX;\n      const sh = maxY - minY;\n\n      // 3) Create offscreen canvas exactly sw×sh\n      const tmp = document.createElement(\"canvas\");\n      tmp.width = sw;\n      tmp.height = sh;\n\n      // 4) Replay your redrawAll INTO that offscreen canvas,\n      //    offsetting every shape by (-minX, -minY)\n      redrawAll({\n        current: tmp\n      }, -minX, -minY, \"#ffffff\");\n\n      // 5) Export the offscreen canvas as JPEG\n      const dataURL = tmp.toDataURL(\"image/jpeg\", 1.0);\n      const link = document.createElement(\"a\");\n      link.href = dataURL;\n      link.download = \"shapes.jpg\";\n      link.click();\n    },\n    downloadPDF: () => {\n      const shapes = shapesRef.current;\n      const pad = 20;\n\n      // 1) compute tight bounds (incl. full circles/polygons)\n      let minX = Infinity,\n        minY = Infinity;\n      let maxX = -Infinity,\n        maxY = -Infinity;\n      shapes.forEach(s => {\n        if (s.tool === \"circle\" || s.tool === \"polygon\") {\n          const r = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n          minX = Math.min(minX, s.x0 - r);\n          maxX = Math.max(maxX, s.x0 + r);\n          minY = Math.min(minY, s.y0 - r);\n          maxY = Math.max(maxY, s.y0 + r);\n        } else {\n          minX = Math.min(minX, s.x0, s.x1);\n          maxX = Math.max(maxX, s.x0, s.x1);\n          minY = Math.min(minY, s.y0, s.y1);\n          maxY = Math.max(maxY, s.y0, s.y1);\n        }\n      });\n\n      // fallback to full canvas if no shapes\n      if (minX === Infinity) {\n        minX = 0;\n        minY = 0;\n        maxX = c1Ref.current.width;\n        maxY = c1Ref.current.height;\n      }\n\n      // 2) apply padding (no clamping)\n      minX -= pad;\n      minY -= pad;\n      maxX += pad;\n      maxY += pad;\n      const sw = maxX - minX;\n      const sh = maxY - minY;\n\n      // 3) offscreen canvas exactly sw×sh\n      const tmp = document.createElement(\"canvas\");\n      tmp.width = sw;\n      tmp.height = sh;\n\n      // replay draw\n      redrawAll({\n        current: tmp\n      }, -minX, -minY, \"#ffffff\");\n\n      // 4) setup jsPDF\n      const orientation = sw > sh ? \"landscape\" : \"portrait\";\n      const pdf = new jsPDF({\n        orientation,\n        unit: \"px\",\n        format: \"a4\"\n      });\n      const pageW = pdf.internal.pageSize.getWidth();\n      const pageH = pdf.internal.pageSize.getHeight();\n\n      // 5) compute scale to fit\n      const scale = Math.min(pageW / sw, pageH / sh);\n\n      // 6) split vertically into pages if needed\n      let yOffset = 0;\n      while (yOffset < sh) {\n        // slice height in source pixels\n        const sliceH = Math.min(sh - yOffset, pageH / scale);\n\n        // draw slice to a tiny canvas\n        const slice = document.createElement(\"canvas\");\n        slice.width = sw;\n        slice.height = sliceH;\n        slice.getContext(\"2d\").drawImage(tmp, 0, yOffset, sw, sliceH, 0, 0, sw, sliceH);\n\n        // add slice image to PDF\n        const imgData = slice.toDataURL(\"image/jpeg\", 1.0);\n        const imgW = sw * scale,\n          imgH = sliceH * scale;\n        const xPos = (pageW - imgW) / 2;\n        pdf.addImage(imgData, \"JPEG\", xPos, 0, imgW, imgH);\n        yOffset += sliceH;\n        if (yOffset < sh) pdf.addPage();\n      }\n\n      // 7) save\n      pdf.save(\"shapes.pdf\");\n    },\n    loadShapes: arr => {\n      shapesRef.current = arr.map(s => ({\n        ...s,\n        selected: false\n      }));\n      redrawAll();\n    }\n  }));\n\n  // 2) Resize loop: keep canvas internal size in sync with CSS size\n  useEffect(() => {\n    const resize = () => {\n      const {\n        width,\n        height\n      } = containerRef.current.getBoundingClientRect();\n      c1Ref.current.width = width;\n      c1Ref.current.height = height;\n      c2Ref.current.width = width;\n      c2Ref.current.height = height;\n      redrawAll();\n    };\n    resize();\n    window.addEventListener(\"resize\", resize);\n    return () => window.removeEventListener(\"resize\", resize);\n  }, []);\n\n  // 3) Redraw everything (with baked-in background)\n  function redrawAll(context = c1Ref, offsetX = 0, offsetY = 0, backgroundColor = \"#979797\") {\n    const c = context.current;\n    const ctx = c.getContext(\"2d\");\n    const w = ctx.canvas.width;\n    const h = ctx.canvas.height;\n\n    // 1) clear & paint background\n    ctx.clearRect(0, 0, w, h);\n    ctx.fillStyle = backgroundColor;\n    ctx.fillRect(0, 0, w, h);\n\n    // 2) draw each shape, offset by offsetX/offsetY\n    shapesRef.current.forEach(s => {\n      const lc = s.lineColor || lineColor;\n      const fc = s.fillColor || fillColor;\n      ctx.save();\n      ctx.strokeStyle = lc;\n      ctx.fillStyle = fc;\n      ctx.lineWidth = 1;\n      ctx.beginPath();\n      const x0 = s.x0 + offsetX;\n      const y0 = s.y0 + offsetY;\n      const x1 = s.x1 + offsetX;\n      const y1 = s.y1 + offsetY;\n      switch (s.tool) {\n        case \"square\":\n          ctx.fillRect(x0, y0, x1 - x0, y1 - y0);\n          ctx.strokeRect(x0, y0, x1 - x0, y1 - y0);\n          break;\n        case \"line\":\n          ctx.moveTo(x0, y0);\n          ctx.lineTo(x1, y1);\n          ctx.stroke();\n          break;\n        case \"circle\":\n          const r = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n          ctx.arc(x0, y0, r, 0, 2 * Math.PI);\n          ctx.fill();\n          ctx.stroke();\n          break;\n        case \"triangle\":\n          ctx.moveTo(x0, y0);\n          ctx.lineTo(x1, y0);\n          ctx.lineTo((x0 + x1) / 2, y1);\n          ctx.closePath();\n          ctx.fill();\n          ctx.stroke();\n          break;\n        case \"polygon\":\n          const sides = 5;\n          const radius = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n          const step = 2 * Math.PI / sides;\n          for (let i = 0; i < sides; i++) {\n            const ang = i * step - Math.PI / 2;\n            const px = s.x0 + radius * Math.cos(ang) + offsetX;\n            const py = s.y0 + radius * Math.sin(ang) + offsetY;\n            i === 0 ? ctx.moveTo(px, py) : ctx.lineTo(px, py);\n          }\n          ctx.closePath();\n          ctx.fill();\n          ctx.stroke();\n          break;\n      }\n\n      // 3) if shape is selected, draw red bounding box\n      if (s.selected) {\n        const bx0 = Math.min(s.x0, s.x1) + offsetX;\n        const by0 = Math.min(s.y0, s.y1) + offsetY;\n        const bw = Math.abs(s.x1 - s.x0);\n        const bh = Math.abs(s.y1 - s.y0);\n        ctx.strokeStyle = \"red\";\n        ctx.strokeRect(bx0, by0, bw, bh);\n      }\n      ctx.restore();\n    });\n  }\n\n  // 4) Drawing & selection logic\n  useEffect(() => {\n    const c2 = c2Ref.current;\n    const ctx2 = c2.getContext(\"2d\");\n    const getPos = e => {\n      const r = c2.getBoundingClientRect();\n      return {\n        x: e.clientX - r.left,\n        y: e.clientY - r.top\n      };\n    };\n    const down = e => {\n      if (activeTool === \"cursor\") {\n        const pos = getPos(e);\n        shapesRef.current.forEach(s => s.selected = false);\n        for (let i = shapesRef.current.length - 1; i >= 0; i--) {\n          const s = shapesRef.current[i],\n            minX = Math.min(s.x0, s.x1),\n            maxX = Math.max(s.x0, s.x1),\n            minY = Math.min(s.y0, s.y1),\n            maxY = Math.max(s.y0, s.y1);\n          if (pos.x >= minX && pos.x <= maxX && pos.y >= minY && pos.y <= maxY) {\n            s.selected = true;\n            break;\n          }\n        }\n        redrawAll();\n        return;\n      }\n      if (![\"square\", \"line\", \"circle\", \"triangle\", \"polygon\"].includes(activeTool)) return;\n      setStartPos(getPos(e));\n      setIsDrawing(true);\n    };\n    const move = e => {\n      if (!isDrawing) return;\n      const {\n        x,\n        y\n      } = getPos(e);\n      const dx = x - startPos.x,\n        dy = y - startPos.y;\n      ctx2.clearRect(0, 0, c2.width, c2.height);\n      ctx2.strokeStyle = lineColor;\n      ctx2.beginPath();\n      switch (activeTool) {\n        case \"square\":\n          ctx2.strokeRect(startPos.x, startPos.y, dx, dy);\n          break;\n        case \"line\":\n          ctx2.moveTo(startPos.x, startPos.y);\n          ctx2.lineTo(x, y);\n          ctx2.stroke();\n          break;\n        case \"circle\":\n          ctx2.arc(startPos.x, startPos.y, Math.hypot(dx, dy), 0, 2 * Math.PI);\n          ctx2.stroke();\n          break;\n        case \"triangle\":\n          ctx2.moveTo(startPos.x, startPos.y);\n          ctx2.lineTo(startPos.x + dx, startPos.y);\n          ctx2.lineTo(startPos.x + dx / 2, startPos.y + dy);\n          ctx2.closePath();\n          ctx2.stroke();\n          break;\n        case \"polygon\":\n          const sides2 = 5,\n            rad2 = Math.hypot(dx, dy),\n            step2 = 2 * Math.PI / sides2;\n          for (let i = 0; i < sides2; i++) {\n            const ang = i * step2 - Math.PI / 2,\n              px = startPos.x + rad2 * Math.cos(ang),\n              py = startPos.y + rad2 * Math.sin(ang);\n            i === 0 ? ctx2.moveTo(px, py) : ctx2.lineTo(px, py);\n          }\n          ctx2.closePath();\n          ctx2.stroke();\n          break;\n      }\n    };\n    const up = e => {\n      if (!isDrawing) return;\n      const {\n        x,\n        y\n      } = getPos(e);\n      shapesRef.current.push({\n        tool: activeTool,\n        x0: startPos.x,\n        y0: startPos.y,\n        x1: x,\n        y1: y,\n        lineColor,\n        fillColor,\n        selected: false\n      });\n      redrawAll();\n      ctx2.clearRect(0, 0, c2.width, c2.height);\n      setIsDrawing(false);\n    };\n    const onKeyDown = e => {\n      if (e.ctrlKey && e.key === \"z\" && shapesRef.current.length) {\n        redoRef.current.push(shapesRef.current.pop());\n        redrawAll();\n      } else if (e.ctrlKey && e.shiftKey && e.key.toLowerCase() === \"z\" && redoRef.current.length) {\n        shapesRef.current.push(redoRef.current.pop());\n        redrawAll();\n      }\n    };\n    c2.addEventListener(\"mousedown\", down);\n    c2.addEventListener(\"mousemove\", move);\n    c2.addEventListener(\"mouseup\", up);\n    window.addEventListener(\"keydown\", onKeyDown);\n    return () => {\n      c2.removeEventListener(\"mousedown\", down);\n      c2.removeEventListener(\"mousemove\", move);\n      c2.removeEventListener(\"mouseup\", up);\n      window.removeEventListener(\"keydown\", onKeyDown);\n    };\n  }, [activeTool, isDrawing, startPos, lineColor, fillColor]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    className: \"canvas-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: c1Ref\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 391,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: c2Ref,\n      style: {\n        backgroundColor: \"transparent\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 392,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 390,\n    columnNumber: 9\n  }, this);\n}, \"UJLDpA+bOaQrWpjxwsKEiK11vyM=\")), \"UJLDpA+bOaQrWpjxwsKEiK11vyM=\");\n_c2 = Canvas;\nexport default Canvas;\nvar _c, _c2;\n$RefreshReg$(_c, \"Canvas$forwardRef\");\n$RefreshReg$(_c2, \"Canvas\");","map":{"version":3,"names":["React","forwardRef","useImperativeHandle","useRef","useEffect","useState","jsPDF","jsxDEV","_jsxDEV","Canvas","_s","_c","activeTool","lineColor","fillColor","ref","containerRef","c1Ref","c2Ref","shapesRef","redoRef","isDrawing","setIsDrawing","startPos","setStartPos","x","y","exportShapes","data","JSON","stringify","current","blob","Blob","type","url","URL","createObjectURL","a","document","createElement","href","download","click","revokeObjectURL","downloadJPEG","shapes","pad","minX","Infinity","minY","maxX","maxY","forEach","s","tool","r","Math","hypot","x1","x0","y1","y0","min","max","width","height","sw","sh","tmp","redrawAll","dataURL","toDataURL","link","downloadPDF","orientation","pdf","unit","format","pageW","internal","pageSize","getWidth","pageH","getHeight","scale","yOffset","sliceH","slice","getContext","drawImage","imgData","imgW","imgH","xPos","addImage","addPage","save","loadShapes","arr","map","selected","resize","getBoundingClientRect","window","addEventListener","removeEventListener","context","offsetX","offsetY","backgroundColor","c","ctx","w","canvas","h","clearRect","fillStyle","fillRect","lc","fc","strokeStyle","lineWidth","beginPath","strokeRect","moveTo","lineTo","stroke","arc","PI","fill","closePath","sides","radius","step","i","ang","px","cos","py","sin","bx0","by0","bw","abs","bh","restore","c2","ctx2","getPos","e","clientX","left","clientY","top","down","pos","length","includes","move","dx","dy","sides2","rad2","step2","up","push","onKeyDown","ctrlKey","key","pop","shiftKey","toLowerCase","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","_c2","$RefreshReg$"],"sources":["/home/nightsquid/Desktop/GUI II/studyspace/src/components/Canvas.js"],"sourcesContent":["// src/components/Canvas.js\nimport React, {\n    forwardRef,\n    useImperativeHandle,\n    useRef,\n    useEffect,\n    useState\n} from \"react\";\nimport { jsPDF } from \"jspdf\";\nimport \"../css/canvas.css\";\n\nconst Canvas = forwardRef(({ activeTool, lineColor, fillColor }, ref) => {\n    const containerRef = useRef(null);\n    const c1Ref = useRef(null);\n    const c2Ref = useRef(null);\n\n    const shapesRef = useRef([]);\n    const redoRef = useRef([]);\n\n    const [isDrawing, setIsDrawing] = useState(false);\n    const [startPos, setStartPos] = useState({ x: 0, y: 0 });\n\n    // 1) Expose export/load/download handlers\n    useImperativeHandle(ref, () => ({\n        exportShapes: () => {\n            const data = JSON.stringify(shapesRef.current, null, 2);\n            const blob = new Blob([data], { type: \"application/json\" });\n            const url = URL.createObjectURL(blob);\n            const a = document.createElement(\"a\");\n            a.href = url; a.download = \"shapes.json\"; a.click();\n            URL.revokeObjectURL(url);\n        },\n        downloadJPEG: () => {\n            const shapes = shapesRef.current;\n            const pad = 20;\n\n            // 1) Compute the tight bounds for all shapes (including circles/polygons)\n            let minX = Infinity, minY = Infinity;\n            let maxX = -Infinity, maxY = -Infinity;\n\n            shapes.forEach(s => {\n                if (s.tool === \"circle\" || s.tool === \"polygon\") {\n                    const r = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n                    minX = Math.min(minX, s.x0 - r);\n                    maxX = Math.max(maxX, s.x0 + r);\n                    minY = Math.min(minY, s.y0 - r);\n                    maxY = Math.max(maxY, s.y0 + r);\n                } else {\n                    minX = Math.min(minX, s.x0, s.x1);\n                    maxX = Math.max(maxX, s.x0, s.x1);\n                    minY = Math.min(minY, s.y0, s.y1);\n                    maxY = Math.max(maxY, s.y0, s.y1);\n                }\n            });\n\n            // If no shapes, default to entire canvas\n            if (minX === Infinity) {\n                minX = 0; minY = 0;\n                maxX = c1Ref.current.width;\n                maxY = c1Ref.current.height;\n            }\n\n            // 2) Add padding and clamp to canvas size\n            minX = minX - pad;\n            minY = minY - pad;\n            maxX = maxX + pad;\n            maxY = maxY + pad;\n\n            const sw = maxX - minX;\n            const sh = maxY - minY;\n\n            // 3) Create offscreen canvas exactly sw×sh\n            const tmp = document.createElement(\"canvas\");\n            tmp.width = sw;\n            tmp.height = sh;\n\n            // 4) Replay your redrawAll INTO that offscreen canvas,\n            //    offsetting every shape by (-minX, -minY)\n            redrawAll({ current: tmp }, -minX, -minY, \"#ffffff\");\n\n            // 5) Export the offscreen canvas as JPEG\n            const dataURL = tmp.toDataURL(\"image/jpeg\", 1.0);\n            const link = document.createElement(\"a\");\n            link.href = dataURL;\n            link.download = \"shapes.jpg\";\n            link.click();\n        },\n        downloadPDF: () => {\n            const shapes = shapesRef.current;\n            const pad = 20;\n\n            // 1) compute tight bounds (incl. full circles/polygons)\n            let minX = Infinity, minY = Infinity;\n            let maxX = -Infinity, maxY = -Infinity;\n\n            shapes.forEach(s => {\n                if (s.tool === \"circle\" || s.tool === \"polygon\") {\n                    const r = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n                    minX = Math.min(minX, s.x0 - r);\n                    maxX = Math.max(maxX, s.x0 + r);\n                    minY = Math.min(minY, s.y0 - r);\n                    maxY = Math.max(maxY, s.y0 + r);\n                } else {\n                    minX = Math.min(minX, s.x0, s.x1);\n                    maxX = Math.max(maxX, s.x0, s.x1);\n                    minY = Math.min(minY, s.y0, s.y1);\n                    maxY = Math.max(maxY, s.y0, s.y1);\n                }\n            });\n\n            // fallback to full canvas if no shapes\n            if (minX === Infinity) {\n                minX = 0; minY = 0;\n                maxX = c1Ref.current.width;\n                maxY = c1Ref.current.height;\n            }\n\n            // 2) apply padding (no clamping)\n            minX -= pad;\n            minY -= pad;\n            maxX += pad;\n            maxY += pad;\n\n            const sw = maxX - minX;\n            const sh = maxY - minY;\n\n            // 3) offscreen canvas exactly sw×sh\n            const tmp = document.createElement(\"canvas\");\n            tmp.width = sw;\n            tmp.height = sh;\n            \n            // replay draw\n            redrawAll({ current: tmp }, -minX, -minY, \"#ffffff\");\n\n            // 4) setup jsPDF\n            const orientation = sw > sh ? \"landscape\" : \"portrait\";\n            const pdf = new jsPDF({ orientation, unit: \"px\", format: \"a4\" });\n            const pageW = pdf.internal.pageSize.getWidth();\n            const pageH = pdf.internal.pageSize.getHeight();\n\n            // 5) compute scale to fit\n            const scale = Math.min(pageW / sw, pageH / sh);\n\n            // 6) split vertically into pages if needed\n            let yOffset = 0;\n            while (yOffset < sh) {\n                // slice height in source pixels\n                const sliceH = Math.min(sh - yOffset, pageH / scale);\n\n                // draw slice to a tiny canvas\n                const slice = document.createElement(\"canvas\");\n                slice.width = sw;\n                slice.height = sliceH;\n                slice.getContext(\"2d\").drawImage(\n                    tmp,\n                    0, yOffset, sw, sliceH,\n                    0, 0, sw, sliceH\n                );\n\n                // add slice image to PDF\n                const imgData = slice.toDataURL(\"image/jpeg\", 1.0);\n                const imgW = sw * scale, imgH = sliceH * scale;\n                const xPos = (pageW - imgW) / 2;\n                pdf.addImage(imgData, \"JPEG\", xPos, 0, imgW, imgH);\n\n                yOffset += sliceH;\n                if (yOffset < sh) pdf.addPage();\n            }\n\n            // 7) save\n            pdf.save(\"shapes.pdf\");\n        },\n\n        loadShapes: (arr) => {\n            shapesRef.current = arr.map(s => ({ ...s, selected: false }));\n            redrawAll();\n        }\n    }));\n\n    // 2) Resize loop: keep canvas internal size in sync with CSS size\n    useEffect(() => {\n        const resize = () => {\n            const { width, height } = containerRef.current.getBoundingClientRect();\n            c1Ref.current.width = width;\n            c1Ref.current.height = height;\n            c2Ref.current.width = width;\n            c2Ref.current.height = height;\n            redrawAll();\n        };\n        resize();\n        window.addEventListener(\"resize\", resize);\n        return () => window.removeEventListener(\"resize\", resize);\n    }, []);\n\n    // 3) Redraw everything (with baked-in background)\n    function redrawAll(context = c1Ref, offsetX = 0, offsetY = 0, backgroundColor = \"#979797\") {\n        const c = context.current;\n        const ctx = c.getContext(\"2d\")\n        const w = ctx.canvas.width;\n        const h = ctx.canvas.height;\n\n        // 1) clear & paint background\n        ctx.clearRect(0, 0, w, h);\n        ctx.fillStyle = backgroundColor;\n        ctx.fillRect(0, 0, w, h);\n\n        // 2) draw each shape, offset by offsetX/offsetY\n        shapesRef.current.forEach(s => {\n            const lc = s.lineColor || lineColor;\n            const fc = s.fillColor || fillColor;\n            ctx.save();\n            ctx.strokeStyle = lc;\n            ctx.fillStyle = fc;\n            ctx.lineWidth = 1;\n            ctx.beginPath();\n\n            const x0 = s.x0 + offsetX;\n            const y0 = s.y0 + offsetY;\n            const x1 = s.x1 + offsetX;\n            const y1 = s.y1 + offsetY;\n\n            switch (s.tool) {\n                case \"square\":\n                    ctx.fillRect(x0, y0, x1 - x0, y1 - y0);\n                    ctx.strokeRect(x0, y0, x1 - x0, y1 - y0);\n                    break;\n\n                case \"line\":\n                    ctx.moveTo(x0, y0);\n                    ctx.lineTo(x1, y1);\n                    ctx.stroke();\n                    break;\n\n                case \"circle\":\n                    const r = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n                    ctx.arc(x0, y0, r, 0, 2 * Math.PI);\n                    ctx.fill();\n                    ctx.stroke();\n                    break;\n\n                case \"triangle\":\n                    ctx.moveTo(x0, y0);\n                    ctx.lineTo(x1, y0);\n                    ctx.lineTo((x0 + x1) / 2, y1);\n                    ctx.closePath();\n                    ctx.fill();\n                    ctx.stroke();\n                    break;\n\n                case \"polygon\":\n                    const sides = 5;\n                    const radius = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n                    const step = (2 * Math.PI) / sides;\n                    for (let i = 0; i < sides; i++) {\n                        const ang = i * step - Math.PI / 2;\n                        const px = s.x0 + radius * Math.cos(ang) + offsetX;\n                        const py = s.y0 + radius * Math.sin(ang) + offsetY;\n                        i === 0 ? ctx.moveTo(px, py) : ctx.lineTo(px, py);\n                    }\n                    ctx.closePath();\n                    ctx.fill();\n                    ctx.stroke();\n                    break;\n            }\n\n            // 3) if shape is selected, draw red bounding box\n            if (s.selected) {\n                const bx0 = Math.min(s.x0, s.x1) + offsetX;\n                const by0 = Math.min(s.y0, s.y1) + offsetY;\n                const bw = Math.abs(s.x1 - s.x0);\n                const bh = Math.abs(s.y1 - s.y0);\n                ctx.strokeStyle = \"red\";\n                ctx.strokeRect(bx0, by0, bw, bh);\n            }\n\n            ctx.restore();\n        });\n    }\n\n    // 4) Drawing & selection logic\n    useEffect(() => {\n        const c2 = c2Ref.current;\n        const ctx2 = c2.getContext(\"2d\");\n\n        const getPos = e => {\n            const r = c2.getBoundingClientRect();\n            return { x: e.clientX - r.left, y: e.clientY - r.top };\n        };\n\n        const down = e => {\n            if (activeTool === \"cursor\") {\n                const pos = getPos(e);\n                shapesRef.current.forEach(s => s.selected = false);\n                for (let i = shapesRef.current.length - 1; i >= 0; i--) {\n                    const s = shapesRef.current[i],\n                        minX = Math.min(s.x0, s.x1), maxX = Math.max(s.x0, s.x1),\n                        minY = Math.min(s.y0, s.y1), maxY = Math.max(s.y0, s.y1);\n                    if (pos.x >= minX && pos.x <= maxX && pos.y >= minY && pos.y <= maxY) {\n                        s.selected = true; break;\n                    }\n                }\n                redrawAll();\n                return;\n            }\n            if (![\"square\", \"line\", \"circle\", \"triangle\", \"polygon\"].includes(activeTool)) return;\n            setStartPos(getPos(e));\n            setIsDrawing(true);\n        };\n\n        const move = e => {\n            if (!isDrawing) return;\n            const { x, y } = getPos(e);\n            const dx = x - startPos.x, dy = y - startPos.y;\n            ctx2.clearRect(0, 0, c2.width, c2.height);\n            ctx2.strokeStyle = lineColor;\n            ctx2.beginPath();\n            switch (activeTool) {\n                case \"square\":\n                    ctx2.strokeRect(startPos.x, startPos.y, dx, dy);\n                    break;\n                case \"line\":\n                    ctx2.moveTo(startPos.x, startPos.y);\n                    ctx2.lineTo(x, y);\n                    ctx2.stroke();\n                    break;\n                case \"circle\":\n                    ctx2.arc(startPos.x, startPos.y, Math.hypot(dx, dy), 0, 2 * Math.PI);\n                    ctx2.stroke();\n                    break;\n                case \"triangle\":\n                    ctx2.moveTo(startPos.x, startPos.y);\n                    ctx2.lineTo(startPos.x + dx, startPos.y);\n                    ctx2.lineTo(startPos.x + dx / 2, startPos.y + dy);\n                    ctx2.closePath();\n                    ctx2.stroke();\n                    break;\n                case \"polygon\":\n                    const sides2 = 5, rad2 = Math.hypot(dx, dy), step2 = 2 * Math.PI / sides2;\n                    for (let i = 0; i < sides2; i++) {\n                        const ang = i * step2 - Math.PI / 2,\n                            px = startPos.x + rad2 * Math.cos(ang),\n                            py = startPos.y + rad2 * Math.sin(ang);\n                        i === 0 ? ctx2.moveTo(px, py) : ctx2.lineTo(px, py);\n                    }\n                    ctx2.closePath();\n                    ctx2.stroke();\n                    break;\n            }\n        };\n\n        const up = e => {\n            if (!isDrawing) return;\n            const { x, y } = getPos(e);\n            shapesRef.current.push({\n                tool: activeTool,\n                x0: startPos.x, y0: startPos.y,\n                x1: x, y1: y,\n                lineColor, fillColor,\n                selected: false\n            });\n            redrawAll();\n            ctx2.clearRect(0, 0, c2.width, c2.height);\n            setIsDrawing(false);\n        };\n\n        const onKeyDown = e => {\n            if (e.ctrlKey && e.key === \"z\" && shapesRef.current.length) {\n                redoRef.current.push(shapesRef.current.pop());\n                redrawAll();\n            }\n            else if (e.ctrlKey && e.shiftKey && e.key.toLowerCase() === \"z\" && redoRef.current.length) {\n                shapesRef.current.push(redoRef.current.pop());\n                redrawAll();\n            }\n        };\n\n        c2.addEventListener(\"mousedown\", down);\n        c2.addEventListener(\"mousemove\", move);\n        c2.addEventListener(\"mouseup\", up);\n        window.addEventListener(\"keydown\", onKeyDown);\n        return () => {\n            c2.removeEventListener(\"mousedown\", down);\n            c2.removeEventListener(\"mousemove\", move);\n            c2.removeEventListener(\"mouseup\", up);\n            window.removeEventListener(\"keydown\", onKeyDown);\n        };\n    }, [activeTool, isDrawing, startPos, lineColor, fillColor]);\n\n    return (\n        <div ref={containerRef} className=\"canvas-container\">\n            <canvas ref={c1Ref} />\n            <canvas ref={c2Ref} style={{ backgroundColor: \"transparent\" }} />\n        </div>\n    );\n});\n\nexport default Canvas;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}