{"ast":null,"code":"var _jsxFileName = \"/home/nightsquid/Desktop/GUI II/studyspace/src/components/Canvas.js\",\n  _s = $RefreshSig$();\nimport React, { forwardRef, useImperativeHandle, useRef, useEffect, useState } from \"react\";\nimport { jsPDF } from \"jspdf\";\nimport \"../css/canvas.css\";\n\n// --- Helper Functions ---\n// Compute bounding box for any shape\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction getBBox(shape) {\n  if (shape.points) {\n    const xs = shape.points.map(p => p.x);\n    const ys = shape.points.map(p => p.y);\n    return {\n      xMin: Math.min(...xs),\n      yMin: Math.min(...ys),\n      xMax: Math.max(...xs),\n      yMax: Math.max(...ys)\n    };\n  }\n  if (shape.tool === \"circle\") {\n    const cx = shape.x0,\n      cy = shape.y0;\n    if (shape.isCircle) {\n      const r = Math.hypot(shape.x1 - shape.x0, shape.y1 - shape.y0);\n      return {\n        xMin: cx - r,\n        yMin: cy - r,\n        xMax: cx + r,\n        yMax: cy + r\n      };\n    } else {\n      const rx = Math.abs(shape.x1 - shape.x0);\n      const ry = Math.abs(shape.y1 - shape.y0);\n      return {\n        xMin: cx - rx,\n        yMin: cy - ry,\n        xMax: cx + rx,\n        yMax: cy + ry\n      };\n    }\n  }\n  return {\n    xMin: Math.min(shape.x0, shape.x1),\n    yMin: Math.min(shape.y0, shape.y1),\n    xMax: Math.max(shape.x0, shape.x1),\n    yMax: Math.max(shape.y0, shape.y1)\n  };\n}\n\n// Hit-test a point against any shape (strokes for lines, box for others)\nfunction hitTest(ctx, shape, x, y, defaultStroke) {\n  const path = new Path2D();\n  ctx.lineWidth = (shape.strokeWidth || defaultStroke) + 8;\n  switch (shape.tool) {\n    case \"line\":\n      path.moveTo(shape.x0, shape.y0);\n      path.lineTo(shape.x1, shape.y1);\n      return ctx.isPointInStroke(path, x, y);\n    case \"poly-line\":\n    case \"curve\":\n      if (shape.points && shape.points.length > 1) {\n        path.moveTo(shape.points[0].x, shape.points[0].y);\n        for (let p of shape.points.slice(1)) path.lineTo(p.x, p.y);\n        return ctx.isPointInStroke(path, x, y);\n      }\n      return false;\n    default:\n      const {\n        xMin,\n        yMin,\n        xMax,\n        yMax\n      } = getBBox(shape);\n      return x >= xMin && x <= xMax && y >= yMin && y <= yMax;\n  }\n}\n\n// Draw a shape onto the canvas context\nfunction drawShape(ctx, shape, offsetX = 0, offsetY = 0) {\n  const x0 = shape.x0 + offsetX;\n  const y0 = shape.y0 + offsetY;\n  const x1 = shape.x1 + offsetX;\n  const y1 = shape.y1 + offsetY;\n  switch (shape.tool) {\n    case \"square\":\n      {\n        const dx = shape.x1 - shape.x0;\n        const dy = shape.y1 - shape.y0;\n        let w, h;\n        if (shape.isSquare) {\n          const side = Math.min(Math.abs(dx), Math.abs(dy));\n          w = dx < 0 ? -side : side;\n          h = dy < 0 ? -side : side;\n        } else {\n          w = dx;\n          h = dy;\n        }\n        ctx.fillRect(shape.x0 + offsetX, shape.y0 + offsetY, w, h);\n        ctx.strokeRect(shape.x0 + offsetX, shape.y0 + offsetY, w, h);\n        return;\n      }\n    case \"line\":\n      ctx.beginPath();\n      ctx.moveTo(x0, y0);\n      ctx.lineTo(x1, y1);\n      ctx.stroke();\n      return;\n    case \"circle\":\n      ctx.beginPath();\n      if (shape.isCircle) {\n        const r = Math.hypot(shape.x1 - shape.x0, shape.y1 - shape.y0);\n        ctx.arc(x0, y0, r, 0, 2 * Math.PI);\n      } else {\n        ctx.ellipse(x0, y0, Math.abs(shape.x1 - shape.x0), Math.abs(shape.y1 - shape.y0), 0, 0, 2 * Math.PI);\n      }\n      ctx.fill();\n      ctx.stroke();\n      return;\n    case \"triangle\":\n      ctx.beginPath();\n      ctx.moveTo(x0, y0);\n      ctx.lineTo(x1, y0);\n      ctx.lineTo((x0 + x1) / 2, y1);\n      ctx.closePath();\n      ctx.fill();\n      ctx.stroke();\n      return;\n    case \"polygon\":\n      ctx.beginPath();\n      const sides = 5;\n      const radius = Math.hypot(shape.x1 - shape.x0, shape.y1 - shape.y0);\n      for (let i = 0; i < sides; i++) {\n        const ang = i * (2 * Math.PI / sides) - Math.PI / 2;\n        const px = shape.x0 + offsetX + radius * Math.cos(ang);\n        const py = shape.y0 + offsetY + radius * Math.sin(ang);\n        if (i === 0) ctx.moveTo(px, py);else ctx.lineTo(px, py);\n      }\n      ctx.closePath();\n      ctx.fill();\n      ctx.stroke();\n      return;\n    case \"poly-line\":\n      if (shape.points && shape.points.length) {\n        ctx.beginPath();\n        ctx.moveTo(shape.points[0].x + offsetX, shape.points[0].y + offsetY);\n        for (let p of shape.points.slice(1)) ctx.lineTo(p.x + offsetX, p.y + offsetY);\n        ctx.stroke();\n      }\n      return;\n    case \"curve\":\n      if (shape.points && shape.points.length) {\n        ctx.beginPath();\n        const pts = shape.points;\n        ctx.moveTo(pts[0].x + offsetX, pts[0].y + offsetY);\n        for (let i = 1; i < pts.length; i++) {\n          const prev = pts[i - 1];\n          const curr = pts[i];\n          const mx = (prev.x + curr.x) / 2 + offsetX;\n          const my = (prev.y + curr.y) / 2 + offsetY;\n          ctx.quadraticCurveTo(prev.x + offsetX, prev.y + offsetY, mx, my);\n        }\n        ctx.stroke();\n      }\n      return;\n    default:\n      return;\n  }\n}\n\n// Draw selection handles\nfunction drawSelection(ctx, shape, offsetX = 0, offsetY = 0) {\n  const R = 5;\n  if (shape.tool === \"line\") {\n    const p0 = {\n      x: shape.x0 + offsetX,\n      y: shape.y0 + offsetY\n    };\n    const p1 = {\n      x: shape.x1 + offsetX,\n      y: shape.y1 + offsetY\n    };\n    ctx.beginPath();\n    ctx.moveTo(p0.x, p0.y);\n    ctx.lineTo(p1.x, p1.y);\n    ctx.stroke();\n    [p0, p1].forEach(pt => {\n      ctx.beginPath();\n      ctx.arc(pt.x, pt.y, R, 0, 2 * Math.PI);\n      ctx.fill();\n      ctx.stroke();\n    });\n    return;\n  }\n  const {\n    xMin,\n    yMin,\n    xMax,\n    yMax\n  } = getBBox(shape);\n  ctx.strokeRect(xMin, yMin, xMax - xMin, yMax - yMin);\n  [{\n    x: xMin,\n    y: yMin\n  }, {\n    x: xMax,\n    y: yMin\n  }, {\n    x: xMax,\n    y: yMax\n  }, {\n    x: xMin,\n    y: yMax\n  }].forEach(pt => {\n    ctx.beginPath();\n    ctx.arc(pt.x, pt.y, R, 0, 2 * Math.PI);\n    ctx.fill();\n    ctx.stroke();\n  });\n}\nconst Canvas = /*#__PURE__*/_s(/*#__PURE__*/forwardRef(_c = _s(({\n  activeTool,\n  lineColor,\n  fillColor,\n  strokeWidth\n}, ref) => {\n  _s();\n  const containerRef = useRef(null);\n  const c1Ref = useRef(null);\n  const c2Ref = useRef(null);\n  const shapesRef = useRef([]);\n  const redoRef = useRef([]);\n  const polyRef = useRef([]);\n  const curveRef = useRef([]);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [startPos, setStartPos] = useState({\n    x: 0,\n    y: 0\n  });\n  const dragRef = useRef({\n    isDragging: false,\n    prevPos: {\n      x: 0,\n      y: 0\n    },\n    shapeIndex: null\n  });\n  useImperativeHandle(ref, () => ({\n    exportShapes: () => {\n      const data = JSON.stringify(shapesRef.current, null, 2);\n      const blob = new Blob([data], {\n        type: \"application/json\"\n      });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement(\"a\");\n      a.href = url;\n      a.download = \"shapes.json\";\n      a.click();\n      URL.revokeObjectURL(url);\n    },\n    downloadJPEG: () => {\n      const shapes = shapesRef.current;\n      const pad = 20;\n      let minX = Infinity,\n        minY = Infinity;\n      let maxX = -Infinity,\n        maxY = -Infinity;\n      shapes.forEach(s => {\n        if (s.tool === \"circle\" || s.tool === \"polygon\") {\n          const r = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n          minX = Math.min(minX, s.x0 - r);\n          maxX = Math.max(maxX, s.x0 + r);\n          minY = Math.min(minY, s.y0 - r);\n          maxY = Math.max(maxY, s.y0 + r);\n        } else {\n          minX = Math.min(minX, s.x0, s.x1);\n          maxX = Math.max(maxX, s.x0, s.x1);\n          minY = Math.min(minY, s.y0, s.y1);\n          maxY = Math.max(maxY, s.y0, s.y1);\n        }\n      });\n      if (minX === Infinity) {\n        minX = 0;\n        minY = 0;\n        maxX = c1Ref.current.width;\n        maxY = c1Ref.current.height;\n      }\n      minX -= pad;\n      minY -= pad;\n      maxX += pad;\n      maxY += pad;\n      const sw = maxX - minX;\n      const sh = maxY - minY;\n      const tmp = document.createElement(\"canvas\");\n      tmp.width = sw;\n      tmp.height = sh;\n      redrawAll({\n        current: tmp\n      }, -minX, -minY, \"#ffffff\");\n      const dataURL = tmp.toDataURL(\"image/jpeg\", 1.0);\n      const link = document.createElement(\"a\");\n      link.href = dataURL;\n      link.download = \"shapes.jpg\";\n      link.click();\n    },\n    downloadPDF: () => {\n      const shapes = shapesRef.current;\n      const pad = 20;\n      let minX = Infinity,\n        minY = Infinity;\n      let maxX = -Infinity,\n        maxY = -Infinity;\n      shapes.forEach(s => {\n        if (s.tool === \"circle\" || s.tool === \"polygon\") {\n          const r = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n          minX = Math.min(minX, s.x0 - r);\n          maxX = Math.max(maxX, s.x0 + r);\n          minY = Math.min(minY, s.y0 - r);\n          maxY = Math.max(maxY, s.y0 + r);\n        } else {\n          minX = Math.min(minX, s.x0, s.x1);\n          maxX = Math.max(maxX, s.x0, s.x1);\n          minY = Math.min(minY, s.y0, s.y1);\n          maxY = Math.max(maxY, s.y0, s.y1);\n        }\n      });\n      if (minX === Infinity) {\n        minX = 0;\n        minY = 0;\n        maxX = c1Ref.current.width;\n        maxY = c1Ref.current.height;\n      }\n      minX -= pad;\n      minY -= pad;\n      maxX += pad;\n      maxY += pad;\n      const sw = maxX - minX;\n      const sh = maxY - minY;\n      const tmp = document.createElement(\"canvas\");\n      tmp.width = sw;\n      tmp.height = sh;\n      redrawAll({\n        current: tmp\n      }, -minX, -minY, \"#ffffff\");\n      const orientation = sw > sh ? \"landscape\" : \"portrait\";\n      const pdf = new jsPDF({\n        orientation,\n        unit: \"px\",\n        format: \"a4\"\n      });\n      const pageW = pdf.internal.pageSize.getWidth();\n      const pageH = pdf.internal.pageSize.getHeight();\n      const scale = Math.min(pageW / sw, pageH / sh);\n      let yOffset = 0;\n      while (yOffset < sh) {\n        const sliceH = Math.min(sh - yOffset, pageH / scale);\n        const slice = document.createElement(\"canvas\");\n        slice.width = sw;\n        slice.height = sliceH;\n        slice.getContext(\"2d\").drawImage(tmp, 0, yOffset, sw, sliceH, 0, 0, sw, sliceH);\n        const imgData = slice.toDataURL(\"image/jpeg\", 1.0);\n        const imgW = sw * scale,\n          imgH = sliceH * scale;\n        const xPos = (pageW - imgW) / 2;\n        pdf.addImage(imgData, \"JPEG\", xPos, 0, imgW, imgH);\n        yOffset += sliceH;\n        if (yOffset < sh) pdf.addPage();\n      }\n      pdf.save(\"shapes.pdf\");\n    },\n    loadShapes: arr => {\n      shapesRef.current = arr.map(s => ({\n        ...s,\n        selected: false\n      }));\n      redrawAll();\n    },\n    getShapeCount: () => shapesRef.current.length,\n    clearShapes: () => {\n      shapesRef.current = [];\n      redrawAll();\n    }\n  }));\n  useEffect(() => {\n    const resize = () => {\n      const {\n        width,\n        height\n      } = containerRef.current.getBoundingClientRect();\n      [c1Ref, c2Ref].forEach(r => {\n        r.current.width = width;\n        r.current.height = height;\n      });\n      redrawAll();\n    };\n    resize();\n    window.addEventListener(\"resize\", resize);\n    return () => window.removeEventListener(\"resize\", resize);\n  }, []);\n  useEffect(() => {\n    let dirty = false;\n    shapesRef.current.forEach(s => {\n      if (s.selected && (s.strokeWidth !== strokeWidth || s.lineColor !== lineColor || s.fillColor !== fillColor)) {\n        s.strokeWidth = strokeWidth;\n        s.lineColor = lineColor;\n        s.fillColor = fillColor;\n        dirty = true;\n      }\n    });\n    if (dirty) redrawAll();\n  }, [strokeWidth, lineColor, fillColor]);\n  function redrawAll(context = c1Ref, offsetX = 0, offsetY = 0) {\n    const c = context.current;\n    const ctx = c.getContext(\"2d\");\n    ctx.clearRect(0, 0, c.width, c.height);\n    ctx.fillStyle = \"#979797\";\n    ctx.fillRect(0, 0, c.width, c.height);\n    shapesRef.current.forEach(s => {\n      ctx.save();\n      ctx.strokeStyle = s.lineColor || lineColor;\n      ctx.fillStyle = s.fillColor || fillColor;\n      ctx.lineWidth = s.strokeWidth || strokeWidth;\n      drawShape(ctx, s, offsetX, offsetY);\n      if (s.selected) {\n        ctx.save();\n        ctx.strokeStyle = \"#ff7300\";\n        ctx.lineWidth = 2;\n        drawSelection(ctx, s, offsetX, offsetY);\n        ctx.restore();\n      }\n      ctx.restore();\n    });\n  }\n  useEffect(() => {\n    const c2 = c2Ref.current;\n    const ctx2 = c2.getContext(\"2d\");\n    const getPos = e => {\n      const r = c2.getBoundingClientRect();\n      return {\n        x: e.clientX - r.left,\n        y: e.clientY - r.top\n      };\n    };\n    const down = e => {\n      const pos = getPos(e);\n      if (activeTool === \"cursor\") {\n        const ctx1 = c1Ref.current.getContext(\"2d\");\n        shapesRef.current.forEach(s => s.selected = false);\n        for (let i = shapesRef.current.length - 1; i >= 0; i--) {\n          const s = shapesRef.current[i];\n          if (hitTest(ctx1, s, pos.x, pos.y, strokeWidth)) {\n            s.selected = true;\n            dragRef.current = {\n              isDragging: true,\n              prevPos: pos,\n              shapeIndex: i\n            };\n            redrawAll();\n            return;\n          }\n        }\n        redrawAll();\n        return;\n      }\n      if (activeTool === \"poly-line\") {\n        polyRef.current.push(pos);\n        setIsDrawing(true);\n        return;\n      }\n      if (activeTool === \"curve\") {\n        curveRef.current.push(pos);\n        setIsDrawing(true);\n        return;\n      }\n      if (![\"square\", \"line\", \"circle\", \"triangle\", \"polygon\"].includes(activeTool)) return;\n      setStartPos(pos);\n      setIsDrawing(true);\n    };\n    const move = e => {\n      const pos = getPos(e);\n      if (activeTool === \"cursor\" && dragRef.current.isDragging) {\n        const dx = pos.x - dragRef.current.prevPos.x;\n        const dy = pos.y - dragRef.current.prevPos.y;\n        const s = shapesRef.current[dragRef.current.shapeIndex];\n        if (s.points) s.points.forEach(p => {\n          p.x += dx;\n          p.y += dy;\n        });else {\n          s.x0 += dx;\n          s.y0 += dy;\n          s.x1 += dx;\n          s.y1 += dy;\n        }\n        dragRef.current.prevPos = pos;\n        redrawAll();\n        return;\n      }\n      if (activeTool === \"poly-line\" && polyRef.current.length) {\n        ctx2.clearRect(0, 0, c2.width, c2.height);\n        ctx2.strokeStyle = lineColor;\n        ctx2.lineWidth = strokeWidth;\n        ctx2.beginPath();\n        ctx2.moveTo(polyRef.current[0].x, polyRef.current[0].y);\n        for (let p of polyRef.current.slice(1)) ctx2.lineTo(p.x, p.y);\n        ctx2.lineTo(pos.x, pos.y);\n        ctx2.stroke();\n        return;\n      }\n      if (activeTool === \"curve\" && curveRef.current.length) {\n        ctx2.clearRect(0, 0, c2.width, c2.height);\n        ctx2.strokeStyle = lineColor;\n        ctx2.lineWidth = strokeWidth;\n        ctx2.beginPath();\n        const pts = curveRef.current;\n        ctx2.moveTo(pts[0].x, pts[0].y);\n        for (let i = 1; i < pts.length; i++) {\n          const prev = pts[i - 1],\n            curr = pts[i];\n          const mx = (prev.x + curr.x) / 2;\n          const my = (prev.y + curr.y) / 2;\n          ctx2.quadraticCurveTo(prev.x, prev.y, mx, my);\n        }\n        ctx2.lineTo(pos.x, pos.y);\n        ctx2.stroke();\n        return;\n      }\n      if (!isDrawing) return;\n      ctx2.clearRect(0, 0, c2.width, c2.height);\n      ctx2.strokeStyle = lineColor;\n      ctx2.lineWidth = strokeWidth;\n      ctx2.beginPath();\n      const {\n        x,\n        y\n      } = pos;\n      const dx = x - startPos.x;\n      const dy = y - startPos.y;\n      const shape = {\n        tool: activeTool,\n        // <— this is what drawShape looks at!\n        x0: startPos.x,\n        y0: startPos.y,\n        x1: x,\n        y1: y,\n        isSquare: e.shiftKey && activeTool === \"square\",\n        isCircle: e.shiftKey && activeTool === \"circle\",\n        strokeWidth: 1,\n        lineColor: \"black\",\n        fillColor: \"transparent\"\n      };\n      ctx2.fillStyle = shape.fillColor;\n      ctx2.strokeStyle = shape.lineColor;\n      ctx2.lineWidth = shape.strokeWidth;\n      drawShape(ctx2, shape, 0, 0);\n\n      /* switch (activeTool) {\n          case \"square\":\n              drawShape(ctx2, shape, 0, 0);\n              break;\n          case \"line\":\n              drawShape(ctx2)\n              break;\n          case \"circle\":\n              if (e.shiftKey) {\n                  const r = Math.min(Math.abs(dx), Math.abs(dy));\n                  ctx2.arc(startPos.x, startPos.y, r, 0, 2 * Math.PI);\n              } else {\n                  ctx2.ellipse(startPos.x, startPos.y, Math.abs(dx), Math.abs(dy), 0, 0, 2 * Math.PI);\n              }\n              ctx2.stroke();\n              break;\n          case \"triangle\":\n              ctx2.moveTo(startPos.x, startPos.y);\n              ctx2.lineTo(startPos.x + dx, startPos.y);\n              ctx2.lineTo(startPos.x + dx / 2, startPos.y + dy);\n              ctx2.closePath(); ctx2.stroke();\n              break;\n          case \"polygon\":\n              const sides2 = 5;\n              const r2 = Math.hypot(dx, dy);\n              const step2 = 2 * Math.PI / sides2;\n              ctx2.beginPath();\n              for (let i = 0; i < sides2; i++) {\n                  const ang = i * step2 - Math.PI / 2;\n                  const px = startPos.x + r2 * Math.cos(ang);\n                  const py = startPos.y + r2 * Math.sin(ang);\n                  if (i === 0) ctx2.moveTo(px, py);\n                  else ctx2.lineTo(px, py);\n              }\n              ctx2.closePath(); ctx2.stroke();\n              break;\n      } */\n    };\n    const up = e => {\n      if (activeTool === \"cursor\" && dragRef.current.isDragging) {\n        dragRef.current.isDragging = false;\n        dragRef.current.shapeIndex = null;\n        return;\n      }\n      if ([\"poly-line\", \"curve\"].includes(activeTool)) return;\n      if (!isDrawing) return;\n      const pos = getPos(e);\n      if (pos.x === startPos.x && pos.y === startPos.y) {\n        ctx2.clearRect(0, 0, c2.width, c2.height);\n        setIsDrawing(false);\n        return;\n      }\n      const isCircle = activeTool === \"circle\" && e.shiftKey;\n      const isSquare = activeTool === \"square\" && e.shiftKey;\n      shapesRef.current.push({\n        tool: activeTool,\n        x0: startPos.x,\n        y0: startPos.y,\n        x1: pos.x,\n        y1: pos.y,\n        lineColor,\n        fillColor,\n        strokeWidth,\n        isCircle,\n        isSquare,\n        selected: false\n      });\n      shapesRef.current.forEach(s => s.selected = false);\n      shapesRef.current[shapesRef.current.length - 1].selected = true;\n      redrawAll();\n      ctx2.clearRect(0, 0, c2.width, c2.height);\n      setIsDrawing(false);\n    };\n    const finishPoly = e => {\n      if (activeTool !== \"poly-line\" || polyRef.current.length < 2) return;\n      shapesRef.current.push({\n        tool: \"poly-line\",\n        points: polyRef.current.slice(),\n        lineColor,\n        fillColor,\n        strokeWidth,\n        selected: false\n      });\n      shapesRef.current.forEach(s => s.selected = false);\n      shapesRef.current[shapesRef.current.length - 1].selected = true;\n      redrawAll();\n      ctx2.clearRect(0, 0, c2.width, c2.height);\n      polyRef.current = [];\n    };\n    const finishCurve = e => {\n      if (activeTool !== \"curve\" || curveRef.current.length < 2) return;\n      shapesRef.current.push({\n        tool: \"curve\",\n        points: curveRef.current.slice(),\n        lineColor,\n        fillColor,\n        strokeWidth,\n        selected: false\n      });\n      shapesRef.current.forEach(s => s.selected = false);\n      shapesRef.current[shapesRef.current.length - 1].selected = true;\n      redrawAll();\n      ctx2.clearRect(0, 0, c2.width, c2.height);\n      curveRef.current = [];\n      setIsDrawing(false);\n    };\n    const onKeyDown = e => {\n      if (e.ctrlKey && e.key === \"z\" && shapesRef.current.length) {\n        redoRef.current.push(shapesRef.current.pop());\n        redrawAll();\n      } else if (e.ctrlKey && e.shiftKey && e.key.toLowerCase() === \"z\" && redoRef.current.length) {\n        shapesRef.current.push(redoRef.current.pop());\n        redrawAll();\n      }\n    };\n    c2.addEventListener(\"mousedown\", down);\n    c2.addEventListener(\"mousemove\", move);\n    c2.addEventListener(\"mouseup\", up);\n    c2.addEventListener(\"dblclick\", finishPoly);\n    c2.addEventListener(\"dblclick\", finishCurve);\n    window.addEventListener(\"keydown\", onKeyDown);\n    return () => {\n      c2.removeEventListener(\"mousedown\", down);\n      c2.removeEventListener(\"mousemove\", move);\n      c2.removeEventListener(\"mouseup\", up);\n      c2.removeEventListener(\"dblclick\", finishPoly);\n      c2.removeEventListener(\"dblclick\", finishCurve);\n      window.removeEventListener(\"keydown\", onKeyDown);\n    };\n  }, [activeTool, isDrawing, startPos, lineColor, fillColor, strokeWidth]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    className: \"canvas-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: c1Ref\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 546,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: c2Ref,\n      style: {\n        backgroundColor: \"transparent\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 547,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 545,\n    columnNumber: 9\n  }, this);\n}, \"86sus16Kf9AwovcVSxM5ZVzUL9M=\")), \"86sus16Kf9AwovcVSxM5ZVzUL9M=\");\n_c2 = Canvas;\nexport default Canvas;\nvar _c, _c2;\n$RefreshReg$(_c, \"Canvas$forwardRef\");\n$RefreshReg$(_c2, \"Canvas\");","map":{"version":3,"names":["React","forwardRef","useImperativeHandle","useRef","useEffect","useState","jsPDF","jsxDEV","_jsxDEV","getBBox","shape","points","xs","map","p","x","ys","y","xMin","Math","min","yMin","xMax","max","yMax","tool","cx","x0","cy","y0","isCircle","r","hypot","x1","y1","rx","abs","ry","hitTest","ctx","defaultStroke","path","Path2D","lineWidth","strokeWidth","moveTo","lineTo","isPointInStroke","length","slice","drawShape","offsetX","offsetY","dx","dy","w","h","isSquare","side","fillRect","strokeRect","beginPath","stroke","arc","PI","ellipse","fill","closePath","sides","radius","i","ang","px","cos","py","sin","pts","prev","curr","mx","my","quadraticCurveTo","drawSelection","R","p0","p1","forEach","pt","Canvas","_s","_c","activeTool","lineColor","fillColor","ref","containerRef","c1Ref","c2Ref","shapesRef","redoRef","polyRef","curveRef","isDrawing","setIsDrawing","startPos","setStartPos","dragRef","isDragging","prevPos","shapeIndex","exportShapes","data","JSON","stringify","current","blob","Blob","type","url","URL","createObjectURL","a","document","createElement","href","download","click","revokeObjectURL","downloadJPEG","shapes","pad","minX","Infinity","minY","maxX","maxY","s","width","height","sw","sh","tmp","redrawAll","dataURL","toDataURL","link","downloadPDF","orientation","pdf","unit","format","pageW","internal","pageSize","getWidth","pageH","getHeight","scale","yOffset","sliceH","getContext","drawImage","imgData","imgW","imgH","xPos","addImage","addPage","save","loadShapes","arr","selected","getShapeCount","clearShapes","resize","getBoundingClientRect","window","addEventListener","removeEventListener","dirty","context","c","clearRect","fillStyle","strokeStyle","restore","c2","ctx2","getPos","e","clientX","left","clientY","top","down","pos","ctx1","push","includes","move","shiftKey","up","finishPoly","finishCurve","onKeyDown","ctrlKey","key","pop","toLowerCase","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","backgroundColor","_c2","$RefreshReg$"],"sources":["/home/nightsquid/Desktop/GUI II/studyspace/src/components/Canvas.js"],"sourcesContent":["import React, { forwardRef, useImperativeHandle, useRef, useEffect, useState } from \"react\";\nimport { jsPDF } from \"jspdf\";\nimport \"../css/canvas.css\";\n\n// --- Helper Functions ---\n// Compute bounding box for any shape\nfunction getBBox(shape) {\n    if (shape.points) {\n        const xs = shape.points.map(p => p.x);\n        const ys = shape.points.map(p => p.y);\n        return {\n            xMin: Math.min(...xs),\n            yMin: Math.min(...ys),\n            xMax: Math.max(...xs),\n            yMax: Math.max(...ys)\n        };\n    }\n    if (shape.tool === \"circle\") {\n        const cx = shape.x0, cy = shape.y0;\n        if (shape.isCircle) {\n            const r = Math.hypot(shape.x1 - shape.x0, shape.y1 - shape.y0);\n            return { xMin: cx - r, yMin: cy - r, xMax: cx + r, yMax: cy + r };\n        } else {\n            const rx = Math.abs(shape.x1 - shape.x0);\n            const ry = Math.abs(shape.y1 - shape.y0);\n            return { xMin: cx - rx, yMin: cy - ry, xMax: cx + rx, yMax: cy + ry };\n        }\n    }\n    return {\n        xMin: Math.min(shape.x0, shape.x1),\n        yMin: Math.min(shape.y0, shape.y1),\n        xMax: Math.max(shape.x0, shape.x1),\n        yMax: Math.max(shape.y0, shape.y1)\n    };\n}\n\n// Hit-test a point against any shape (strokes for lines, box for others)\nfunction hitTest(ctx, shape, x, y, defaultStroke) {\n    const path = new Path2D();\n    ctx.lineWidth = (shape.strokeWidth || defaultStroke) + 8;\n    switch (shape.tool) {\n        case \"line\":\n            path.moveTo(shape.x0, shape.y0);\n            path.lineTo(shape.x1, shape.y1);\n            return ctx.isPointInStroke(path, x, y);\n        case \"poly-line\":\n        case \"curve\":\n            if (shape.points && shape.points.length > 1) {\n                path.moveTo(shape.points[0].x, shape.points[0].y);\n                for (let p of shape.points.slice(1)) path.lineTo(p.x, p.y);\n                return ctx.isPointInStroke(path, x, y);\n            }\n            return false;\n        default:\n            const { xMin, yMin, xMax, yMax } = getBBox(shape);\n            return x >= xMin && x <= xMax && y >= yMin && y <= yMax;\n    }\n}\n\n// Draw a shape onto the canvas context\nfunction drawShape(ctx, shape, offsetX = 0, offsetY = 0) {\n    const x0 = shape.x0 + offsetX;\n    const y0 = shape.y0 + offsetY;\n    const x1 = shape.x1 + offsetX;\n    const y1 = shape.y1 + offsetY;\n\n    switch (shape.tool) {\n        case \"square\": {\n            const dx = shape.x1 - shape.x0;\n            const dy = shape.y1 - shape.y0;\n            let w, h;\n            if (shape.isSquare) {\n                const side = Math.min(Math.abs(dx), Math.abs(dy));\n                w = dx < 0 ? -side : side;\n                h = dy < 0 ? -side : side;\n            } else {\n                w = dx;\n                h = dy;\n            }\n            ctx.fillRect(shape.x0 + offsetX, shape.y0 + offsetY, w, h);\n            ctx.strokeRect(shape.x0 + offsetX, shape.y0 + offsetY, w, h);\n            return;\n        }\n        case \"line\":\n            ctx.beginPath();\n            ctx.moveTo(x0, y0);\n            ctx.lineTo(x1, y1);\n            ctx.stroke();\n            return;\n        case \"circle\":\n            ctx.beginPath();\n            if (shape.isCircle) {\n                const r = Math.hypot(shape.x1 - shape.x0, shape.y1 - shape.y0);\n                ctx.arc(x0, y0, r, 0, 2 * Math.PI);\n            } else {\n                ctx.ellipse(x0, y0, Math.abs(shape.x1 - shape.x0), Math.abs(shape.y1 - shape.y0), 0, 0, 2 * Math.PI);\n            }\n            ctx.fill();\n            ctx.stroke();\n            return;\n        case \"triangle\":\n            ctx.beginPath();\n            ctx.moveTo(x0, y0);\n            ctx.lineTo(x1, y0);\n            ctx.lineTo((x0 + x1) / 2, y1);\n            ctx.closePath();\n            ctx.fill();\n            ctx.stroke();\n            return;\n        case \"polygon\":\n            ctx.beginPath();\n            const sides = 5;\n            const radius = Math.hypot(shape.x1 - shape.x0, shape.y1 - shape.y0);\n            for (let i = 0; i < sides; i++) {\n                const ang = i * (2 * Math.PI / sides) - Math.PI / 2;\n                const px = shape.x0 + offsetX + radius * Math.cos(ang);\n                const py = shape.y0 + offsetY + radius * Math.sin(ang);\n                if (i === 0) ctx.moveTo(px, py);\n                else ctx.lineTo(px, py);\n            }\n            ctx.closePath();\n            ctx.fill();\n            ctx.stroke();\n            return;\n        case \"poly-line\":\n            if (shape.points && shape.points.length) {\n                ctx.beginPath();\n                ctx.moveTo(shape.points[0].x + offsetX, shape.points[0].y + offsetY);\n                for (let p of shape.points.slice(1)) ctx.lineTo(p.x + offsetX, p.y + offsetY);\n                ctx.stroke();\n            }\n            return;\n        case \"curve\":\n            if (shape.points && shape.points.length) {\n                ctx.beginPath();\n                const pts = shape.points;\n                ctx.moveTo(pts[0].x + offsetX, pts[0].y + offsetY);\n                for (let i = 1; i < pts.length; i++) {\n                    const prev = pts[i - 1];\n                    const curr = pts[i];\n                    const mx = (prev.x + curr.x) / 2 + offsetX;\n                    const my = (prev.y + curr.y) / 2 + offsetY;\n                    ctx.quadraticCurveTo(prev.x + offsetX, prev.y + offsetY, mx, my);\n                }\n                ctx.stroke();\n            }\n            return;\n        default:\n            return;\n    }\n}\n\n// Draw selection handles\nfunction drawSelection(ctx, shape, offsetX = 0, offsetY = 0) {\n    const R = 5;\n    if (shape.tool === \"line\") {\n        const p0 = { x: shape.x0 + offsetX, y: shape.y0 + offsetY };\n        const p1 = { x: shape.x1 + offsetX, y: shape.y1 + offsetY };\n        ctx.beginPath(); ctx.moveTo(p0.x, p0.y); ctx.lineTo(p1.x, p1.y); ctx.stroke();\n        [p0, p1].forEach(pt => {\n            ctx.beginPath(); ctx.arc(pt.x, pt.y, R, 0, 2 * Math.PI); ctx.fill(); ctx.stroke();\n        });\n        return;\n    }\n    const { xMin, yMin, xMax, yMax } = getBBox(shape);\n    ctx.strokeRect(xMin, yMin, xMax - xMin, yMax - yMin);\n    [\n        { x: xMin, y: yMin },\n        { x: xMax, y: yMin },\n        { x: xMax, y: yMax },\n        { x: xMin, y: yMax }\n    ].forEach(pt => {\n        ctx.beginPath(); ctx.arc(pt.x, pt.y, R, 0, 2 * Math.PI); ctx.fill(); ctx.stroke();\n    });\n}\n\nconst Canvas = forwardRef(({ activeTool, lineColor, fillColor, strokeWidth }, ref) => {\n    const containerRef = useRef(null);\n    const c1Ref = useRef(null);\n    const c2Ref = useRef(null);\n    const shapesRef = useRef([]);\n    const redoRef = useRef([]);\n    const polyRef = useRef([]);\n    const curveRef = useRef([]);\n    const [isDrawing, setIsDrawing] = useState(false);\n    const [startPos, setStartPos] = useState({ x: 0, y: 0 });\n    const dragRef = useRef({ isDragging: false, prevPos: { x: 0, y: 0 }, shapeIndex: null });\n\n    useImperativeHandle(ref, () => ({\n        exportShapes: () => {\n            const data = JSON.stringify(shapesRef.current, null, 2);\n            const blob = new Blob([data], { type: \"application/json\" });\n            const url = URL.createObjectURL(blob);\n            const a = document.createElement(\"a\");\n            a.href = url; a.download = \"shapes.json\"; a.click();\n            URL.revokeObjectURL(url);\n        },\n        downloadJPEG: () => {\n            const shapes = shapesRef.current;\n            const pad = 20;\n            let minX = Infinity, minY = Infinity;\n            let maxX = -Infinity, maxY = -Infinity;\n            shapes.forEach(s => {\n                if (s.tool === \"circle\" || s.tool === \"polygon\") {\n                    const r = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n                    minX = Math.min(minX, s.x0 - r);\n                    maxX = Math.max(maxX, s.x0 + r);\n                    minY = Math.min(minY, s.y0 - r);\n                    maxY = Math.max(maxY, s.y0 + r);\n                } else {\n                    minX = Math.min(minX, s.x0, s.x1);\n                    maxX = Math.max(maxX, s.x0, s.x1);\n                    minY = Math.min(minY, s.y0, s.y1);\n                    maxY = Math.max(maxY, s.y0, s.y1);\n                }\n            });\n            if (minX === Infinity) {\n                minX = 0; minY = 0;\n                maxX = c1Ref.current.width;\n                maxY = c1Ref.current.height;\n            }\n            minX -= pad; minY -= pad; maxX += pad; maxY += pad;\n            const sw = maxX - minX;\n            const sh = maxY - minY;\n            const tmp = document.createElement(\"canvas\");\n            tmp.width = sw; tmp.height = sh;\n            redrawAll({ current: tmp }, -minX, -minY, \"#ffffff\");\n            const dataURL = tmp.toDataURL(\"image/jpeg\", 1.0);\n            const link = document.createElement(\"a\");\n            link.href = dataURL;\n            link.download = \"shapes.jpg\";\n            link.click();\n        },\n        downloadPDF: () => {\n            const shapes = shapesRef.current;\n            const pad = 20;\n            let minX = Infinity, minY = Infinity;\n            let maxX = -Infinity, maxY = -Infinity;\n            shapes.forEach(s => {\n                if (s.tool === \"circle\" || s.tool === \"polygon\") {\n                    const r = Math.hypot(s.x1 - s.x0, s.y1 - s.y0);\n                    minX = Math.min(minX, s.x0 - r);\n                    maxX = Math.max(maxX, s.x0 + r);\n                    minY = Math.min(minY, s.y0 - r);\n                    maxY = Math.max(maxY, s.y0 + r);\n                } else {\n                    minX = Math.min(minX, s.x0, s.x1);\n                    maxX = Math.max(maxX, s.x0, s.x1);\n                    minY = Math.min(minY, s.y0, s.y1);\n                    maxY = Math.max(maxY, s.y0, s.y1);\n                }\n            });\n            if (minX === Infinity) {\n                minX = 0; minY = 0;\n                maxX = c1Ref.current.width;\n                maxY = c1Ref.current.height;\n            }\n            minX -= pad; minY -= pad; maxX += pad; maxY += pad;\n            const sw = maxX - minX;\n            const sh = maxY - minY;\n            const tmp = document.createElement(\"canvas\");\n            tmp.width = sw; tmp.height = sh;\n            redrawAll({ current: tmp }, -minX, -minY, \"#ffffff\");\n            const orientation = sw > sh ? \"landscape\" : \"portrait\";\n            const pdf = new jsPDF({ orientation, unit: \"px\", format: \"a4\" });\n            const pageW = pdf.internal.pageSize.getWidth();\n            const pageH = pdf.internal.pageSize.getHeight();\n            const scale = Math.min(pageW / sw, pageH / sh);\n            let yOffset = 0;\n            while (yOffset < sh) {\n                const sliceH = Math.min(sh - yOffset, pageH / scale);\n                const slice = document.createElement(\"canvas\");\n                slice.width = sw; slice.height = sliceH;\n                slice.getContext(\"2d\").drawImage(\n                    tmp,\n                    0, yOffset, sw, sliceH,\n                    0, 0, sw, sliceH\n                );\n                const imgData = slice.toDataURL(\"image/jpeg\", 1.0);\n                const imgW = sw * scale, imgH = sliceH * scale;\n                const xPos = (pageW - imgW) / 2;\n                pdf.addImage(imgData, \"JPEG\", xPos, 0, imgW, imgH);\n                yOffset += sliceH;\n                if (yOffset < sh) pdf.addPage();\n            }\n            pdf.save(\"shapes.pdf\");\n        },\n        loadShapes: (arr) => { shapesRef.current = arr.map(s => ({ ...s, selected: false })); redrawAll(); },\n        getShapeCount: () => shapesRef.current.length,\n        clearShapes: () => { shapesRef.current = []; redrawAll(); }\n    }));\n\n    useEffect(() => {\n        const resize = () => {\n            const { width, height } = containerRef.current.getBoundingClientRect();\n            [c1Ref, c2Ref].forEach(r => { r.current.width = width; r.current.height = height; });\n            redrawAll();\n        };\n        resize(); window.addEventListener(\"resize\", resize);\n        return () => window.removeEventListener(\"resize\", resize);\n    }, []);\n\n    useEffect(() => {\n        let dirty = false;\n        shapesRef.current.forEach(s => {\n            if (s.selected && (s.strokeWidth !== strokeWidth || s.lineColor !== lineColor || s.fillColor !== fillColor)) {\n                s.strokeWidth = strokeWidth;\n                s.lineColor = lineColor;\n                s.fillColor = fillColor;\n                dirty = true;\n            }\n        });\n        if (dirty) redrawAll();\n    }, [strokeWidth, lineColor, fillColor]);\n\n    function redrawAll(context = c1Ref, offsetX = 0, offsetY = 0) {\n        const c = context.current;\n        const ctx = c.getContext(\"2d\");\n        ctx.clearRect(0, 0, c.width, c.height);\n        ctx.fillStyle = \"#979797\";\n        ctx.fillRect(0, 0, c.width, c.height);\n        shapesRef.current.forEach(s => {\n            ctx.save();\n            ctx.strokeStyle = s.lineColor || lineColor;\n            ctx.fillStyle = s.fillColor || fillColor;\n            ctx.lineWidth = s.strokeWidth || strokeWidth;\n            drawShape(ctx, s, offsetX, offsetY);\n            if (s.selected) {\n                ctx.save(); ctx.strokeStyle = \"#ff7300\"; ctx.lineWidth = 2;\n                drawSelection(ctx, s, offsetX, offsetY);\n                ctx.restore();\n            }\n            ctx.restore();\n        });\n    }\n\n    useEffect(() => {\n        const c2 = c2Ref.current;\n        const ctx2 = c2.getContext(\"2d\");\n        const getPos = e => {\n            const r = c2.getBoundingClientRect();\n            return { x: e.clientX - r.left, y: e.clientY - r.top };\n        };\n\n        const down = e => {\n            const pos = getPos(e);\n            if (activeTool === \"cursor\") {\n                const ctx1 = c1Ref.current.getContext(\"2d\");\n                shapesRef.current.forEach(s => s.selected = false);\n                for (let i = shapesRef.current.length - 1; i >= 0; i--) {\n                    const s = shapesRef.current[i];\n                    if (hitTest(ctx1, s, pos.x, pos.y, strokeWidth)) {\n                        s.selected = true;\n                        dragRef.current = { isDragging: true, prevPos: pos, shapeIndex: i };\n                        redrawAll();\n                        return;\n                    }\n                }\n                redrawAll();\n                return;\n            }\n            if (activeTool === \"poly-line\") { polyRef.current.push(pos); setIsDrawing(true); return; }\n            if (activeTool === \"curve\") { curveRef.current.push(pos); setIsDrawing(true); return; }\n            if (![\"square\", \"line\", \"circle\", \"triangle\", \"polygon\"].includes(activeTool)) return;\n            setStartPos(pos);\n            setIsDrawing(true);\n        };\n\n        const move = e => {\n            const pos = getPos(e);\n            if (activeTool === \"cursor\" && dragRef.current.isDragging) {\n                const dx = pos.x - dragRef.current.prevPos.x;\n                const dy = pos.y - dragRef.current.prevPos.y;\n                const s = shapesRef.current[dragRef.current.shapeIndex];\n                if (s.points) s.points.forEach(p => { p.x += dx; p.y += dy; });\n                else { s.x0 += dx; s.y0 += dy; s.x1 += dx; s.y1 += dy; }\n                dragRef.current.prevPos = pos;\n                redrawAll(); return;\n            }\n            if (activeTool === \"poly-line\" && polyRef.current.length) {\n                ctx2.clearRect(0, 0, c2.width, c2.height);\n                ctx2.strokeStyle = lineColor; ctx2.lineWidth = strokeWidth;\n                ctx2.beginPath(); ctx2.moveTo(polyRef.current[0].x, polyRef.current[0].y);\n                for (let p of polyRef.current.slice(1)) ctx2.lineTo(p.x, p.y);\n                ctx2.lineTo(pos.x, pos.y); ctx2.stroke(); return;\n            }\n            if (activeTool === \"curve\" && curveRef.current.length) {\n                ctx2.clearRect(0, 0, c2.width, c2.height);\n                ctx2.strokeStyle = lineColor; ctx2.lineWidth = strokeWidth;\n                ctx2.beginPath();\n                const pts = curveRef.current;\n                ctx2.moveTo(pts[0].x, pts[0].y);\n                for (let i = 1; i < pts.length; i++) {\n                    const prev = pts[i - 1], curr = pts[i];\n                    const mx = (prev.x + curr.x) / 2;\n                    const my = (prev.y + curr.y) / 2;\n                    ctx2.quadraticCurveTo(prev.x, prev.y, mx, my);\n                }\n                ctx2.lineTo(pos.x, pos.y); ctx2.stroke(); return;\n            }\n            if (!isDrawing) return;\n            ctx2.clearRect(0, 0, c2.width, c2.height);\n            ctx2.strokeStyle = lineColor; ctx2.lineWidth = strokeWidth;\n            ctx2.beginPath();\n            const { x, y } = pos;\n            const dx = x - startPos.x;\n            const dy = y - startPos.y;\n\n            const shape = {\n                tool: activeTool,        // <— this is what drawShape looks at!\n                x0: startPos.x,\n                y0: startPos.y,\n                x1: x,\n                y1: y,\n                isSquare: e.shiftKey && activeTool === \"square\",\n                isCircle: e.shiftKey && activeTool === \"circle\",\n                strokeWidth: 1,\n                lineColor: \"black\",\n                fillColor: \"transparent\"\n            }\n            ctx2.fillStyle = shape.fillColor;\n            ctx2.strokeStyle = shape.lineColor;\n            ctx2.lineWidth = shape.strokeWidth;\n\n            drawShape(ctx2, shape, 0, 0);\n\n            /* switch (activeTool) {\n                case \"square\":\n                    drawShape(ctx2, shape, 0, 0);\n                    break;\n                case \"line\":\n                    drawShape(ctx2)\n                    break;\n                case \"circle\":\n                    if (e.shiftKey) {\n                        const r = Math.min(Math.abs(dx), Math.abs(dy));\n                        ctx2.arc(startPos.x, startPos.y, r, 0, 2 * Math.PI);\n                    } else {\n                        ctx2.ellipse(startPos.x, startPos.y, Math.abs(dx), Math.abs(dy), 0, 0, 2 * Math.PI);\n                    }\n                    ctx2.stroke();\n                    break;\n                case \"triangle\":\n                    ctx2.moveTo(startPos.x, startPos.y);\n                    ctx2.lineTo(startPos.x + dx, startPos.y);\n                    ctx2.lineTo(startPos.x + dx / 2, startPos.y + dy);\n                    ctx2.closePath(); ctx2.stroke();\n                    break;\n                case \"polygon\":\n                    const sides2 = 5;\n                    const r2 = Math.hypot(dx, dy);\n                    const step2 = 2 * Math.PI / sides2;\n                    ctx2.beginPath();\n                    for (let i = 0; i < sides2; i++) {\n                        const ang = i * step2 - Math.PI / 2;\n                        const px = startPos.x + r2 * Math.cos(ang);\n                        const py = startPos.y + r2 * Math.sin(ang);\n                        if (i === 0) ctx2.moveTo(px, py);\n                        else ctx2.lineTo(px, py);\n                    }\n                    ctx2.closePath(); ctx2.stroke();\n                    break;\n            } */\n        };\n\n        const up = e => {\n            if (activeTool === \"cursor\" && dragRef.current.isDragging) {\n                dragRef.current.isDragging = false;\n                dragRef.current.shapeIndex = null;\n                return;\n            }\n            if ([\"poly-line\", \"curve\"].includes(activeTool)) return;\n            if (!isDrawing) return;\n            const pos = getPos(e);\n            if (pos.x === startPos.x && pos.y === startPos.y) {\n                ctx2.clearRect(0, 0, c2.width, c2.height);\n                setIsDrawing(false);\n                return;\n            }\n            const isCircle = activeTool === \"circle\" && e.shiftKey;\n            const isSquare = activeTool === \"square\" && e.shiftKey;\n            shapesRef.current.push({\n                tool: activeTool,\n                x0: startPos.x, y0: startPos.y,\n                x1: pos.x, y1: pos.y,\n                lineColor, fillColor, strokeWidth,\n                isCircle, isSquare,\n                selected: false\n            });\n            shapesRef.current.forEach(s => (s.selected = false));\n            shapesRef.current[shapesRef.current.length - 1].selected = true;\n            redrawAll();\n            ctx2.clearRect(0, 0, c2.width, c2.height);\n            setIsDrawing(false);\n        };\n\n        const finishPoly = e => {\n            if (activeTool !== \"poly-line\" || polyRef.current.length < 2) return;\n            shapesRef.current.push({ tool: \"poly-line\", points: polyRef.current.slice(), lineColor, fillColor, strokeWidth, selected: false });\n            shapesRef.current.forEach(s => (s.selected = false));\n            shapesRef.current[shapesRef.current.length - 1].selected = true;\n            redrawAll();\n            ctx2.clearRect(0, 0, c2.width, c2.height);\n            polyRef.current = [];\n        };\n\n        const finishCurve = e => {\n            if (activeTool !== \"curve\" || curveRef.current.length < 2) return;\n            shapesRef.current.push({ tool: \"curve\", points: curveRef.current.slice(), lineColor, fillColor, strokeWidth, selected: false });\n            shapesRef.current.forEach(s => (s.selected = false));\n            shapesRef.current[shapesRef.current.length - 1].selected = true;\n            redrawAll();\n            ctx2.clearRect(0, 0, c2.width, c2.height);\n            curveRef.current = [];\n            setIsDrawing(false);\n        };\n\n        const onKeyDown = e => {\n            if (e.ctrlKey && e.key === \"z\" && shapesRef.current.length) {\n                redoRef.current.push(shapesRef.current.pop());\n                redrawAll();\n            } else if (e.ctrlKey && e.shiftKey && e.key.toLowerCase() === \"z\" && redoRef.current.length) {\n                shapesRef.current.push(redoRef.current.pop());\n                redrawAll();\n            }\n        };\n\n        c2.addEventListener(\"mousedown\", down);\n        c2.addEventListener(\"mousemove\", move);\n        c2.addEventListener(\"mouseup\", up);\n        c2.addEventListener(\"dblclick\", finishPoly);\n        c2.addEventListener(\"dblclick\", finishCurve);\n        window.addEventListener(\"keydown\", onKeyDown);\n        return () => {\n            c2.removeEventListener(\"mousedown\", down);\n            c2.removeEventListener(\"mousemove\", move);\n            c2.removeEventListener(\"mouseup\", up);\n            c2.removeEventListener(\"dblclick\", finishPoly);\n            c2.removeEventListener(\"dblclick\", finishCurve);\n            window.removeEventListener(\"keydown\", onKeyDown);\n        };\n    }, [activeTool, isDrawing, startPos, lineColor, fillColor, strokeWidth]);\n\n    return (\n        <div ref={containerRef} className=\"canvas-container\">\n            <canvas ref={c1Ref} />\n            <canvas ref={c2Ref} style={{ backgroundColor: \"transparent\" }} />\n        </div>\n    );\n});\n\nexport default Canvas;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}